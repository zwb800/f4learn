
f4learn.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006928  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08006abc  08006abc  00007abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b14  08006b14  000080fc  2**0
                  CONTENTS
  4 .ARM          00000008  08006b14  08006b14  00007b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b1c  08006b1c  000080fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b1c  08006b1c  00007b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006b20  08006b20  00007b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000fc  20000000  08006b24  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001404  200000fc  08006c20  000080fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001500  08006c20  00008500  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000080fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d46f  00000000  00000000  0000812c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a46  00000000  00000000  0001559b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b68  00000000  00000000  00017fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000860  00000000  00000000  00018b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c3b  00000000  00000000  000193b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fb69  00000000  00000000  00030feb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000862df  00000000  00000000  00040b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c6e33  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ce0  00000000  00000000  000c6e78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000039  00000000  00000000  000c9b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200000fc 	.word	0x200000fc
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08006aa4 	.word	0x08006aa4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000100 	.word	0x20000100
 80001d0:	08006aa4 	.word	0x08006aa4

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b085      	sub	sp, #20
 80004c8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ca:	2300      	movs	r3, #0
 80004cc:	60fb      	str	r3, [r7, #12]
 80004ce:	4b17      	ldr	r3, [pc, #92]	@ (800052c <MX_GPIO_Init+0x68>)
 80004d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004d2:	4a16      	ldr	r2, [pc, #88]	@ (800052c <MX_GPIO_Init+0x68>)
 80004d4:	f043 0304 	orr.w	r3, r3, #4
 80004d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80004da:	4b14      	ldr	r3, [pc, #80]	@ (800052c <MX_GPIO_Init+0x68>)
 80004dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004de:	f003 0304 	and.w	r3, r3, #4
 80004e2:	60fb      	str	r3, [r7, #12]
 80004e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004e6:	2300      	movs	r3, #0
 80004e8:	60bb      	str	r3, [r7, #8]
 80004ea:	4b10      	ldr	r3, [pc, #64]	@ (800052c <MX_GPIO_Init+0x68>)
 80004ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004ee:	4a0f      	ldr	r2, [pc, #60]	@ (800052c <MX_GPIO_Init+0x68>)
 80004f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80004f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80004f6:	4b0d      	ldr	r3, [pc, #52]	@ (800052c <MX_GPIO_Init+0x68>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80004fe:	60bb      	str	r3, [r7, #8]
 8000500:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000502:	2300      	movs	r3, #0
 8000504:	607b      	str	r3, [r7, #4]
 8000506:	4b09      	ldr	r3, [pc, #36]	@ (800052c <MX_GPIO_Init+0x68>)
 8000508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800050a:	4a08      	ldr	r2, [pc, #32]	@ (800052c <MX_GPIO_Init+0x68>)
 800050c:	f043 0301 	orr.w	r3, r3, #1
 8000510:	6313      	str	r3, [r2, #48]	@ 0x30
 8000512:	4b06      	ldr	r3, [pc, #24]	@ (800052c <MX_GPIO_Init+0x68>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000516:	f003 0301 	and.w	r3, r3, #1
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	687b      	ldr	r3, [r7, #4]

}
 800051e:	bf00      	nop
 8000520:	3714      	adds	r7, #20
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	40023800 	.word	0x40023800

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000534:	f000 f918 	bl	8000768 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000538:	f000 f806 	bl	8000548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053c:	f7ff ffc2 	bl	80004c4 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000540:	f005 fd9a 	bl	8006078 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000544:	bf00      	nop
 8000546:	e7fd      	b.n	8000544 <main+0x14>

08000548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b094      	sub	sp, #80	@ 0x50
 800054c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054e:	f107 0320 	add.w	r3, r7, #32
 8000552:	2230      	movs	r2, #48	@ 0x30
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f006 fa78 	bl	8006a4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055c:	f107 030c 	add.w	r3, r7, #12
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]
 800056a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800056c:	2300      	movs	r3, #0
 800056e:	60bb      	str	r3, [r7, #8]
 8000570:	4b29      	ldr	r3, [pc, #164]	@ (8000618 <SystemClock_Config+0xd0>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000574:	4a28      	ldr	r2, [pc, #160]	@ (8000618 <SystemClock_Config+0xd0>)
 8000576:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800057a:	6413      	str	r3, [r2, #64]	@ 0x40
 800057c:	4b26      	ldr	r3, [pc, #152]	@ (8000618 <SystemClock_Config+0xd0>)
 800057e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000580:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000584:	60bb      	str	r3, [r7, #8]
 8000586:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000588:	2300      	movs	r3, #0
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	4b23      	ldr	r3, [pc, #140]	@ (800061c <SystemClock_Config+0xd4>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000594:	4a21      	ldr	r2, [pc, #132]	@ (800061c <SystemClock_Config+0xd4>)
 8000596:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800059a:	6013      	str	r3, [r2, #0]
 800059c:	4b1f      	ldr	r3, [pc, #124]	@ (800061c <SystemClock_Config+0xd4>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a8:	2301      	movs	r3, #1
 80005aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005b0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b2:	2302      	movs	r3, #2
 80005b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005b6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80005bc:	2319      	movs	r3, #25
 80005be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005c0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80005c4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005c6:	2304      	movs	r3, #4
 80005c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005ca:	2307      	movs	r3, #7
 80005cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ce:	f107 0320 	add.w	r3, r7, #32
 80005d2:	4618      	mov	r0, r3
 80005d4:	f001 fe46 	bl	8002264 <HAL_RCC_OscConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005de:	f000 f81f 	bl	8000620 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e2:	230f      	movs	r3, #15
 80005e4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e6:	2302      	movs	r3, #2
 80005e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ea:	2300      	movs	r3, #0
 80005ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005f8:	f107 030c 	add.w	r3, r7, #12
 80005fc:	2102      	movs	r1, #2
 80005fe:	4618      	mov	r0, r3
 8000600:	f002 f8a8 	bl	8002754 <HAL_RCC_ClockConfig>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800060a:	f000 f809 	bl	8000620 <Error_Handler>
  }
}
 800060e:	bf00      	nop
 8000610:	3750      	adds	r7, #80	@ 0x50
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	40023800 	.word	0x40023800
 800061c:	40007000 	.word	0x40007000

08000620 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000624:	b672      	cpsid	i
}
 8000626:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000628:	bf00      	nop
 800062a:	e7fd      	b.n	8000628 <Error_Handler+0x8>

0800062c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000632:	2300      	movs	r3, #0
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	4b10      	ldr	r3, [pc, #64]	@ (8000678 <HAL_MspInit+0x4c>)
 8000638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800063a:	4a0f      	ldr	r2, [pc, #60]	@ (8000678 <HAL_MspInit+0x4c>)
 800063c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000640:	6453      	str	r3, [r2, #68]	@ 0x44
 8000642:	4b0d      	ldr	r3, [pc, #52]	@ (8000678 <HAL_MspInit+0x4c>)
 8000644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000646:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800064e:	2300      	movs	r3, #0
 8000650:	603b      	str	r3, [r7, #0]
 8000652:	4b09      	ldr	r3, [pc, #36]	@ (8000678 <HAL_MspInit+0x4c>)
 8000654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000656:	4a08      	ldr	r2, [pc, #32]	@ (8000678 <HAL_MspInit+0x4c>)
 8000658:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800065c:	6413      	str	r3, [r2, #64]	@ 0x40
 800065e:	4b06      	ldr	r3, [pc, #24]	@ (8000678 <HAL_MspInit+0x4c>)
 8000660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000662:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000666:	603b      	str	r3, [r7, #0]
 8000668:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800066a:	bf00      	nop
 800066c:	370c      	adds	r7, #12
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	40023800 	.word	0x40023800

0800067c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000680:	bf00      	nop
 8000682:	e7fd      	b.n	8000680 <NMI_Handler+0x4>

08000684 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000688:	bf00      	nop
 800068a:	e7fd      	b.n	8000688 <HardFault_Handler+0x4>

0800068c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000690:	bf00      	nop
 8000692:	e7fd      	b.n	8000690 <MemManage_Handler+0x4>

08000694 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000698:	bf00      	nop
 800069a:	e7fd      	b.n	8000698 <BusFault_Handler+0x4>

0800069c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006a0:	bf00      	nop
 80006a2:	e7fd      	b.n	80006a0 <UsageFault_Handler+0x4>

080006a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006a8:	bf00      	nop
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr

080006b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006b2:	b480      	push	{r7}
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006b6:	bf00      	nop
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr

080006c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006c4:	bf00      	nop
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr

080006ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006ce:	b580      	push	{r7, lr}
 80006d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006d2:	f000 f89b 	bl	800080c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
	...

080006dc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80006e0:	4802      	ldr	r0, [pc, #8]	@ (80006ec <OTG_FS_IRQHandler+0x10>)
 80006e2:	f000 fcb1 	bl	8001048 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	20000dfc 	.word	0x20000dfc

080006f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006f4:	4b06      	ldr	r3, [pc, #24]	@ (8000710 <SystemInit+0x20>)
 80006f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006fa:	4a05      	ldr	r2, [pc, #20]	@ (8000710 <SystemInit+0x20>)
 80006fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000700:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000704:	bf00      	nop
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	e000ed00 	.word	0xe000ed00

08000714 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000714:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800074c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000718:	f7ff ffea 	bl	80006f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800071c:	480c      	ldr	r0, [pc, #48]	@ (8000750 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800071e:	490d      	ldr	r1, [pc, #52]	@ (8000754 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000720:	4a0d      	ldr	r2, [pc, #52]	@ (8000758 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000722:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000724:	e002      	b.n	800072c <LoopCopyDataInit>

08000726 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000726:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000728:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800072a:	3304      	adds	r3, #4

0800072c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800072c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800072e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000730:	d3f9      	bcc.n	8000726 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000732:	4a0a      	ldr	r2, [pc, #40]	@ (800075c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000734:	4c0a      	ldr	r4, [pc, #40]	@ (8000760 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000736:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000738:	e001      	b.n	800073e <LoopFillZerobss>

0800073a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800073a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800073c:	3204      	adds	r2, #4

0800073e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800073e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000740:	d3fb      	bcc.n	800073a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000742:	f006 f98b 	bl	8006a5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000746:	f7ff fef3 	bl	8000530 <main>
  bx  lr    
 800074a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800074c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000750:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000754:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000758:	08006b24 	.word	0x08006b24
  ldr r2, =_sbss
 800075c:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000760:	20001500 	.word	0x20001500

08000764 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000764:	e7fe      	b.n	8000764 <ADC_IRQHandler>
	...

08000768 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800076c:	4b0e      	ldr	r3, [pc, #56]	@ (80007a8 <HAL_Init+0x40>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a0d      	ldr	r2, [pc, #52]	@ (80007a8 <HAL_Init+0x40>)
 8000772:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000776:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000778:	4b0b      	ldr	r3, [pc, #44]	@ (80007a8 <HAL_Init+0x40>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a0a      	ldr	r2, [pc, #40]	@ (80007a8 <HAL_Init+0x40>)
 800077e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000782:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000784:	4b08      	ldr	r3, [pc, #32]	@ (80007a8 <HAL_Init+0x40>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a07      	ldr	r2, [pc, #28]	@ (80007a8 <HAL_Init+0x40>)
 800078a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800078e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000790:	2003      	movs	r0, #3
 8000792:	f000 f94f 	bl	8000a34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000796:	200f      	movs	r0, #15
 8000798:	f000 f808 	bl	80007ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800079c:	f7ff ff46 	bl	800062c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007a0:	2300      	movs	r3, #0
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40023c00 	.word	0x40023c00

080007ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007b4:	4b12      	ldr	r3, [pc, #72]	@ (8000800 <HAL_InitTick+0x54>)
 80007b6:	681a      	ldr	r2, [r3, #0]
 80007b8:	4b12      	ldr	r3, [pc, #72]	@ (8000804 <HAL_InitTick+0x58>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	4619      	mov	r1, r3
 80007be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80007c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ca:	4618      	mov	r0, r3
 80007cc:	f000 f967 	bl	8000a9e <HAL_SYSTICK_Config>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007d6:	2301      	movs	r3, #1
 80007d8:	e00e      	b.n	80007f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2b0f      	cmp	r3, #15
 80007de:	d80a      	bhi.n	80007f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007e0:	2200      	movs	r2, #0
 80007e2:	6879      	ldr	r1, [r7, #4]
 80007e4:	f04f 30ff 	mov.w	r0, #4294967295
 80007e8:	f000 f92f 	bl	8000a4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007ec:	4a06      	ldr	r2, [pc, #24]	@ (8000808 <HAL_InitTick+0x5c>)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007f2:	2300      	movs	r3, #0
 80007f4:	e000      	b.n	80007f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007f6:	2301      	movs	r3, #1
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000000 	.word	0x20000000
 8000804:	20000008 	.word	0x20000008
 8000808:	20000004 	.word	0x20000004

0800080c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000810:	4b06      	ldr	r3, [pc, #24]	@ (800082c <HAL_IncTick+0x20>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	461a      	mov	r2, r3
 8000816:	4b06      	ldr	r3, [pc, #24]	@ (8000830 <HAL_IncTick+0x24>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4413      	add	r3, r2
 800081c:	4a04      	ldr	r2, [pc, #16]	@ (8000830 <HAL_IncTick+0x24>)
 800081e:	6013      	str	r3, [r2, #0]
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	20000008 	.word	0x20000008
 8000830:	20000118 	.word	0x20000118

08000834 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  return uwTick;
 8000838:	4b03      	ldr	r3, [pc, #12]	@ (8000848 <HAL_GetTick+0x14>)
 800083a:	681b      	ldr	r3, [r3, #0]
}
 800083c:	4618      	mov	r0, r3
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	20000118 	.word	0x20000118

0800084c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000854:	f7ff ffee 	bl	8000834 <HAL_GetTick>
 8000858:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000864:	d005      	beq.n	8000872 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000866:	4b0a      	ldr	r3, [pc, #40]	@ (8000890 <HAL_Delay+0x44>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	461a      	mov	r2, r3
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	4413      	add	r3, r2
 8000870:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000872:	bf00      	nop
 8000874:	f7ff ffde 	bl	8000834 <HAL_GetTick>
 8000878:	4602      	mov	r2, r0
 800087a:	68bb      	ldr	r3, [r7, #8]
 800087c:	1ad3      	subs	r3, r2, r3
 800087e:	68fa      	ldr	r2, [r7, #12]
 8000880:	429a      	cmp	r2, r3
 8000882:	d8f7      	bhi.n	8000874 <HAL_Delay+0x28>
  {
  }
}
 8000884:	bf00      	nop
 8000886:	bf00      	nop
 8000888:	3710      	adds	r7, #16
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20000008 	.word	0x20000008

08000894 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000894:	b480      	push	{r7}
 8000896:	b085      	sub	sp, #20
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	f003 0307 	and.w	r3, r3, #7
 80008a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008a4:	4b0c      	ldr	r3, [pc, #48]	@ (80008d8 <__NVIC_SetPriorityGrouping+0x44>)
 80008a6:	68db      	ldr	r3, [r3, #12]
 80008a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008aa:	68ba      	ldr	r2, [r7, #8]
 80008ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80008b0:	4013      	ands	r3, r2
 80008b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80008c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008c6:	4a04      	ldr	r2, [pc, #16]	@ (80008d8 <__NVIC_SetPriorityGrouping+0x44>)
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	60d3      	str	r3, [r2, #12]
}
 80008cc:	bf00      	nop
 80008ce:	3714      	adds	r7, #20
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr
 80008d8:	e000ed00 	.word	0xe000ed00

080008dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008e0:	4b04      	ldr	r3, [pc, #16]	@ (80008f4 <__NVIC_GetPriorityGrouping+0x18>)
 80008e2:	68db      	ldr	r3, [r3, #12]
 80008e4:	0a1b      	lsrs	r3, r3, #8
 80008e6:	f003 0307 	and.w	r3, r3, #7
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr
 80008f4:	e000ed00 	.word	0xe000ed00

080008f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000906:	2b00      	cmp	r3, #0
 8000908:	db0b      	blt.n	8000922 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800090a:	79fb      	ldrb	r3, [r7, #7]
 800090c:	f003 021f 	and.w	r2, r3, #31
 8000910:	4907      	ldr	r1, [pc, #28]	@ (8000930 <__NVIC_EnableIRQ+0x38>)
 8000912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000916:	095b      	lsrs	r3, r3, #5
 8000918:	2001      	movs	r0, #1
 800091a:	fa00 f202 	lsl.w	r2, r0, r2
 800091e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000922:	bf00      	nop
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	e000e100 	.word	0xe000e100

08000934 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	6039      	str	r1, [r7, #0]
 800093e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000944:	2b00      	cmp	r3, #0
 8000946:	db0a      	blt.n	800095e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	b2da      	uxtb	r2, r3
 800094c:	490c      	ldr	r1, [pc, #48]	@ (8000980 <__NVIC_SetPriority+0x4c>)
 800094e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000952:	0112      	lsls	r2, r2, #4
 8000954:	b2d2      	uxtb	r2, r2
 8000956:	440b      	add	r3, r1
 8000958:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800095c:	e00a      	b.n	8000974 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	b2da      	uxtb	r2, r3
 8000962:	4908      	ldr	r1, [pc, #32]	@ (8000984 <__NVIC_SetPriority+0x50>)
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	f003 030f 	and.w	r3, r3, #15
 800096a:	3b04      	subs	r3, #4
 800096c:	0112      	lsls	r2, r2, #4
 800096e:	b2d2      	uxtb	r2, r2
 8000970:	440b      	add	r3, r1
 8000972:	761a      	strb	r2, [r3, #24]
}
 8000974:	bf00      	nop
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr
 8000980:	e000e100 	.word	0xe000e100
 8000984:	e000ed00 	.word	0xe000ed00

08000988 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000988:	b480      	push	{r7}
 800098a:	b089      	sub	sp, #36	@ 0x24
 800098c:	af00      	add	r7, sp, #0
 800098e:	60f8      	str	r0, [r7, #12]
 8000990:	60b9      	str	r1, [r7, #8]
 8000992:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	f003 0307 	and.w	r3, r3, #7
 800099a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800099c:	69fb      	ldr	r3, [r7, #28]
 800099e:	f1c3 0307 	rsb	r3, r3, #7
 80009a2:	2b04      	cmp	r3, #4
 80009a4:	bf28      	it	cs
 80009a6:	2304      	movcs	r3, #4
 80009a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009aa:	69fb      	ldr	r3, [r7, #28]
 80009ac:	3304      	adds	r3, #4
 80009ae:	2b06      	cmp	r3, #6
 80009b0:	d902      	bls.n	80009b8 <NVIC_EncodePriority+0x30>
 80009b2:	69fb      	ldr	r3, [r7, #28]
 80009b4:	3b03      	subs	r3, #3
 80009b6:	e000      	b.n	80009ba <NVIC_EncodePriority+0x32>
 80009b8:	2300      	movs	r3, #0
 80009ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009bc:	f04f 32ff 	mov.w	r2, #4294967295
 80009c0:	69bb      	ldr	r3, [r7, #24]
 80009c2:	fa02 f303 	lsl.w	r3, r2, r3
 80009c6:	43da      	mvns	r2, r3
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	401a      	ands	r2, r3
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009d0:	f04f 31ff 	mov.w	r1, #4294967295
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	fa01 f303 	lsl.w	r3, r1, r3
 80009da:	43d9      	mvns	r1, r3
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009e0:	4313      	orrs	r3, r2
         );
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3724      	adds	r7, #36	@ 0x24
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
	...

080009f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	3b01      	subs	r3, #1
 80009fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a00:	d301      	bcc.n	8000a06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a02:	2301      	movs	r3, #1
 8000a04:	e00f      	b.n	8000a26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a06:	4a0a      	ldr	r2, [pc, #40]	@ (8000a30 <SysTick_Config+0x40>)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	3b01      	subs	r3, #1
 8000a0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a0e:	210f      	movs	r1, #15
 8000a10:	f04f 30ff 	mov.w	r0, #4294967295
 8000a14:	f7ff ff8e 	bl	8000934 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a18:	4b05      	ldr	r3, [pc, #20]	@ (8000a30 <SysTick_Config+0x40>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a1e:	4b04      	ldr	r3, [pc, #16]	@ (8000a30 <SysTick_Config+0x40>)
 8000a20:	2207      	movs	r2, #7
 8000a22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a24:	2300      	movs	r3, #0
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	e000e010 	.word	0xe000e010

08000a34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a3c:	6878      	ldr	r0, [r7, #4]
 8000a3e:	f7ff ff29 	bl	8000894 <__NVIC_SetPriorityGrouping>
}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	b086      	sub	sp, #24
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	4603      	mov	r3, r0
 8000a52:	60b9      	str	r1, [r7, #8]
 8000a54:	607a      	str	r2, [r7, #4]
 8000a56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a5c:	f7ff ff3e 	bl	80008dc <__NVIC_GetPriorityGrouping>
 8000a60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a62:	687a      	ldr	r2, [r7, #4]
 8000a64:	68b9      	ldr	r1, [r7, #8]
 8000a66:	6978      	ldr	r0, [r7, #20]
 8000a68:	f7ff ff8e 	bl	8000988 <NVIC_EncodePriority>
 8000a6c:	4602      	mov	r2, r0
 8000a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a72:	4611      	mov	r1, r2
 8000a74:	4618      	mov	r0, r3
 8000a76:	f7ff ff5d 	bl	8000934 <__NVIC_SetPriority>
}
 8000a7a:	bf00      	nop
 8000a7c:	3718      	adds	r7, #24
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b082      	sub	sp, #8
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	4603      	mov	r3, r0
 8000a8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff ff31 	bl	80008f8 <__NVIC_EnableIRQ>
}
 8000a96:	bf00      	nop
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	b082      	sub	sp, #8
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aa6:	6878      	ldr	r0, [r7, #4]
 8000aa8:	f7ff ffa2 	bl	80009f0 <SysTick_Config>
 8000aac:	4603      	mov	r3, r0
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
	...

08000ab8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b089      	sub	sp, #36	@ 0x24
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ace:	2300      	movs	r3, #0
 8000ad0:	61fb      	str	r3, [r7, #28]
 8000ad2:	e159      	b.n	8000d88 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8000adc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	697a      	ldr	r2, [r7, #20]
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ae8:	693a      	ldr	r2, [r7, #16]
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	f040 8148 	bne.w	8000d82 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	f003 0303 	and.w	r3, r3, #3
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d005      	beq.n	8000b0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b06:	2b02      	cmp	r3, #2
 8000b08:	d130      	bne.n	8000b6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	689b      	ldr	r3, [r3, #8]
 8000b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b10:	69fb      	ldr	r3, [r7, #28]
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	2203      	movs	r2, #3
 8000b16:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1a:	43db      	mvns	r3, r3
 8000b1c:	69ba      	ldr	r2, [r7, #24]
 8000b1e:	4013      	ands	r3, r2
 8000b20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	68da      	ldr	r2, [r3, #12]
 8000b26:	69fb      	ldr	r3, [r7, #28]
 8000b28:	005b      	lsls	r3, r3, #1
 8000b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2e:	69ba      	ldr	r2, [r7, #24]
 8000b30:	4313      	orrs	r3, r2
 8000b32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	69ba      	ldr	r2, [r7, #24]
 8000b38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b40:	2201      	movs	r2, #1
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	fa02 f303 	lsl.w	r3, r2, r3
 8000b48:	43db      	mvns	r3, r3
 8000b4a:	69ba      	ldr	r2, [r7, #24]
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	091b      	lsrs	r3, r3, #4
 8000b56:	f003 0201 	and.w	r2, r3, #1
 8000b5a:	69fb      	ldr	r3, [r7, #28]
 8000b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b60:	69ba      	ldr	r2, [r7, #24]
 8000b62:	4313      	orrs	r3, r2
 8000b64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	69ba      	ldr	r2, [r7, #24]
 8000b6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	f003 0303 	and.w	r3, r3, #3
 8000b74:	2b03      	cmp	r3, #3
 8000b76:	d017      	beq.n	8000ba8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	005b      	lsls	r3, r3, #1
 8000b82:	2203      	movs	r2, #3
 8000b84:	fa02 f303 	lsl.w	r3, r2, r3
 8000b88:	43db      	mvns	r3, r3
 8000b8a:	69ba      	ldr	r2, [r7, #24]
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	689a      	ldr	r2, [r3, #8]
 8000b94:	69fb      	ldr	r3, [r7, #28]
 8000b96:	005b      	lsls	r3, r3, #1
 8000b98:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9c:	69ba      	ldr	r2, [r7, #24]
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	69ba      	ldr	r2, [r7, #24]
 8000ba6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	f003 0303 	and.w	r3, r3, #3
 8000bb0:	2b02      	cmp	r3, #2
 8000bb2:	d123      	bne.n	8000bfc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000bb4:	69fb      	ldr	r3, [r7, #28]
 8000bb6:	08da      	lsrs	r2, r3, #3
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	3208      	adds	r2, #8
 8000bbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	f003 0307 	and.w	r3, r3, #7
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	220f      	movs	r2, #15
 8000bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd0:	43db      	mvns	r3, r3
 8000bd2:	69ba      	ldr	r2, [r7, #24]
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	691a      	ldr	r2, [r3, #16]
 8000bdc:	69fb      	ldr	r3, [r7, #28]
 8000bde:	f003 0307 	and.w	r3, r3, #7
 8000be2:	009b      	lsls	r3, r3, #2
 8000be4:	fa02 f303 	lsl.w	r3, r2, r3
 8000be8:	69ba      	ldr	r2, [r7, #24]
 8000bea:	4313      	orrs	r3, r2
 8000bec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	08da      	lsrs	r2, r3, #3
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	3208      	adds	r2, #8
 8000bf6:	69b9      	ldr	r1, [r7, #24]
 8000bf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	2203      	movs	r2, #3
 8000c08:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0c:	43db      	mvns	r3, r3
 8000c0e:	69ba      	ldr	r2, [r7, #24]
 8000c10:	4013      	ands	r3, r2
 8000c12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	f003 0203 	and.w	r2, r3, #3
 8000c1c:	69fb      	ldr	r3, [r7, #28]
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	fa02 f303 	lsl.w	r3, r2, r3
 8000c24:	69ba      	ldr	r2, [r7, #24]
 8000c26:	4313      	orrs	r3, r2
 8000c28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	69ba      	ldr	r2, [r7, #24]
 8000c2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	f000 80a2 	beq.w	8000d82 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	4b57      	ldr	r3, [pc, #348]	@ (8000da0 <HAL_GPIO_Init+0x2e8>)
 8000c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c46:	4a56      	ldr	r2, [pc, #344]	@ (8000da0 <HAL_GPIO_Init+0x2e8>)
 8000c48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c4e:	4b54      	ldr	r3, [pc, #336]	@ (8000da0 <HAL_GPIO_Init+0x2e8>)
 8000c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c5a:	4a52      	ldr	r2, [pc, #328]	@ (8000da4 <HAL_GPIO_Init+0x2ec>)
 8000c5c:	69fb      	ldr	r3, [r7, #28]
 8000c5e:	089b      	lsrs	r3, r3, #2
 8000c60:	3302      	adds	r3, #2
 8000c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c68:	69fb      	ldr	r3, [r7, #28]
 8000c6a:	f003 0303 	and.w	r3, r3, #3
 8000c6e:	009b      	lsls	r3, r3, #2
 8000c70:	220f      	movs	r2, #15
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	43db      	mvns	r3, r3
 8000c78:	69ba      	ldr	r2, [r7, #24]
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4a49      	ldr	r2, [pc, #292]	@ (8000da8 <HAL_GPIO_Init+0x2f0>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d019      	beq.n	8000cba <HAL_GPIO_Init+0x202>
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4a48      	ldr	r2, [pc, #288]	@ (8000dac <HAL_GPIO_Init+0x2f4>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d013      	beq.n	8000cb6 <HAL_GPIO_Init+0x1fe>
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4a47      	ldr	r2, [pc, #284]	@ (8000db0 <HAL_GPIO_Init+0x2f8>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d00d      	beq.n	8000cb2 <HAL_GPIO_Init+0x1fa>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4a46      	ldr	r2, [pc, #280]	@ (8000db4 <HAL_GPIO_Init+0x2fc>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d007      	beq.n	8000cae <HAL_GPIO_Init+0x1f6>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4a45      	ldr	r2, [pc, #276]	@ (8000db8 <HAL_GPIO_Init+0x300>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d101      	bne.n	8000caa <HAL_GPIO_Init+0x1f2>
 8000ca6:	2304      	movs	r3, #4
 8000ca8:	e008      	b.n	8000cbc <HAL_GPIO_Init+0x204>
 8000caa:	2307      	movs	r3, #7
 8000cac:	e006      	b.n	8000cbc <HAL_GPIO_Init+0x204>
 8000cae:	2303      	movs	r3, #3
 8000cb0:	e004      	b.n	8000cbc <HAL_GPIO_Init+0x204>
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	e002      	b.n	8000cbc <HAL_GPIO_Init+0x204>
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e000      	b.n	8000cbc <HAL_GPIO_Init+0x204>
 8000cba:	2300      	movs	r3, #0
 8000cbc:	69fa      	ldr	r2, [r7, #28]
 8000cbe:	f002 0203 	and.w	r2, r2, #3
 8000cc2:	0092      	lsls	r2, r2, #2
 8000cc4:	4093      	lsls	r3, r2
 8000cc6:	69ba      	ldr	r2, [r7, #24]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ccc:	4935      	ldr	r1, [pc, #212]	@ (8000da4 <HAL_GPIO_Init+0x2ec>)
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	089b      	lsrs	r3, r3, #2
 8000cd2:	3302      	adds	r3, #2
 8000cd4:	69ba      	ldr	r2, [r7, #24]
 8000cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cda:	4b38      	ldr	r3, [pc, #224]	@ (8000dbc <HAL_GPIO_Init+0x304>)
 8000cdc:	689b      	ldr	r3, [r3, #8]
 8000cde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	43db      	mvns	r3, r3
 8000ce4:	69ba      	ldr	r2, [r7, #24]
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d003      	beq.n	8000cfe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000cf6:	69ba      	ldr	r2, [r7, #24]
 8000cf8:	693b      	ldr	r3, [r7, #16]
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000cfe:	4a2f      	ldr	r2, [pc, #188]	@ (8000dbc <HAL_GPIO_Init+0x304>)
 8000d00:	69bb      	ldr	r3, [r7, #24]
 8000d02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d04:	4b2d      	ldr	r3, [pc, #180]	@ (8000dbc <HAL_GPIO_Init+0x304>)
 8000d06:	68db      	ldr	r3, [r3, #12]
 8000d08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	43db      	mvns	r3, r3
 8000d0e:	69ba      	ldr	r2, [r7, #24]
 8000d10:	4013      	ands	r3, r2
 8000d12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d003      	beq.n	8000d28 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000d20:	69ba      	ldr	r2, [r7, #24]
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000d28:	4a24      	ldr	r2, [pc, #144]	@ (8000dbc <HAL_GPIO_Init+0x304>)
 8000d2a:	69bb      	ldr	r3, [r7, #24]
 8000d2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d2e:	4b23      	ldr	r3, [pc, #140]	@ (8000dbc <HAL_GPIO_Init+0x304>)
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	43db      	mvns	r3, r3
 8000d38:	69ba      	ldr	r2, [r7, #24]
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d003      	beq.n	8000d52 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000d4a:	69ba      	ldr	r2, [r7, #24]
 8000d4c:	693b      	ldr	r3, [r7, #16]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000d52:	4a1a      	ldr	r2, [pc, #104]	@ (8000dbc <HAL_GPIO_Init+0x304>)
 8000d54:	69bb      	ldr	r3, [r7, #24]
 8000d56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d58:	4b18      	ldr	r3, [pc, #96]	@ (8000dbc <HAL_GPIO_Init+0x304>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	43db      	mvns	r3, r3
 8000d62:	69ba      	ldr	r2, [r7, #24]
 8000d64:	4013      	ands	r3, r2
 8000d66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d003      	beq.n	8000d7c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	693b      	ldr	r3, [r7, #16]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000d7c:	4a0f      	ldr	r2, [pc, #60]	@ (8000dbc <HAL_GPIO_Init+0x304>)
 8000d7e:	69bb      	ldr	r3, [r7, #24]
 8000d80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	3301      	adds	r3, #1
 8000d86:	61fb      	str	r3, [r7, #28]
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	2b0f      	cmp	r3, #15
 8000d8c:	f67f aea2 	bls.w	8000ad4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000d90:	bf00      	nop
 8000d92:	bf00      	nop
 8000d94:	3724      	adds	r7, #36	@ 0x24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	40023800 	.word	0x40023800
 8000da4:	40013800 	.word	0x40013800
 8000da8:	40020000 	.word	0x40020000
 8000dac:	40020400 	.word	0x40020400
 8000db0:	40020800 	.word	0x40020800
 8000db4:	40020c00 	.word	0x40020c00
 8000db8:	40021000 	.word	0x40021000
 8000dbc:	40013c00 	.word	0x40013c00

08000dc0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af02      	add	r7, sp, #8
 8000dc6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d101      	bne.n	8000dd2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e101      	b.n	8000fd6 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d106      	bne.n	8000df2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2200      	movs	r2, #0
 8000de8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000dec:	6878      	ldr	r0, [r7, #4]
 8000dee:	f005 fb23 	bl	8006438 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2203      	movs	r2, #3
 8000df6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000e00:	d102      	bne.n	8000e08 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2200      	movs	r2, #0
 8000e06:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f001 ff70 	bl	8002cf2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6818      	ldr	r0, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	7c1a      	ldrb	r2, [r3, #16]
 8000e1a:	f88d 2000 	strb.w	r2, [sp]
 8000e1e:	3304      	adds	r3, #4
 8000e20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e22:	f001 fe4f 	bl	8002ac4 <USB_CoreInit>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d005      	beq.n	8000e38 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2202      	movs	r2, #2
 8000e30:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8000e34:	2301      	movs	r3, #1
 8000e36:	e0ce      	b.n	8000fd6 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f001 ff68 	bl	8002d14 <USB_SetCurrentMode>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d005      	beq.n	8000e56 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2202      	movs	r2, #2
 8000e4e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
 8000e54:	e0bf      	b.n	8000fd6 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e56:	2300      	movs	r3, #0
 8000e58:	73fb      	strb	r3, [r7, #15]
 8000e5a:	e04a      	b.n	8000ef2 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000e5c:	7bfa      	ldrb	r2, [r7, #15]
 8000e5e:	6879      	ldr	r1, [r7, #4]
 8000e60:	4613      	mov	r3, r2
 8000e62:	00db      	lsls	r3, r3, #3
 8000e64:	4413      	add	r3, r2
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	440b      	add	r3, r1
 8000e6a:	3315      	adds	r3, #21
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000e70:	7bfa      	ldrb	r2, [r7, #15]
 8000e72:	6879      	ldr	r1, [r7, #4]
 8000e74:	4613      	mov	r3, r2
 8000e76:	00db      	lsls	r3, r3, #3
 8000e78:	4413      	add	r3, r2
 8000e7a:	009b      	lsls	r3, r3, #2
 8000e7c:	440b      	add	r3, r1
 8000e7e:	3314      	adds	r3, #20
 8000e80:	7bfa      	ldrb	r2, [r7, #15]
 8000e82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000e84:	7bfa      	ldrb	r2, [r7, #15]
 8000e86:	7bfb      	ldrb	r3, [r7, #15]
 8000e88:	b298      	uxth	r0, r3
 8000e8a:	6879      	ldr	r1, [r7, #4]
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	00db      	lsls	r3, r3, #3
 8000e90:	4413      	add	r3, r2
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	440b      	add	r3, r1
 8000e96:	332e      	adds	r3, #46	@ 0x2e
 8000e98:	4602      	mov	r2, r0
 8000e9a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000e9c:	7bfa      	ldrb	r2, [r7, #15]
 8000e9e:	6879      	ldr	r1, [r7, #4]
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	00db      	lsls	r3, r3, #3
 8000ea4:	4413      	add	r3, r2
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	440b      	add	r3, r1
 8000eaa:	3318      	adds	r3, #24
 8000eac:	2200      	movs	r2, #0
 8000eae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000eb0:	7bfa      	ldrb	r2, [r7, #15]
 8000eb2:	6879      	ldr	r1, [r7, #4]
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	00db      	lsls	r3, r3, #3
 8000eb8:	4413      	add	r3, r2
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	440b      	add	r3, r1
 8000ebe:	331c      	adds	r3, #28
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000ec4:	7bfa      	ldrb	r2, [r7, #15]
 8000ec6:	6879      	ldr	r1, [r7, #4]
 8000ec8:	4613      	mov	r3, r2
 8000eca:	00db      	lsls	r3, r3, #3
 8000ecc:	4413      	add	r3, r2
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	440b      	add	r3, r1
 8000ed2:	3320      	adds	r3, #32
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000ed8:	7bfa      	ldrb	r2, [r7, #15]
 8000eda:	6879      	ldr	r1, [r7, #4]
 8000edc:	4613      	mov	r3, r2
 8000ede:	00db      	lsls	r3, r3, #3
 8000ee0:	4413      	add	r3, r2
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	440b      	add	r3, r1
 8000ee6:	3324      	adds	r3, #36	@ 0x24
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000eec:	7bfb      	ldrb	r3, [r7, #15]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	73fb      	strb	r3, [r7, #15]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	791b      	ldrb	r3, [r3, #4]
 8000ef6:	7bfa      	ldrb	r2, [r7, #15]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d3af      	bcc.n	8000e5c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000efc:	2300      	movs	r3, #0
 8000efe:	73fb      	strb	r3, [r7, #15]
 8000f00:	e044      	b.n	8000f8c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000f02:	7bfa      	ldrb	r2, [r7, #15]
 8000f04:	6879      	ldr	r1, [r7, #4]
 8000f06:	4613      	mov	r3, r2
 8000f08:	00db      	lsls	r3, r3, #3
 8000f0a:	4413      	add	r3, r2
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	440b      	add	r3, r1
 8000f10:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8000f14:	2200      	movs	r2, #0
 8000f16:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000f18:	7bfa      	ldrb	r2, [r7, #15]
 8000f1a:	6879      	ldr	r1, [r7, #4]
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	00db      	lsls	r3, r3, #3
 8000f20:	4413      	add	r3, r2
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	440b      	add	r3, r1
 8000f26:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8000f2a:	7bfa      	ldrb	r2, [r7, #15]
 8000f2c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000f2e:	7bfa      	ldrb	r2, [r7, #15]
 8000f30:	6879      	ldr	r1, [r7, #4]
 8000f32:	4613      	mov	r3, r2
 8000f34:	00db      	lsls	r3, r3, #3
 8000f36:	4413      	add	r3, r2
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	440b      	add	r3, r1
 8000f3c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8000f40:	2200      	movs	r2, #0
 8000f42:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000f44:	7bfa      	ldrb	r2, [r7, #15]
 8000f46:	6879      	ldr	r1, [r7, #4]
 8000f48:	4613      	mov	r3, r2
 8000f4a:	00db      	lsls	r3, r3, #3
 8000f4c:	4413      	add	r3, r2
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	440b      	add	r3, r1
 8000f52:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000f5a:	7bfa      	ldrb	r2, [r7, #15]
 8000f5c:	6879      	ldr	r1, [r7, #4]
 8000f5e:	4613      	mov	r3, r2
 8000f60:	00db      	lsls	r3, r3, #3
 8000f62:	4413      	add	r3, r2
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	440b      	add	r3, r1
 8000f68:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000f70:	7bfa      	ldrb	r2, [r7, #15]
 8000f72:	6879      	ldr	r1, [r7, #4]
 8000f74:	4613      	mov	r3, r2
 8000f76:	00db      	lsls	r3, r3, #3
 8000f78:	4413      	add	r3, r2
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	440b      	add	r3, r1
 8000f7e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f86:	7bfb      	ldrb	r3, [r7, #15]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	73fb      	strb	r3, [r7, #15]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	791b      	ldrb	r3, [r3, #4]
 8000f90:	7bfa      	ldrb	r2, [r7, #15]
 8000f92:	429a      	cmp	r2, r3
 8000f94:	d3b5      	bcc.n	8000f02 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6818      	ldr	r0, [r3, #0]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	7c1a      	ldrb	r2, [r3, #16]
 8000f9e:	f88d 2000 	strb.w	r2, [sp]
 8000fa2:	3304      	adds	r3, #4
 8000fa4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fa6:	f001 ff01 	bl	8002dac <USB_DevInit>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d005      	beq.n	8000fbc <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2202      	movs	r2, #2
 8000fb4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	e00c      	b.n	8000fd6 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f002 ff4b 	bl	8003e6a <USB_DevDisconnect>

  return HAL_OK;
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b084      	sub	sp, #16
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d101      	bne.n	8000ffa <HAL_PCD_Start+0x1c>
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	e022      	b.n	8001040 <HAL_PCD_Start+0x62>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	68db      	ldr	r3, [r3, #12]
 8001006:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800100a:	2b00      	cmp	r3, #0
 800100c:	d009      	beq.n	8001022 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001012:	2b01      	cmp	r3, #1
 8001014:	d105      	bne.n	8001022 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800101a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4618      	mov	r0, r3
 8001028:	f001 fe52 	bl	8002cd0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4618      	mov	r0, r3
 8001032:	f002 fef9 	bl	8003e28 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2200      	movs	r2, #0
 800103a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800103e:	2300      	movs	r3, #0
}
 8001040:	4618      	mov	r0, r3
 8001042:	3710      	adds	r7, #16
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001048:	b590      	push	{r4, r7, lr}
 800104a:	b08d      	sub	sp, #52	@ 0x34
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001056:	6a3b      	ldr	r3, [r7, #32]
 8001058:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4618      	mov	r0, r3
 8001060:	f002 ffb7 	bl	8003fd2 <USB_GetMode>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	f040 848c 	bne.w	8001984 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4618      	mov	r0, r3
 8001072:	f002 ff1b 	bl	8003eac <USB_ReadInterrupts>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	f000 8482 	beq.w	8001982 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	0a1b      	lsrs	r3, r3, #8
 8001088:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4618      	mov	r0, r3
 8001098:	f002 ff08 	bl	8003eac <USB_ReadInterrupts>
 800109c:	4603      	mov	r3, r0
 800109e:	f003 0302 	and.w	r3, r3, #2
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d107      	bne.n	80010b6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	695a      	ldr	r2, [r3, #20]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f002 0202 	and.w	r2, r2, #2
 80010b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f002 fef6 	bl	8003eac <USB_ReadInterrupts>
 80010c0:	4603      	mov	r3, r0
 80010c2:	f003 0310 	and.w	r3, r3, #16
 80010c6:	2b10      	cmp	r3, #16
 80010c8:	d161      	bne.n	800118e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	699a      	ldr	r2, [r3, #24]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f022 0210 	bic.w	r2, r2, #16
 80010d8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80010da:	6a3b      	ldr	r3, [r7, #32]
 80010dc:	6a1b      	ldr	r3, [r3, #32]
 80010de:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	f003 020f 	and.w	r2, r3, #15
 80010e6:	4613      	mov	r3, r2
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	4413      	add	r3, r2
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	4413      	add	r3, r2
 80010f6:	3304      	adds	r3, #4
 80010f8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	0c5b      	lsrs	r3, r3, #17
 80010fe:	f003 030f 	and.w	r3, r3, #15
 8001102:	2b02      	cmp	r3, #2
 8001104:	d124      	bne.n	8001150 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800110c:	4013      	ands	r3, r2
 800110e:	2b00      	cmp	r3, #0
 8001110:	d035      	beq.n	800117e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	091b      	lsrs	r3, r3, #4
 800111a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800111c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001120:	b29b      	uxth	r3, r3
 8001122:	461a      	mov	r2, r3
 8001124:	6a38      	ldr	r0, [r7, #32]
 8001126:	f002 fd2d 	bl	8003b84 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	68da      	ldr	r2, [r3, #12]
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	091b      	lsrs	r3, r3, #4
 8001132:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001136:	441a      	add	r2, r3
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	695a      	ldr	r2, [r3, #20]
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	091b      	lsrs	r3, r3, #4
 8001144:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001148:	441a      	add	r2, r3
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	615a      	str	r2, [r3, #20]
 800114e:	e016      	b.n	800117e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	0c5b      	lsrs	r3, r3, #17
 8001154:	f003 030f 	and.w	r3, r3, #15
 8001158:	2b06      	cmp	r3, #6
 800115a:	d110      	bne.n	800117e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001162:	2208      	movs	r2, #8
 8001164:	4619      	mov	r1, r3
 8001166:	6a38      	ldr	r0, [r7, #32]
 8001168:	f002 fd0c 	bl	8003b84 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	695a      	ldr	r2, [r3, #20]
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	091b      	lsrs	r3, r3, #4
 8001174:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001178:	441a      	add	r2, r3
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	699a      	ldr	r2, [r3, #24]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f042 0210 	orr.w	r2, r2, #16
 800118c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4618      	mov	r0, r3
 8001194:	f002 fe8a 	bl	8003eac <USB_ReadInterrupts>
 8001198:	4603      	mov	r3, r0
 800119a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800119e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80011a2:	f040 80a7 	bne.w	80012f4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80011a6:	2300      	movs	r3, #0
 80011a8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f002 fe8f 	bl	8003ed2 <USB_ReadDevAllOutEpInterrupt>
 80011b4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80011b6:	e099      	b.n	80012ec <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80011b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	2b00      	cmp	r3, #0
 80011c0:	f000 808e 	beq.w	80012e0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011ca:	b2d2      	uxtb	r2, r2
 80011cc:	4611      	mov	r1, r2
 80011ce:	4618      	mov	r0, r3
 80011d0:	f002 feb3 	bl	8003f3a <USB_ReadDevOutEPInterrupt>
 80011d4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	f003 0301 	and.w	r3, r3, #1
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d00c      	beq.n	80011fa <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80011e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011e2:	015a      	lsls	r2, r3, #5
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	4413      	add	r3, r2
 80011e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80011ec:	461a      	mov	r2, r3
 80011ee:	2301      	movs	r3, #1
 80011f0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80011f2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f000 fea3 	bl	8001f40 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	f003 0308 	and.w	r3, r3, #8
 8001200:	2b00      	cmp	r3, #0
 8001202:	d00c      	beq.n	800121e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001206:	015a      	lsls	r2, r3, #5
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	4413      	add	r3, r2
 800120c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001210:	461a      	mov	r2, r3
 8001212:	2308      	movs	r3, #8
 8001214:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001216:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f000 ff79 	bl	8002110 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	f003 0310 	and.w	r3, r3, #16
 8001224:	2b00      	cmp	r3, #0
 8001226:	d008      	beq.n	800123a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800122a:	015a      	lsls	r2, r3, #5
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	4413      	add	r3, r2
 8001230:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001234:	461a      	mov	r2, r3
 8001236:	2310      	movs	r3, #16
 8001238:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	f003 0302 	and.w	r3, r3, #2
 8001240:	2b00      	cmp	r3, #0
 8001242:	d030      	beq.n	80012a6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001244:	6a3b      	ldr	r3, [r7, #32]
 8001246:	695b      	ldr	r3, [r3, #20]
 8001248:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800124c:	2b80      	cmp	r3, #128	@ 0x80
 800124e:	d109      	bne.n	8001264 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	69fa      	ldr	r2, [r7, #28]
 800125a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800125e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001262:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001264:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001266:	4613      	mov	r3, r2
 8001268:	00db      	lsls	r3, r3, #3
 800126a:	4413      	add	r3, r2
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	4413      	add	r3, r2
 8001276:	3304      	adds	r3, #4
 8001278:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	78db      	ldrb	r3, [r3, #3]
 800127e:	2b01      	cmp	r3, #1
 8001280:	d108      	bne.n	8001294 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	2200      	movs	r2, #0
 8001286:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800128a:	b2db      	uxtb	r3, r3
 800128c:	4619      	mov	r1, r3
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f005 f9ce 	bl	8006630 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001296:	015a      	lsls	r2, r3, #5
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	4413      	add	r3, r2
 800129c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80012a0:	461a      	mov	r2, r3
 80012a2:	2302      	movs	r3, #2
 80012a4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	f003 0320 	and.w	r3, r3, #32
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d008      	beq.n	80012c2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80012b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012b2:	015a      	lsls	r2, r3, #5
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	4413      	add	r3, r2
 80012b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80012bc:	461a      	mov	r2, r3
 80012be:	2320      	movs	r3, #32
 80012c0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d009      	beq.n	80012e0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80012cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ce:	015a      	lsls	r2, r3, #5
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	4413      	add	r3, r2
 80012d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80012d8:	461a      	mov	r2, r3
 80012da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012de:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80012e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e2:	3301      	adds	r3, #1
 80012e4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80012e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012e8:	085b      	lsrs	r3, r3, #1
 80012ea:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80012ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	f47f af62 	bne.w	80011b8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f002 fdd7 	bl	8003eac <USB_ReadInterrupts>
 80012fe:	4603      	mov	r3, r0
 8001300:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001304:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001308:	f040 80db 	bne.w	80014c2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4618      	mov	r0, r3
 8001312:	f002 fdf8 	bl	8003f06 <USB_ReadDevAllInEpInterrupt>
 8001316:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001318:	2300      	movs	r3, #0
 800131a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800131c:	e0cd      	b.n	80014ba <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800131e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001320:	f003 0301 	and.w	r3, r3, #1
 8001324:	2b00      	cmp	r3, #0
 8001326:	f000 80c2 	beq.w	80014ae <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001330:	b2d2      	uxtb	r2, r2
 8001332:	4611      	mov	r1, r2
 8001334:	4618      	mov	r0, r3
 8001336:	f002 fe1e 	bl	8003f76 <USB_ReadDevInEPInterrupt>
 800133a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	2b00      	cmp	r3, #0
 8001344:	d057      	beq.n	80013f6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001348:	f003 030f 	and.w	r3, r3, #15
 800134c:	2201      	movs	r2, #1
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800135a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	43db      	mvns	r3, r3
 8001360:	69f9      	ldr	r1, [r7, #28]
 8001362:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001366:	4013      	ands	r3, r2
 8001368:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800136a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800136c:	015a      	lsls	r2, r3, #5
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	4413      	add	r3, r2
 8001372:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001376:	461a      	mov	r2, r3
 8001378:	2301      	movs	r3, #1
 800137a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	799b      	ldrb	r3, [r3, #6]
 8001380:	2b01      	cmp	r3, #1
 8001382:	d132      	bne.n	80013ea <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001384:	6879      	ldr	r1, [r7, #4]
 8001386:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001388:	4613      	mov	r3, r2
 800138a:	00db      	lsls	r3, r3, #3
 800138c:	4413      	add	r3, r2
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	440b      	add	r3, r1
 8001392:	3320      	adds	r3, #32
 8001394:	6819      	ldr	r1, [r3, #0]
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800139a:	4613      	mov	r3, r2
 800139c:	00db      	lsls	r3, r3, #3
 800139e:	4413      	add	r3, r2
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	4403      	add	r3, r0
 80013a4:	331c      	adds	r3, #28
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4419      	add	r1, r3
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013ae:	4613      	mov	r3, r2
 80013b0:	00db      	lsls	r3, r3, #3
 80013b2:	4413      	add	r3, r2
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	4403      	add	r3, r0
 80013b8:	3320      	adds	r3, #32
 80013ba:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80013bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d113      	bne.n	80013ea <HAL_PCD_IRQHandler+0x3a2>
 80013c2:	6879      	ldr	r1, [r7, #4]
 80013c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013c6:	4613      	mov	r3, r2
 80013c8:	00db      	lsls	r3, r3, #3
 80013ca:	4413      	add	r3, r2
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	440b      	add	r3, r1
 80013d0:	3324      	adds	r3, #36	@ 0x24
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d108      	bne.n	80013ea <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6818      	ldr	r0, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80013e2:	461a      	mov	r2, r3
 80013e4:	2101      	movs	r1, #1
 80013e6:	f002 fe25 	bl	8004034 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80013ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	4619      	mov	r1, r3
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f005 f8a2 	bl	800653a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	f003 0308 	and.w	r3, r3, #8
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d008      	beq.n	8001412 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001402:	015a      	lsls	r2, r3, #5
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	4413      	add	r3, r2
 8001408:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800140c:	461a      	mov	r2, r3
 800140e:	2308      	movs	r3, #8
 8001410:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	f003 0310 	and.w	r3, r3, #16
 8001418:	2b00      	cmp	r3, #0
 800141a:	d008      	beq.n	800142e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800141c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800141e:	015a      	lsls	r2, r3, #5
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	4413      	add	r3, r2
 8001424:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001428:	461a      	mov	r2, r3
 800142a:	2310      	movs	r3, #16
 800142c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001434:	2b00      	cmp	r3, #0
 8001436:	d008      	beq.n	800144a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800143a:	015a      	lsls	r2, r3, #5
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	4413      	add	r3, r2
 8001440:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001444:	461a      	mov	r2, r3
 8001446:	2340      	movs	r3, #64	@ 0x40
 8001448:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	f003 0302 	and.w	r3, r3, #2
 8001450:	2b00      	cmp	r3, #0
 8001452:	d023      	beq.n	800149c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001454:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001456:	6a38      	ldr	r0, [r7, #32]
 8001458:	f001 fe0c 	bl	8003074 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800145c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800145e:	4613      	mov	r3, r2
 8001460:	00db      	lsls	r3, r3, #3
 8001462:	4413      	add	r3, r2
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	3310      	adds	r3, #16
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	4413      	add	r3, r2
 800146c:	3304      	adds	r3, #4
 800146e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	78db      	ldrb	r3, [r3, #3]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d108      	bne.n	800148a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	2200      	movs	r2, #0
 800147c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800147e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001480:	b2db      	uxtb	r3, r3
 8001482:	4619      	mov	r1, r3
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f005 f8e5 	bl	8006654 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800148a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800148c:	015a      	lsls	r2, r3, #5
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	4413      	add	r3, r2
 8001492:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001496:	461a      	mov	r2, r3
 8001498:	2302      	movs	r3, #2
 800149a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d003      	beq.n	80014ae <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80014a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f000 fcbd 	bl	8001e28 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80014ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014b0:	3301      	adds	r3, #1
 80014b2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80014b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014b6:	085b      	lsrs	r3, r3, #1
 80014b8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80014ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014bc:	2b00      	cmp	r3, #0
 80014be:	f47f af2e 	bne.w	800131e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f002 fcf0 	bl	8003eac <USB_ReadInterrupts>
 80014cc:	4603      	mov	r3, r0
 80014ce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80014d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80014d6:	d122      	bne.n	800151e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	69fa      	ldr	r2, [r7, #28]
 80014e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80014e6:	f023 0301 	bic.w	r3, r3, #1
 80014ea:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d108      	bne.n	8001508 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80014fe:	2100      	movs	r1, #0
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f000 fea3 	bl	800224c <HAL_PCDEx_LPM_Callback>
 8001506:	e002      	b.n	800150e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f005 f883 	bl	8006614 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	695a      	ldr	r2, [r3, #20]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800151c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4618      	mov	r0, r3
 8001524:	f002 fcc2 	bl	8003eac <USB_ReadInterrupts>
 8001528:	4603      	mov	r3, r0
 800152a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800152e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001532:	d112      	bne.n	800155a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	f003 0301 	and.w	r3, r3, #1
 8001540:	2b01      	cmp	r3, #1
 8001542:	d102      	bne.n	800154a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f005 f83f 	bl	80065c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	695a      	ldr	r2, [r3, #20]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001558:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4618      	mov	r0, r3
 8001560:	f002 fca4 	bl	8003eac <USB_ReadInterrupts>
 8001564:	4603      	mov	r3, r0
 8001566:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800156a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800156e:	f040 80b7 	bne.w	80016e0 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	69fa      	ldr	r2, [r7, #28]
 800157c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001580:	f023 0301 	bic.w	r3, r3, #1
 8001584:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2110      	movs	r1, #16
 800158c:	4618      	mov	r0, r3
 800158e:	f001 fd71 	bl	8003074 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001592:	2300      	movs	r3, #0
 8001594:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001596:	e046      	b.n	8001626 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800159a:	015a      	lsls	r2, r3, #5
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	4413      	add	r3, r2
 80015a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80015a4:	461a      	mov	r2, r3
 80015a6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80015aa:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80015ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015ae:	015a      	lsls	r2, r3, #5
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	4413      	add	r3, r2
 80015b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80015bc:	0151      	lsls	r1, r2, #5
 80015be:	69fa      	ldr	r2, [r7, #28]
 80015c0:	440a      	add	r2, r1
 80015c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80015c6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80015ca:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80015cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015ce:	015a      	lsls	r2, r3, #5
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	4413      	add	r3, r2
 80015d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80015d8:	461a      	mov	r2, r3
 80015da:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80015de:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80015e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015e2:	015a      	lsls	r2, r3, #5
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	4413      	add	r3, r2
 80015e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80015f0:	0151      	lsls	r1, r2, #5
 80015f2:	69fa      	ldr	r2, [r7, #28]
 80015f4:	440a      	add	r2, r1
 80015f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80015fa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80015fe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001602:	015a      	lsls	r2, r3, #5
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	4413      	add	r3, r2
 8001608:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001610:	0151      	lsls	r1, r2, #5
 8001612:	69fa      	ldr	r2, [r7, #28]
 8001614:	440a      	add	r2, r1
 8001616:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800161a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800161e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001622:	3301      	adds	r3, #1
 8001624:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	791b      	ldrb	r3, [r3, #4]
 800162a:	461a      	mov	r2, r3
 800162c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800162e:	4293      	cmp	r3, r2
 8001630:	d3b2      	bcc.n	8001598 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001638:	69db      	ldr	r3, [r3, #28]
 800163a:	69fa      	ldr	r2, [r7, #28]
 800163c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001640:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001644:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	7bdb      	ldrb	r3, [r3, #15]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d016      	beq.n	800167c <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001654:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001658:	69fa      	ldr	r2, [r7, #28]
 800165a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800165e:	f043 030b 	orr.w	r3, r3, #11
 8001662:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800166c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800166e:	69fa      	ldr	r2, [r7, #28]
 8001670:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001674:	f043 030b 	orr.w	r3, r3, #11
 8001678:	6453      	str	r3, [r2, #68]	@ 0x44
 800167a:	e015      	b.n	80016a8 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001682:	695b      	ldr	r3, [r3, #20]
 8001684:	69fa      	ldr	r2, [r7, #28]
 8001686:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800168a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800168e:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001692:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800169a:	691b      	ldr	r3, [r3, #16]
 800169c:	69fa      	ldr	r2, [r7, #28]
 800169e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80016a2:	f043 030b 	orr.w	r3, r3, #11
 80016a6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	69fa      	ldr	r2, [r7, #28]
 80016b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80016b6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80016ba:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6818      	ldr	r0, [r3, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80016ca:	461a      	mov	r2, r3
 80016cc:	f002 fcb2 	bl	8004034 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	695a      	ldr	r2, [r3, #20]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80016de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f002 fbe1 	bl	8003eac <USB_ReadInterrupts>
 80016ea:	4603      	mov	r3, r0
 80016ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80016f4:	d123      	bne.n	800173e <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f002 fc77 	bl	8003fee <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4618      	mov	r0, r3
 8001706:	f001 fd2e 	bl	8003166 <USB_GetDevSpeed>
 800170a:	4603      	mov	r3, r0
 800170c:	461a      	mov	r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681c      	ldr	r4, [r3, #0]
 8001716:	f001 f9c9 	bl	8002aac <HAL_RCC_GetHCLKFreq>
 800171a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001720:	461a      	mov	r2, r3
 8001722:	4620      	mov	r0, r4
 8001724:	f001 fa32 	bl	8002b8c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f004 ff2e 	bl	800658a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	695a      	ldr	r2, [r3, #20]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800173c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4618      	mov	r0, r3
 8001744:	f002 fbb2 	bl	8003eac <USB_ReadInterrupts>
 8001748:	4603      	mov	r3, r0
 800174a:	f003 0308 	and.w	r3, r3, #8
 800174e:	2b08      	cmp	r3, #8
 8001750:	d10a      	bne.n	8001768 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f004 ff0b 	bl	800656e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	695a      	ldr	r2, [r3, #20]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f002 0208 	and.w	r2, r2, #8
 8001766:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4618      	mov	r0, r3
 800176e:	f002 fb9d 	bl	8003eac <USB_ReadInterrupts>
 8001772:	4603      	mov	r3, r0
 8001774:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001778:	2b80      	cmp	r3, #128	@ 0x80
 800177a:	d123      	bne.n	80017c4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800177c:	6a3b      	ldr	r3, [r7, #32]
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001784:	6a3b      	ldr	r3, [r7, #32]
 8001786:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001788:	2301      	movs	r3, #1
 800178a:	627b      	str	r3, [r7, #36]	@ 0x24
 800178c:	e014      	b.n	80017b8 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800178e:	6879      	ldr	r1, [r7, #4]
 8001790:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001792:	4613      	mov	r3, r2
 8001794:	00db      	lsls	r3, r3, #3
 8001796:	4413      	add	r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	440b      	add	r3, r1
 800179c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d105      	bne.n	80017b2 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80017a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	4619      	mov	r1, r3
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f000 fb0a 	bl	8001dc6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80017b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b4:	3301      	adds	r3, #1
 80017b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	791b      	ldrb	r3, [r3, #4]
 80017bc:	461a      	mov	r2, r3
 80017be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d3e4      	bcc.n	800178e <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f002 fb6f 	bl	8003eac <USB_ReadInterrupts>
 80017ce:	4603      	mov	r3, r0
 80017d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80017d8:	d13c      	bne.n	8001854 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80017da:	2301      	movs	r3, #1
 80017dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80017de:	e02b      	b.n	8001838 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80017e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e2:	015a      	lsls	r2, r3, #5
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	4413      	add	r3, r2
 80017e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80017f0:	6879      	ldr	r1, [r7, #4]
 80017f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017f4:	4613      	mov	r3, r2
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	4413      	add	r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	440b      	add	r3, r1
 80017fe:	3318      	adds	r3, #24
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d115      	bne.n	8001832 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001806:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001808:	2b00      	cmp	r3, #0
 800180a:	da12      	bge.n	8001832 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800180c:	6879      	ldr	r1, [r7, #4]
 800180e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001810:	4613      	mov	r3, r2
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	4413      	add	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	440b      	add	r3, r1
 800181a:	3317      	adds	r3, #23
 800181c:	2201      	movs	r2, #1
 800181e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001822:	b2db      	uxtb	r3, r3
 8001824:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001828:	b2db      	uxtb	r3, r3
 800182a:	4619      	mov	r1, r3
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f000 faca 	bl	8001dc6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001834:	3301      	adds	r3, #1
 8001836:	627b      	str	r3, [r7, #36]	@ 0x24
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	791b      	ldrb	r3, [r3, #4]
 800183c:	461a      	mov	r2, r3
 800183e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001840:	4293      	cmp	r3, r2
 8001842:	d3cd      	bcc.n	80017e0 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	695a      	ldr	r2, [r3, #20]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001852:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4618      	mov	r0, r3
 800185a:	f002 fb27 	bl	8003eac <USB_ReadInterrupts>
 800185e:	4603      	mov	r3, r0
 8001860:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001864:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001868:	d156      	bne.n	8001918 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800186a:	2301      	movs	r3, #1
 800186c:	627b      	str	r3, [r7, #36]	@ 0x24
 800186e:	e045      	b.n	80018fc <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001872:	015a      	lsls	r2, r3, #5
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	4413      	add	r3, r2
 8001878:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001880:	6879      	ldr	r1, [r7, #4]
 8001882:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001884:	4613      	mov	r3, r2
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	4413      	add	r3, r2
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	440b      	add	r3, r1
 800188e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d12e      	bne.n	80018f6 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001898:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800189a:	2b00      	cmp	r3, #0
 800189c:	da2b      	bge.n	80018f6 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80018aa:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d121      	bne.n	80018f6 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80018b2:	6879      	ldr	r1, [r7, #4]
 80018b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018b6:	4613      	mov	r3, r2
 80018b8:	00db      	lsls	r3, r3, #3
 80018ba:	4413      	add	r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	440b      	add	r3, r1
 80018c0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80018c4:	2201      	movs	r2, #1
 80018c6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80018c8:	6a3b      	ldr	r3, [r7, #32]
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80018d0:	6a3b      	ldr	r3, [r7, #32]
 80018d2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80018d4:	6a3b      	ldr	r3, [r7, #32]
 80018d6:	695b      	ldr	r3, [r3, #20]
 80018d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d10a      	bne.n	80018f6 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	69fa      	ldr	r2, [r7, #28]
 80018ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80018ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018f2:	6053      	str	r3, [r2, #4]
            break;
 80018f4:	e008      	b.n	8001908 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80018f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f8:	3301      	adds	r3, #1
 80018fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	791b      	ldrb	r3, [r3, #4]
 8001900:	461a      	mov	r2, r3
 8001902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001904:	4293      	cmp	r3, r2
 8001906:	d3b3      	bcc.n	8001870 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	695a      	ldr	r2, [r3, #20]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001916:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4618      	mov	r0, r3
 800191e:	f002 fac5 	bl	8003eac <USB_ReadInterrupts>
 8001922:	4603      	mov	r3, r0
 8001924:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001928:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800192c:	d10a      	bne.n	8001944 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f004 fea2 	bl	8006678 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	695a      	ldr	r2, [r3, #20]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001942:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4618      	mov	r0, r3
 800194a:	f002 faaf 	bl	8003eac <USB_ReadInterrupts>
 800194e:	4603      	mov	r3, r0
 8001950:	f003 0304 	and.w	r3, r3, #4
 8001954:	2b04      	cmp	r3, #4
 8001956:	d115      	bne.n	8001984 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	f003 0304 	and.w	r3, r3, #4
 8001966:	2b00      	cmp	r3, #0
 8001968:	d002      	beq.n	8001970 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f004 fe92 	bl	8006694 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6859      	ldr	r1, [r3, #4]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	430a      	orrs	r2, r1
 800197e:	605a      	str	r2, [r3, #4]
 8001980:	e000      	b.n	8001984 <HAL_PCD_IRQHandler+0x93c>
      return;
 8001982:	bf00      	nop
    }
  }
}
 8001984:	3734      	adds	r7, #52	@ 0x34
 8001986:	46bd      	mov	sp, r7
 8001988:	bd90      	pop	{r4, r7, pc}

0800198a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b082      	sub	sp, #8
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
 8001992:	460b      	mov	r3, r1
 8001994:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800199c:	2b01      	cmp	r3, #1
 800199e:	d101      	bne.n	80019a4 <HAL_PCD_SetAddress+0x1a>
 80019a0:	2302      	movs	r3, #2
 80019a2:	e012      	b.n	80019ca <HAL_PCD_SetAddress+0x40>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2201      	movs	r2, #1
 80019a8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	78fa      	ldrb	r2, [r7, #3]
 80019b0:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	78fa      	ldrb	r2, [r7, #3]
 80019b8:	4611      	mov	r1, r2
 80019ba:	4618      	mov	r0, r3
 80019bc:	f002 fa0e 	bl	8003ddc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b084      	sub	sp, #16
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
 80019da:	4608      	mov	r0, r1
 80019dc:	4611      	mov	r1, r2
 80019de:	461a      	mov	r2, r3
 80019e0:	4603      	mov	r3, r0
 80019e2:	70fb      	strb	r3, [r7, #3]
 80019e4:	460b      	mov	r3, r1
 80019e6:	803b      	strh	r3, [r7, #0]
 80019e8:	4613      	mov	r3, r2
 80019ea:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80019ec:	2300      	movs	r3, #0
 80019ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80019f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	da0f      	bge.n	8001a18 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019f8:	78fb      	ldrb	r3, [r7, #3]
 80019fa:	f003 020f 	and.w	r2, r3, #15
 80019fe:	4613      	mov	r3, r2
 8001a00:	00db      	lsls	r3, r3, #3
 8001a02:	4413      	add	r3, r2
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	3310      	adds	r3, #16
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	3304      	adds	r3, #4
 8001a0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2201      	movs	r2, #1
 8001a14:	705a      	strb	r2, [r3, #1]
 8001a16:	e00f      	b.n	8001a38 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a18:	78fb      	ldrb	r3, [r7, #3]
 8001a1a:	f003 020f 	and.w	r2, r3, #15
 8001a1e:	4613      	mov	r3, r2
 8001a20:	00db      	lsls	r3, r3, #3
 8001a22:	4413      	add	r3, r2
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	3304      	adds	r3, #4
 8001a30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2200      	movs	r2, #0
 8001a36:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001a38:	78fb      	ldrb	r3, [r7, #3]
 8001a3a:	f003 030f 	and.w	r3, r3, #15
 8001a3e:	b2da      	uxtb	r2, r3
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001a44:	883b      	ldrh	r3, [r7, #0]
 8001a46:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	78ba      	ldrb	r2, [r7, #2]
 8001a52:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	785b      	ldrb	r3, [r3, #1]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d004      	beq.n	8001a66 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	461a      	mov	r2, r3
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001a66:	78bb      	ldrb	r3, [r7, #2]
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d102      	bne.n	8001a72 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d101      	bne.n	8001a80 <HAL_PCD_EP_Open+0xae>
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	e00e      	b.n	8001a9e <HAL_PCD_EP_Open+0xcc>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2201      	movs	r2, #1
 8001a84:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	68f9      	ldr	r1, [r7, #12]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f001 fb8e 	bl	80031b0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001a9c:	7afb      	ldrb	r3, [r7, #11]
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b084      	sub	sp, #16
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
 8001aae:	460b      	mov	r3, r1
 8001ab0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ab2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	da0f      	bge.n	8001ada <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001aba:	78fb      	ldrb	r3, [r7, #3]
 8001abc:	f003 020f 	and.w	r2, r3, #15
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	00db      	lsls	r3, r3, #3
 8001ac4:	4413      	add	r3, r2
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	3310      	adds	r3, #16
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	4413      	add	r3, r2
 8001ace:	3304      	adds	r3, #4
 8001ad0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	705a      	strb	r2, [r3, #1]
 8001ad8:	e00f      	b.n	8001afa <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ada:	78fb      	ldrb	r3, [r7, #3]
 8001adc:	f003 020f 	and.w	r2, r3, #15
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	00db      	lsls	r3, r3, #3
 8001ae4:	4413      	add	r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	4413      	add	r3, r2
 8001af0:	3304      	adds	r3, #4
 8001af2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2200      	movs	r2, #0
 8001af8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001afa:	78fb      	ldrb	r3, [r7, #3]
 8001afc:	f003 030f 	and.w	r3, r3, #15
 8001b00:	b2da      	uxtb	r2, r3
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d101      	bne.n	8001b14 <HAL_PCD_EP_Close+0x6e>
 8001b10:	2302      	movs	r3, #2
 8001b12:	e00e      	b.n	8001b32 <HAL_PCD_EP_Close+0x8c>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	68f9      	ldr	r1, [r7, #12]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f001 fbcc 	bl	80032c0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b086      	sub	sp, #24
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	60f8      	str	r0, [r7, #12]
 8001b42:	607a      	str	r2, [r7, #4]
 8001b44:	603b      	str	r3, [r7, #0]
 8001b46:	460b      	mov	r3, r1
 8001b48:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b4a:	7afb      	ldrb	r3, [r7, #11]
 8001b4c:	f003 020f 	and.w	r2, r3, #15
 8001b50:	4613      	mov	r3, r2
 8001b52:	00db      	lsls	r3, r3, #3
 8001b54:	4413      	add	r3, r2
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001b5c:	68fa      	ldr	r2, [r7, #12]
 8001b5e:	4413      	add	r3, r2
 8001b60:	3304      	adds	r3, #4
 8001b62:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	683a      	ldr	r2, [r7, #0]
 8001b6e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	2200      	movs	r2, #0
 8001b74:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b7c:	7afb      	ldrb	r3, [r7, #11]
 8001b7e:	f003 030f 	and.w	r3, r3, #15
 8001b82:	b2da      	uxtb	r2, r3
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	799b      	ldrb	r3, [r3, #6]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d102      	bne.n	8001b96 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	6818      	ldr	r0, [r3, #0]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	799b      	ldrb	r3, [r3, #6]
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	6979      	ldr	r1, [r7, #20]
 8001ba2:	f001 fc69 	bl	8003478 <USB_EPStartXfer>

  return HAL_OK;
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3718      	adds	r7, #24
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	460b      	mov	r3, r1
 8001bba:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001bbc:	78fb      	ldrb	r3, [r7, #3]
 8001bbe:	f003 020f 	and.w	r2, r3, #15
 8001bc2:	6879      	ldr	r1, [r7, #4]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	4413      	add	r3, r2
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	440b      	add	r3, r1
 8001bce:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8001bd2:	681b      	ldr	r3, [r3, #0]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	607a      	str	r2, [r7, #4]
 8001bea:	603b      	str	r3, [r7, #0]
 8001bec:	460b      	mov	r3, r1
 8001bee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bf0:	7afb      	ldrb	r3, [r7, #11]
 8001bf2:	f003 020f 	and.w	r2, r3, #15
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	00db      	lsls	r3, r3, #3
 8001bfa:	4413      	add	r3, r2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	3310      	adds	r3, #16
 8001c00:	68fa      	ldr	r2, [r7, #12]
 8001c02:	4413      	add	r3, r2
 8001c04:	3304      	adds	r3, #4
 8001c06:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	2200      	movs	r2, #0
 8001c18:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c20:	7afb      	ldrb	r3, [r7, #11]
 8001c22:	f003 030f 	and.w	r3, r3, #15
 8001c26:	b2da      	uxtb	r2, r3
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	799b      	ldrb	r3, [r3, #6]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d102      	bne.n	8001c3a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	6818      	ldr	r0, [r3, #0]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	799b      	ldrb	r3, [r3, #6]
 8001c42:	461a      	mov	r2, r3
 8001c44:	6979      	ldr	r1, [r7, #20]
 8001c46:	f001 fc17 	bl	8003478 <USB_EPStartXfer>

  return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3718      	adds	r7, #24
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001c60:	78fb      	ldrb	r3, [r7, #3]
 8001c62:	f003 030f 	and.w	r3, r3, #15
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	7912      	ldrb	r2, [r2, #4]
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d901      	bls.n	8001c72 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e04f      	b.n	8001d12 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	da0f      	bge.n	8001c9a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c7a:	78fb      	ldrb	r3, [r7, #3]
 8001c7c:	f003 020f 	and.w	r2, r3, #15
 8001c80:	4613      	mov	r3, r2
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	4413      	add	r3, r2
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	3310      	adds	r3, #16
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	3304      	adds	r3, #4
 8001c90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2201      	movs	r2, #1
 8001c96:	705a      	strb	r2, [r3, #1]
 8001c98:	e00d      	b.n	8001cb6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001c9a:	78fa      	ldrb	r2, [r7, #3]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	4413      	add	r3, r2
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	4413      	add	r3, r2
 8001cac:	3304      	adds	r3, #4
 8001cae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cbc:	78fb      	ldrb	r3, [r7, #3]
 8001cbe:	f003 030f 	and.w	r3, r3, #15
 8001cc2:	b2da      	uxtb	r2, r3
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d101      	bne.n	8001cd6 <HAL_PCD_EP_SetStall+0x82>
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	e01d      	b.n	8001d12 <HAL_PCD_EP_SetStall+0xbe>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	68f9      	ldr	r1, [r7, #12]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f001 ffa5 	bl	8003c34 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001cea:	78fb      	ldrb	r3, [r7, #3]
 8001cec:	f003 030f 	and.w	r3, r3, #15
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d109      	bne.n	8001d08 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6818      	ldr	r0, [r3, #0]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	7999      	ldrb	r1, [r3, #6]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001d02:	461a      	mov	r2, r3
 8001d04:	f002 f996 	bl	8004034 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b084      	sub	sp, #16
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
 8001d22:	460b      	mov	r3, r1
 8001d24:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001d26:	78fb      	ldrb	r3, [r7, #3]
 8001d28:	f003 030f 	and.w	r3, r3, #15
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	7912      	ldrb	r2, [r2, #4]
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d901      	bls.n	8001d38 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e042      	b.n	8001dbe <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	da0f      	bge.n	8001d60 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d40:	78fb      	ldrb	r3, [r7, #3]
 8001d42:	f003 020f 	and.w	r2, r3, #15
 8001d46:	4613      	mov	r3, r2
 8001d48:	00db      	lsls	r3, r3, #3
 8001d4a:	4413      	add	r3, r2
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	3310      	adds	r3, #16
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	4413      	add	r3, r2
 8001d54:	3304      	adds	r3, #4
 8001d56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	705a      	strb	r2, [r3, #1]
 8001d5e:	e00f      	b.n	8001d80 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d60:	78fb      	ldrb	r3, [r7, #3]
 8001d62:	f003 020f 	and.w	r2, r3, #15
 8001d66:	4613      	mov	r3, r2
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	4413      	add	r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	4413      	add	r3, r2
 8001d76:	3304      	adds	r3, #4
 8001d78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2200      	movs	r2, #0
 8001d84:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d86:	78fb      	ldrb	r3, [r7, #3]
 8001d88:	f003 030f 	and.w	r3, r3, #15
 8001d8c:	b2da      	uxtb	r2, r3
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d101      	bne.n	8001da0 <HAL_PCD_EP_ClrStall+0x86>
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	e00e      	b.n	8001dbe <HAL_PCD_EP_ClrStall+0xa4>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	68f9      	ldr	r1, [r7, #12]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f001 ffae 	bl	8003d10 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b084      	sub	sp, #16
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
 8001dce:	460b      	mov	r3, r1
 8001dd0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001dd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	da0c      	bge.n	8001df4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dda:	78fb      	ldrb	r3, [r7, #3]
 8001ddc:	f003 020f 	and.w	r2, r3, #15
 8001de0:	4613      	mov	r3, r2
 8001de2:	00db      	lsls	r3, r3, #3
 8001de4:	4413      	add	r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	3310      	adds	r3, #16
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	4413      	add	r3, r2
 8001dee:	3304      	adds	r3, #4
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	e00c      	b.n	8001e0e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001df4:	78fb      	ldrb	r3, [r7, #3]
 8001df6:	f003 020f 	and.w	r2, r3, #15
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	4413      	add	r3, r2
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	4413      	add	r3, r2
 8001e0a:	3304      	adds	r3, #4
 8001e0c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68f9      	ldr	r1, [r7, #12]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f001 fdcd 	bl	80039b4 <USB_EPStopXfer>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001e1e:	7afb      	ldrb	r3, [r7, #11]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3710      	adds	r7, #16
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b08a      	sub	sp, #40	@ 0x28
 8001e2c:	af02      	add	r7, sp, #8
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001e3c:	683a      	ldr	r2, [r7, #0]
 8001e3e:	4613      	mov	r3, r2
 8001e40:	00db      	lsls	r3, r3, #3
 8001e42:	4413      	add	r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	3310      	adds	r3, #16
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	3304      	adds	r3, #4
 8001e4e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	695a      	ldr	r2, [r3, #20]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	691b      	ldr	r3, [r3, #16]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d901      	bls.n	8001e60 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e06b      	b.n	8001f38 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	691a      	ldr	r2, [r3, #16]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	695b      	ldr	r3, [r3, #20]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	69fa      	ldr	r2, [r7, #28]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d902      	bls.n	8001e7c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	3303      	adds	r3, #3
 8001e80:	089b      	lsrs	r3, r3, #2
 8001e82:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001e84:	e02a      	b.n	8001edc <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	691a      	ldr	r2, [r3, #16]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	695b      	ldr	r3, [r3, #20]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	69fa      	ldr	r2, [r7, #28]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d902      	bls.n	8001ea2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	3303      	adds	r3, #3
 8001ea6:	089b      	lsrs	r3, r3, #2
 8001ea8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	68d9      	ldr	r1, [r3, #12]
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	b2da      	uxtb	r2, r3
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001eba:	9300      	str	r3, [sp, #0]
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	6978      	ldr	r0, [r7, #20]
 8001ec0:	f001 fe22 	bl	8003b08 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	68da      	ldr	r2, [r3, #12]
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	441a      	add	r2, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	695a      	ldr	r2, [r3, #20]
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	441a      	add	r2, r3
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	015a      	lsls	r2, r3, #5
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d809      	bhi.n	8001f06 <PCD_WriteEmptyTxFifo+0xde>
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	695a      	ldr	r2, [r3, #20]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d203      	bcs.n	8001f06 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1bf      	bne.n	8001e86 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	691a      	ldr	r2, [r3, #16]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d811      	bhi.n	8001f36 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	f003 030f 	and.w	r3, r3, #15
 8001f18:	2201      	movs	r2, #1
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	6939      	ldr	r1, [r7, #16]
 8001f2e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001f32:	4013      	ands	r3, r2
 8001f34:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3720      	adds	r7, #32
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b088      	sub	sp, #32
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	333c      	adds	r3, #60	@ 0x3c
 8001f58:	3304      	adds	r3, #4
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	015a      	lsls	r2, r3, #5
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	4413      	add	r3, r2
 8001f66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	799b      	ldrb	r3, [r3, #6]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d17b      	bne.n	800206e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	f003 0308 	and.w	r3, r3, #8
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d015      	beq.n	8001fac <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	4a61      	ldr	r2, [pc, #388]	@ (8002108 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	f240 80b9 	bls.w	80020fc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	f000 80b3 	beq.w	80020fc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	015a      	lsls	r2, r3, #5
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001fa8:	6093      	str	r3, [r2, #8]
 8001faa:	e0a7      	b.n	80020fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	f003 0320 	and.w	r3, r3, #32
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d009      	beq.n	8001fca <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	015a      	lsls	r2, r3, #5
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	2320      	movs	r3, #32
 8001fc6:	6093      	str	r3, [r2, #8]
 8001fc8:	e098      	b.n	80020fc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	f040 8093 	bne.w	80020fc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	4a4b      	ldr	r2, [pc, #300]	@ (8002108 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d90f      	bls.n	8001ffe <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d00a      	beq.n	8001ffe <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	015a      	lsls	r2, r3, #5
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	4413      	add	r3, r2
 8001ff0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001ffa:	6093      	str	r3, [r2, #8]
 8001ffc:	e07e      	b.n	80020fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	4613      	mov	r3, r2
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	4413      	add	r3, r2
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	4413      	add	r3, r2
 8002010:	3304      	adds	r3, #4
 8002012:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6a1a      	ldr	r2, [r3, #32]
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	0159      	lsls	r1, r3, #5
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	440b      	add	r3, r1
 8002020:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800202a:	1ad2      	subs	r2, r2, r3
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d114      	bne.n	8002060 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d109      	bne.n	8002052 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6818      	ldr	r0, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002048:	461a      	mov	r2, r3
 800204a:	2101      	movs	r1, #1
 800204c:	f001 fff2 	bl	8004034 <USB_EP0_OutStart>
 8002050:	e006      	b.n	8002060 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	68da      	ldr	r2, [r3, #12]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	695b      	ldr	r3, [r3, #20]
 800205a:	441a      	add	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	b2db      	uxtb	r3, r3
 8002064:	4619      	mov	r1, r3
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f004 fa4c 	bl	8006504 <HAL_PCD_DataOutStageCallback>
 800206c:	e046      	b.n	80020fc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	4a26      	ldr	r2, [pc, #152]	@ (800210c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d124      	bne.n	80020c0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d00a      	beq.n	8002096 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	015a      	lsls	r2, r3, #5
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	4413      	add	r3, r2
 8002088:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800208c:	461a      	mov	r2, r3
 800208e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002092:	6093      	str	r3, [r2, #8]
 8002094:	e032      	b.n	80020fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	f003 0320 	and.w	r3, r3, #32
 800209c:	2b00      	cmp	r3, #0
 800209e:	d008      	beq.n	80020b2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	015a      	lsls	r2, r3, #5
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	4413      	add	r3, r2
 80020a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80020ac:	461a      	mov	r2, r3
 80020ae:	2320      	movs	r3, #32
 80020b0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	4619      	mov	r1, r3
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f004 fa23 	bl	8006504 <HAL_PCD_DataOutStageCallback>
 80020be:	e01d      	b.n	80020fc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d114      	bne.n	80020f0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80020c6:	6879      	ldr	r1, [r7, #4]
 80020c8:	683a      	ldr	r2, [r7, #0]
 80020ca:	4613      	mov	r3, r2
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	4413      	add	r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	440b      	add	r3, r1
 80020d4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d108      	bne.n	80020f0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6818      	ldr	r0, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80020e8:	461a      	mov	r2, r3
 80020ea:	2100      	movs	r1, #0
 80020ec:	f001 ffa2 	bl	8004034 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	4619      	mov	r1, r3
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f004 fa04 	bl	8006504 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3720      	adds	r7, #32
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	4f54300a 	.word	0x4f54300a
 800210c:	4f54310a 	.word	0x4f54310a

08002110 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	333c      	adds	r3, #60	@ 0x3c
 8002128:	3304      	adds	r3, #4
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	015a      	lsls	r2, r3, #5
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	4413      	add	r3, r2
 8002136:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	4a15      	ldr	r2, [pc, #84]	@ (8002198 <PCD_EP_OutSetupPacket_int+0x88>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d90e      	bls.n	8002164 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800214c:	2b00      	cmp	r3, #0
 800214e:	d009      	beq.n	8002164 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	015a      	lsls	r2, r3, #5
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	4413      	add	r3, r2
 8002158:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800215c:	461a      	mov	r2, r3
 800215e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002162:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f004 f9bb 	bl	80064e0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	4a0a      	ldr	r2, [pc, #40]	@ (8002198 <PCD_EP_OutSetupPacket_int+0x88>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d90c      	bls.n	800218c <PCD_EP_OutSetupPacket_int+0x7c>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	799b      	ldrb	r3, [r3, #6]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d108      	bne.n	800218c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6818      	ldr	r0, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002184:	461a      	mov	r2, r3
 8002186:	2101      	movs	r1, #1
 8002188:	f001 ff54 	bl	8004034 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3718      	adds	r7, #24
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	4f54300a 	.word	0x4f54300a

0800219c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	460b      	mov	r3, r1
 80021a6:	70fb      	strb	r3, [r7, #3]
 80021a8:	4613      	mov	r3, r2
 80021aa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021b2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80021b4:	78fb      	ldrb	r3, [r7, #3]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d107      	bne.n	80021ca <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80021ba:	883b      	ldrh	r3, [r7, #0]
 80021bc:	0419      	lsls	r1, r3, #16
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68ba      	ldr	r2, [r7, #8]
 80021c4:	430a      	orrs	r2, r1
 80021c6:	629a      	str	r2, [r3, #40]	@ 0x28
 80021c8:	e028      	b.n	800221c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021d0:	0c1b      	lsrs	r3, r3, #16
 80021d2:	68ba      	ldr	r2, [r7, #8]
 80021d4:	4413      	add	r3, r2
 80021d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80021d8:	2300      	movs	r3, #0
 80021da:	73fb      	strb	r3, [r7, #15]
 80021dc:	e00d      	b.n	80021fa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	7bfb      	ldrb	r3, [r7, #15]
 80021e4:	3340      	adds	r3, #64	@ 0x40
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	4413      	add	r3, r2
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	0c1b      	lsrs	r3, r3, #16
 80021ee:	68ba      	ldr	r2, [r7, #8]
 80021f0:	4413      	add	r3, r2
 80021f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80021f4:	7bfb      	ldrb	r3, [r7, #15]
 80021f6:	3301      	adds	r3, #1
 80021f8:	73fb      	strb	r3, [r7, #15]
 80021fa:	7bfa      	ldrb	r2, [r7, #15]
 80021fc:	78fb      	ldrb	r3, [r7, #3]
 80021fe:	3b01      	subs	r3, #1
 8002200:	429a      	cmp	r2, r3
 8002202:	d3ec      	bcc.n	80021de <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002204:	883b      	ldrh	r3, [r7, #0]
 8002206:	0418      	lsls	r0, r3, #16
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6819      	ldr	r1, [r3, #0]
 800220c:	78fb      	ldrb	r3, [r7, #3]
 800220e:	3b01      	subs	r3, #1
 8002210:	68ba      	ldr	r2, [r7, #8]
 8002212:	4302      	orrs	r2, r0
 8002214:	3340      	adds	r3, #64	@ 0x40
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	440b      	add	r3, r1
 800221a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3714      	adds	r7, #20
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr

0800222a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800222a:	b480      	push	{r7}
 800222c:	b083      	sub	sp, #12
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
 8002232:	460b      	mov	r3, r1
 8002234:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	887a      	ldrh	r2, [r7, #2]
 800223c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	460b      	mov	r3, r1
 8002256:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e267      	b.n	8002746 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b00      	cmp	r3, #0
 8002280:	d075      	beq.n	800236e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002282:	4b88      	ldr	r3, [pc, #544]	@ (80024a4 <HAL_RCC_OscConfig+0x240>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f003 030c 	and.w	r3, r3, #12
 800228a:	2b04      	cmp	r3, #4
 800228c:	d00c      	beq.n	80022a8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800228e:	4b85      	ldr	r3, [pc, #532]	@ (80024a4 <HAL_RCC_OscConfig+0x240>)
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002296:	2b08      	cmp	r3, #8
 8002298:	d112      	bne.n	80022c0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800229a:	4b82      	ldr	r3, [pc, #520]	@ (80024a4 <HAL_RCC_OscConfig+0x240>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80022a6:	d10b      	bne.n	80022c0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022a8:	4b7e      	ldr	r3, [pc, #504]	@ (80024a4 <HAL_RCC_OscConfig+0x240>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d05b      	beq.n	800236c <HAL_RCC_OscConfig+0x108>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d157      	bne.n	800236c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e242      	b.n	8002746 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022c8:	d106      	bne.n	80022d8 <HAL_RCC_OscConfig+0x74>
 80022ca:	4b76      	ldr	r3, [pc, #472]	@ (80024a4 <HAL_RCC_OscConfig+0x240>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a75      	ldr	r2, [pc, #468]	@ (80024a4 <HAL_RCC_OscConfig+0x240>)
 80022d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022d4:	6013      	str	r3, [r2, #0]
 80022d6:	e01d      	b.n	8002314 <HAL_RCC_OscConfig+0xb0>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022e0:	d10c      	bne.n	80022fc <HAL_RCC_OscConfig+0x98>
 80022e2:	4b70      	ldr	r3, [pc, #448]	@ (80024a4 <HAL_RCC_OscConfig+0x240>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a6f      	ldr	r2, [pc, #444]	@ (80024a4 <HAL_RCC_OscConfig+0x240>)
 80022e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022ec:	6013      	str	r3, [r2, #0]
 80022ee:	4b6d      	ldr	r3, [pc, #436]	@ (80024a4 <HAL_RCC_OscConfig+0x240>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a6c      	ldr	r2, [pc, #432]	@ (80024a4 <HAL_RCC_OscConfig+0x240>)
 80022f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022f8:	6013      	str	r3, [r2, #0]
 80022fa:	e00b      	b.n	8002314 <HAL_RCC_OscConfig+0xb0>
 80022fc:	4b69      	ldr	r3, [pc, #420]	@ (80024a4 <HAL_RCC_OscConfig+0x240>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a68      	ldr	r2, [pc, #416]	@ (80024a4 <HAL_RCC_OscConfig+0x240>)
 8002302:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002306:	6013      	str	r3, [r2, #0]
 8002308:	4b66      	ldr	r3, [pc, #408]	@ (80024a4 <HAL_RCC_OscConfig+0x240>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a65      	ldr	r2, [pc, #404]	@ (80024a4 <HAL_RCC_OscConfig+0x240>)
 800230e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002312:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d013      	beq.n	8002344 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231c:	f7fe fa8a 	bl	8000834 <HAL_GetTick>
 8002320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002322:	e008      	b.n	8002336 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002324:	f7fe fa86 	bl	8000834 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b64      	cmp	r3, #100	@ 0x64
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e207      	b.n	8002746 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002336:	4b5b      	ldr	r3, [pc, #364]	@ (80024a4 <HAL_RCC_OscConfig+0x240>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d0f0      	beq.n	8002324 <HAL_RCC_OscConfig+0xc0>
 8002342:	e014      	b.n	800236e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002344:	f7fe fa76 	bl	8000834 <HAL_GetTick>
 8002348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800234a:	e008      	b.n	800235e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800234c:	f7fe fa72 	bl	8000834 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b64      	cmp	r3, #100	@ 0x64
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e1f3      	b.n	8002746 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800235e:	4b51      	ldr	r3, [pc, #324]	@ (80024a4 <HAL_RCC_OscConfig+0x240>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d1f0      	bne.n	800234c <HAL_RCC_OscConfig+0xe8>
 800236a:	e000      	b.n	800236e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800236c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d063      	beq.n	8002442 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800237a:	4b4a      	ldr	r3, [pc, #296]	@ (80024a4 <HAL_RCC_OscConfig+0x240>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f003 030c 	and.w	r3, r3, #12
 8002382:	2b00      	cmp	r3, #0
 8002384:	d00b      	beq.n	800239e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002386:	4b47      	ldr	r3, [pc, #284]	@ (80024a4 <HAL_RCC_OscConfig+0x240>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800238e:	2b08      	cmp	r3, #8
 8002390:	d11c      	bne.n	80023cc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002392:	4b44      	ldr	r3, [pc, #272]	@ (80024a4 <HAL_RCC_OscConfig+0x240>)
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d116      	bne.n	80023cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800239e:	4b41      	ldr	r3, [pc, #260]	@ (80024a4 <HAL_RCC_OscConfig+0x240>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d005      	beq.n	80023b6 <HAL_RCC_OscConfig+0x152>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d001      	beq.n	80023b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e1c7      	b.n	8002746 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023b6:	4b3b      	ldr	r3, [pc, #236]	@ (80024a4 <HAL_RCC_OscConfig+0x240>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	4937      	ldr	r1, [pc, #220]	@ (80024a4 <HAL_RCC_OscConfig+0x240>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ca:	e03a      	b.n	8002442 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d020      	beq.n	8002416 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023d4:	4b34      	ldr	r3, [pc, #208]	@ (80024a8 <HAL_RCC_OscConfig+0x244>)
 80023d6:	2201      	movs	r2, #1
 80023d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023da:	f7fe fa2b 	bl	8000834 <HAL_GetTick>
 80023de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e0:	e008      	b.n	80023f4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023e2:	f7fe fa27 	bl	8000834 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d901      	bls.n	80023f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e1a8      	b.n	8002746 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023f4:	4b2b      	ldr	r3, [pc, #172]	@ (80024a4 <HAL_RCC_OscConfig+0x240>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0302 	and.w	r3, r3, #2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d0f0      	beq.n	80023e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002400:	4b28      	ldr	r3, [pc, #160]	@ (80024a4 <HAL_RCC_OscConfig+0x240>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	00db      	lsls	r3, r3, #3
 800240e:	4925      	ldr	r1, [pc, #148]	@ (80024a4 <HAL_RCC_OscConfig+0x240>)
 8002410:	4313      	orrs	r3, r2
 8002412:	600b      	str	r3, [r1, #0]
 8002414:	e015      	b.n	8002442 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002416:	4b24      	ldr	r3, [pc, #144]	@ (80024a8 <HAL_RCC_OscConfig+0x244>)
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800241c:	f7fe fa0a 	bl	8000834 <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002422:	e008      	b.n	8002436 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002424:	f7fe fa06 	bl	8000834 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b02      	cmp	r3, #2
 8002430:	d901      	bls.n	8002436 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e187      	b.n	8002746 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002436:	4b1b      	ldr	r3, [pc, #108]	@ (80024a4 <HAL_RCC_OscConfig+0x240>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d1f0      	bne.n	8002424 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0308 	and.w	r3, r3, #8
 800244a:	2b00      	cmp	r3, #0
 800244c:	d036      	beq.n	80024bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d016      	beq.n	8002484 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002456:	4b15      	ldr	r3, [pc, #84]	@ (80024ac <HAL_RCC_OscConfig+0x248>)
 8002458:	2201      	movs	r2, #1
 800245a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800245c:	f7fe f9ea 	bl	8000834 <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002462:	e008      	b.n	8002476 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002464:	f7fe f9e6 	bl	8000834 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e167      	b.n	8002746 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002476:	4b0b      	ldr	r3, [pc, #44]	@ (80024a4 <HAL_RCC_OscConfig+0x240>)
 8002478:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d0f0      	beq.n	8002464 <HAL_RCC_OscConfig+0x200>
 8002482:	e01b      	b.n	80024bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002484:	4b09      	ldr	r3, [pc, #36]	@ (80024ac <HAL_RCC_OscConfig+0x248>)
 8002486:	2200      	movs	r2, #0
 8002488:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800248a:	f7fe f9d3 	bl	8000834 <HAL_GetTick>
 800248e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002490:	e00e      	b.n	80024b0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002492:	f7fe f9cf 	bl	8000834 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	2b02      	cmp	r3, #2
 800249e:	d907      	bls.n	80024b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e150      	b.n	8002746 <HAL_RCC_OscConfig+0x4e2>
 80024a4:	40023800 	.word	0x40023800
 80024a8:	42470000 	.word	0x42470000
 80024ac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024b0:	4b88      	ldr	r3, [pc, #544]	@ (80026d4 <HAL_RCC_OscConfig+0x470>)
 80024b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d1ea      	bne.n	8002492 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0304 	and.w	r3, r3, #4
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	f000 8097 	beq.w	80025f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024ca:	2300      	movs	r3, #0
 80024cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024ce:	4b81      	ldr	r3, [pc, #516]	@ (80026d4 <HAL_RCC_OscConfig+0x470>)
 80024d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d10f      	bne.n	80024fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024da:	2300      	movs	r3, #0
 80024dc:	60bb      	str	r3, [r7, #8]
 80024de:	4b7d      	ldr	r3, [pc, #500]	@ (80026d4 <HAL_RCC_OscConfig+0x470>)
 80024e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e2:	4a7c      	ldr	r2, [pc, #496]	@ (80026d4 <HAL_RCC_OscConfig+0x470>)
 80024e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80024ea:	4b7a      	ldr	r3, [pc, #488]	@ (80026d4 <HAL_RCC_OscConfig+0x470>)
 80024ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024f2:	60bb      	str	r3, [r7, #8]
 80024f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024f6:	2301      	movs	r3, #1
 80024f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024fa:	4b77      	ldr	r3, [pc, #476]	@ (80026d8 <HAL_RCC_OscConfig+0x474>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002502:	2b00      	cmp	r3, #0
 8002504:	d118      	bne.n	8002538 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002506:	4b74      	ldr	r3, [pc, #464]	@ (80026d8 <HAL_RCC_OscConfig+0x474>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a73      	ldr	r2, [pc, #460]	@ (80026d8 <HAL_RCC_OscConfig+0x474>)
 800250c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002510:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002512:	f7fe f98f 	bl	8000834 <HAL_GetTick>
 8002516:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002518:	e008      	b.n	800252c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800251a:	f7fe f98b 	bl	8000834 <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b02      	cmp	r3, #2
 8002526:	d901      	bls.n	800252c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e10c      	b.n	8002746 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800252c:	4b6a      	ldr	r3, [pc, #424]	@ (80026d8 <HAL_RCC_OscConfig+0x474>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002534:	2b00      	cmp	r3, #0
 8002536:	d0f0      	beq.n	800251a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	2b01      	cmp	r3, #1
 800253e:	d106      	bne.n	800254e <HAL_RCC_OscConfig+0x2ea>
 8002540:	4b64      	ldr	r3, [pc, #400]	@ (80026d4 <HAL_RCC_OscConfig+0x470>)
 8002542:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002544:	4a63      	ldr	r2, [pc, #396]	@ (80026d4 <HAL_RCC_OscConfig+0x470>)
 8002546:	f043 0301 	orr.w	r3, r3, #1
 800254a:	6713      	str	r3, [r2, #112]	@ 0x70
 800254c:	e01c      	b.n	8002588 <HAL_RCC_OscConfig+0x324>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	2b05      	cmp	r3, #5
 8002554:	d10c      	bne.n	8002570 <HAL_RCC_OscConfig+0x30c>
 8002556:	4b5f      	ldr	r3, [pc, #380]	@ (80026d4 <HAL_RCC_OscConfig+0x470>)
 8002558:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800255a:	4a5e      	ldr	r2, [pc, #376]	@ (80026d4 <HAL_RCC_OscConfig+0x470>)
 800255c:	f043 0304 	orr.w	r3, r3, #4
 8002560:	6713      	str	r3, [r2, #112]	@ 0x70
 8002562:	4b5c      	ldr	r3, [pc, #368]	@ (80026d4 <HAL_RCC_OscConfig+0x470>)
 8002564:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002566:	4a5b      	ldr	r2, [pc, #364]	@ (80026d4 <HAL_RCC_OscConfig+0x470>)
 8002568:	f043 0301 	orr.w	r3, r3, #1
 800256c:	6713      	str	r3, [r2, #112]	@ 0x70
 800256e:	e00b      	b.n	8002588 <HAL_RCC_OscConfig+0x324>
 8002570:	4b58      	ldr	r3, [pc, #352]	@ (80026d4 <HAL_RCC_OscConfig+0x470>)
 8002572:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002574:	4a57      	ldr	r2, [pc, #348]	@ (80026d4 <HAL_RCC_OscConfig+0x470>)
 8002576:	f023 0301 	bic.w	r3, r3, #1
 800257a:	6713      	str	r3, [r2, #112]	@ 0x70
 800257c:	4b55      	ldr	r3, [pc, #340]	@ (80026d4 <HAL_RCC_OscConfig+0x470>)
 800257e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002580:	4a54      	ldr	r2, [pc, #336]	@ (80026d4 <HAL_RCC_OscConfig+0x470>)
 8002582:	f023 0304 	bic.w	r3, r3, #4
 8002586:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d015      	beq.n	80025bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002590:	f7fe f950 	bl	8000834 <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002596:	e00a      	b.n	80025ae <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002598:	f7fe f94c 	bl	8000834 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e0cb      	b.n	8002746 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ae:	4b49      	ldr	r3, [pc, #292]	@ (80026d4 <HAL_RCC_OscConfig+0x470>)
 80025b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d0ee      	beq.n	8002598 <HAL_RCC_OscConfig+0x334>
 80025ba:	e014      	b.n	80025e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025bc:	f7fe f93a 	bl	8000834 <HAL_GetTick>
 80025c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025c2:	e00a      	b.n	80025da <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025c4:	f7fe f936 	bl	8000834 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e0b5      	b.n	8002746 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025da:	4b3e      	ldr	r3, [pc, #248]	@ (80026d4 <HAL_RCC_OscConfig+0x470>)
 80025dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1ee      	bne.n	80025c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80025e6:	7dfb      	ldrb	r3, [r7, #23]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d105      	bne.n	80025f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025ec:	4b39      	ldr	r3, [pc, #228]	@ (80026d4 <HAL_RCC_OscConfig+0x470>)
 80025ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f0:	4a38      	ldr	r2, [pc, #224]	@ (80026d4 <HAL_RCC_OscConfig+0x470>)
 80025f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025f6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f000 80a1 	beq.w	8002744 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002602:	4b34      	ldr	r3, [pc, #208]	@ (80026d4 <HAL_RCC_OscConfig+0x470>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f003 030c 	and.w	r3, r3, #12
 800260a:	2b08      	cmp	r3, #8
 800260c:	d05c      	beq.n	80026c8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	2b02      	cmp	r3, #2
 8002614:	d141      	bne.n	800269a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002616:	4b31      	ldr	r3, [pc, #196]	@ (80026dc <HAL_RCC_OscConfig+0x478>)
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800261c:	f7fe f90a 	bl	8000834 <HAL_GetTick>
 8002620:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002624:	f7fe f906 	bl	8000834 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e087      	b.n	8002746 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002636:	4b27      	ldr	r3, [pc, #156]	@ (80026d4 <HAL_RCC_OscConfig+0x470>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1f0      	bne.n	8002624 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69da      	ldr	r2, [r3, #28]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a1b      	ldr	r3, [r3, #32]
 800264a:	431a      	orrs	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002650:	019b      	lsls	r3, r3, #6
 8002652:	431a      	orrs	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002658:	085b      	lsrs	r3, r3, #1
 800265a:	3b01      	subs	r3, #1
 800265c:	041b      	lsls	r3, r3, #16
 800265e:	431a      	orrs	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002664:	061b      	lsls	r3, r3, #24
 8002666:	491b      	ldr	r1, [pc, #108]	@ (80026d4 <HAL_RCC_OscConfig+0x470>)
 8002668:	4313      	orrs	r3, r2
 800266a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800266c:	4b1b      	ldr	r3, [pc, #108]	@ (80026dc <HAL_RCC_OscConfig+0x478>)
 800266e:	2201      	movs	r2, #1
 8002670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002672:	f7fe f8df 	bl	8000834 <HAL_GetTick>
 8002676:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002678:	e008      	b.n	800268c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800267a:	f7fe f8db 	bl	8000834 <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	2b02      	cmp	r3, #2
 8002686:	d901      	bls.n	800268c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e05c      	b.n	8002746 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800268c:	4b11      	ldr	r3, [pc, #68]	@ (80026d4 <HAL_RCC_OscConfig+0x470>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d0f0      	beq.n	800267a <HAL_RCC_OscConfig+0x416>
 8002698:	e054      	b.n	8002744 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800269a:	4b10      	ldr	r3, [pc, #64]	@ (80026dc <HAL_RCC_OscConfig+0x478>)
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a0:	f7fe f8c8 	bl	8000834 <HAL_GetTick>
 80026a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026a8:	f7fe f8c4 	bl	8000834 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e045      	b.n	8002746 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ba:	4b06      	ldr	r3, [pc, #24]	@ (80026d4 <HAL_RCC_OscConfig+0x470>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d1f0      	bne.n	80026a8 <HAL_RCC_OscConfig+0x444>
 80026c6:	e03d      	b.n	8002744 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d107      	bne.n	80026e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e038      	b.n	8002746 <HAL_RCC_OscConfig+0x4e2>
 80026d4:	40023800 	.word	0x40023800
 80026d8:	40007000 	.word	0x40007000
 80026dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002750 <HAL_RCC_OscConfig+0x4ec>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d028      	beq.n	8002740 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d121      	bne.n	8002740 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002706:	429a      	cmp	r2, r3
 8002708:	d11a      	bne.n	8002740 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800270a:	68fa      	ldr	r2, [r7, #12]
 800270c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002710:	4013      	ands	r3, r2
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002716:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002718:	4293      	cmp	r3, r2
 800271a:	d111      	bne.n	8002740 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002726:	085b      	lsrs	r3, r3, #1
 8002728:	3b01      	subs	r3, #1
 800272a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800272c:	429a      	cmp	r2, r3
 800272e:	d107      	bne.n	8002740 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800273a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800273c:	429a      	cmp	r2, r3
 800273e:	d001      	beq.n	8002744 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e000      	b.n	8002746 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3718      	adds	r7, #24
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	40023800 	.word	0x40023800

08002754 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d101      	bne.n	8002768 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e0cc      	b.n	8002902 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002768:	4b68      	ldr	r3, [pc, #416]	@ (800290c <HAL_RCC_ClockConfig+0x1b8>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0307 	and.w	r3, r3, #7
 8002770:	683a      	ldr	r2, [r7, #0]
 8002772:	429a      	cmp	r2, r3
 8002774:	d90c      	bls.n	8002790 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002776:	4b65      	ldr	r3, [pc, #404]	@ (800290c <HAL_RCC_ClockConfig+0x1b8>)
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	b2d2      	uxtb	r2, r2
 800277c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800277e:	4b63      	ldr	r3, [pc, #396]	@ (800290c <HAL_RCC_ClockConfig+0x1b8>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0307 	and.w	r3, r3, #7
 8002786:	683a      	ldr	r2, [r7, #0]
 8002788:	429a      	cmp	r2, r3
 800278a:	d001      	beq.n	8002790 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e0b8      	b.n	8002902 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d020      	beq.n	80027de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0304 	and.w	r3, r3, #4
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d005      	beq.n	80027b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027a8:	4b59      	ldr	r3, [pc, #356]	@ (8002910 <HAL_RCC_ClockConfig+0x1bc>)
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	4a58      	ldr	r2, [pc, #352]	@ (8002910 <HAL_RCC_ClockConfig+0x1bc>)
 80027ae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80027b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0308 	and.w	r3, r3, #8
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d005      	beq.n	80027cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027c0:	4b53      	ldr	r3, [pc, #332]	@ (8002910 <HAL_RCC_ClockConfig+0x1bc>)
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	4a52      	ldr	r2, [pc, #328]	@ (8002910 <HAL_RCC_ClockConfig+0x1bc>)
 80027c6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80027ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027cc:	4b50      	ldr	r3, [pc, #320]	@ (8002910 <HAL_RCC_ClockConfig+0x1bc>)
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	494d      	ldr	r1, [pc, #308]	@ (8002910 <HAL_RCC_ClockConfig+0x1bc>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d044      	beq.n	8002874 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d107      	bne.n	8002802 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027f2:	4b47      	ldr	r3, [pc, #284]	@ (8002910 <HAL_RCC_ClockConfig+0x1bc>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d119      	bne.n	8002832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e07f      	b.n	8002902 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	2b02      	cmp	r3, #2
 8002808:	d003      	beq.n	8002812 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800280e:	2b03      	cmp	r3, #3
 8002810:	d107      	bne.n	8002822 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002812:	4b3f      	ldr	r3, [pc, #252]	@ (8002910 <HAL_RCC_ClockConfig+0x1bc>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d109      	bne.n	8002832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e06f      	b.n	8002902 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002822:	4b3b      	ldr	r3, [pc, #236]	@ (8002910 <HAL_RCC_ClockConfig+0x1bc>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d101      	bne.n	8002832 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e067      	b.n	8002902 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002832:	4b37      	ldr	r3, [pc, #220]	@ (8002910 <HAL_RCC_ClockConfig+0x1bc>)
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f023 0203 	bic.w	r2, r3, #3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	4934      	ldr	r1, [pc, #208]	@ (8002910 <HAL_RCC_ClockConfig+0x1bc>)
 8002840:	4313      	orrs	r3, r2
 8002842:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002844:	f7fd fff6 	bl	8000834 <HAL_GetTick>
 8002848:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800284a:	e00a      	b.n	8002862 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800284c:	f7fd fff2 	bl	8000834 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	f241 3288 	movw	r2, #5000	@ 0x1388
 800285a:	4293      	cmp	r3, r2
 800285c:	d901      	bls.n	8002862 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e04f      	b.n	8002902 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002862:	4b2b      	ldr	r3, [pc, #172]	@ (8002910 <HAL_RCC_ClockConfig+0x1bc>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f003 020c 	and.w	r2, r3, #12
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	429a      	cmp	r2, r3
 8002872:	d1eb      	bne.n	800284c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002874:	4b25      	ldr	r3, [pc, #148]	@ (800290c <HAL_RCC_ClockConfig+0x1b8>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0307 	and.w	r3, r3, #7
 800287c:	683a      	ldr	r2, [r7, #0]
 800287e:	429a      	cmp	r2, r3
 8002880:	d20c      	bcs.n	800289c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002882:	4b22      	ldr	r3, [pc, #136]	@ (800290c <HAL_RCC_ClockConfig+0x1b8>)
 8002884:	683a      	ldr	r2, [r7, #0]
 8002886:	b2d2      	uxtb	r2, r2
 8002888:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800288a:	4b20      	ldr	r3, [pc, #128]	@ (800290c <HAL_RCC_ClockConfig+0x1b8>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0307 	and.w	r3, r3, #7
 8002892:	683a      	ldr	r2, [r7, #0]
 8002894:	429a      	cmp	r2, r3
 8002896:	d001      	beq.n	800289c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e032      	b.n	8002902 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0304 	and.w	r3, r3, #4
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d008      	beq.n	80028ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028a8:	4b19      	ldr	r3, [pc, #100]	@ (8002910 <HAL_RCC_ClockConfig+0x1bc>)
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	4916      	ldr	r1, [pc, #88]	@ (8002910 <HAL_RCC_ClockConfig+0x1bc>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0308 	and.w	r3, r3, #8
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d009      	beq.n	80028da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028c6:	4b12      	ldr	r3, [pc, #72]	@ (8002910 <HAL_RCC_ClockConfig+0x1bc>)
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	00db      	lsls	r3, r3, #3
 80028d4:	490e      	ldr	r1, [pc, #56]	@ (8002910 <HAL_RCC_ClockConfig+0x1bc>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028da:	f000 f821 	bl	8002920 <HAL_RCC_GetSysClockFreq>
 80028de:	4602      	mov	r2, r0
 80028e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002910 <HAL_RCC_ClockConfig+0x1bc>)
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	091b      	lsrs	r3, r3, #4
 80028e6:	f003 030f 	and.w	r3, r3, #15
 80028ea:	490a      	ldr	r1, [pc, #40]	@ (8002914 <HAL_RCC_ClockConfig+0x1c0>)
 80028ec:	5ccb      	ldrb	r3, [r1, r3]
 80028ee:	fa22 f303 	lsr.w	r3, r2, r3
 80028f2:	4a09      	ldr	r2, [pc, #36]	@ (8002918 <HAL_RCC_ClockConfig+0x1c4>)
 80028f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80028f6:	4b09      	ldr	r3, [pc, #36]	@ (800291c <HAL_RCC_ClockConfig+0x1c8>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7fd ff56 	bl	80007ac <HAL_InitTick>

  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3710      	adds	r7, #16
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	40023c00 	.word	0x40023c00
 8002910:	40023800 	.word	0x40023800
 8002914:	08006b04 	.word	0x08006b04
 8002918:	20000000 	.word	0x20000000
 800291c:	20000004 	.word	0x20000004

08002920 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002920:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002924:	b090      	sub	sp, #64	@ 0x40
 8002926:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002928:	2300      	movs	r3, #0
 800292a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800292c:	2300      	movs	r3, #0
 800292e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002930:	2300      	movs	r3, #0
 8002932:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002934:	2300      	movs	r3, #0
 8002936:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002938:	4b59      	ldr	r3, [pc, #356]	@ (8002aa0 <HAL_RCC_GetSysClockFreq+0x180>)
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f003 030c 	and.w	r3, r3, #12
 8002940:	2b08      	cmp	r3, #8
 8002942:	d00d      	beq.n	8002960 <HAL_RCC_GetSysClockFreq+0x40>
 8002944:	2b08      	cmp	r3, #8
 8002946:	f200 80a1 	bhi.w	8002a8c <HAL_RCC_GetSysClockFreq+0x16c>
 800294a:	2b00      	cmp	r3, #0
 800294c:	d002      	beq.n	8002954 <HAL_RCC_GetSysClockFreq+0x34>
 800294e:	2b04      	cmp	r3, #4
 8002950:	d003      	beq.n	800295a <HAL_RCC_GetSysClockFreq+0x3a>
 8002952:	e09b      	b.n	8002a8c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002954:	4b53      	ldr	r3, [pc, #332]	@ (8002aa4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002956:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002958:	e09b      	b.n	8002a92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800295a:	4b53      	ldr	r3, [pc, #332]	@ (8002aa8 <HAL_RCC_GetSysClockFreq+0x188>)
 800295c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800295e:	e098      	b.n	8002a92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002960:	4b4f      	ldr	r3, [pc, #316]	@ (8002aa0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002968:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800296a:	4b4d      	ldr	r3, [pc, #308]	@ (8002aa0 <HAL_RCC_GetSysClockFreq+0x180>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d028      	beq.n	80029c8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002976:	4b4a      	ldr	r3, [pc, #296]	@ (8002aa0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	099b      	lsrs	r3, r3, #6
 800297c:	2200      	movs	r2, #0
 800297e:	623b      	str	r3, [r7, #32]
 8002980:	627a      	str	r2, [r7, #36]	@ 0x24
 8002982:	6a3b      	ldr	r3, [r7, #32]
 8002984:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002988:	2100      	movs	r1, #0
 800298a:	4b47      	ldr	r3, [pc, #284]	@ (8002aa8 <HAL_RCC_GetSysClockFreq+0x188>)
 800298c:	fb03 f201 	mul.w	r2, r3, r1
 8002990:	2300      	movs	r3, #0
 8002992:	fb00 f303 	mul.w	r3, r0, r3
 8002996:	4413      	add	r3, r2
 8002998:	4a43      	ldr	r2, [pc, #268]	@ (8002aa8 <HAL_RCC_GetSysClockFreq+0x188>)
 800299a:	fba0 1202 	umull	r1, r2, r0, r2
 800299e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80029a0:	460a      	mov	r2, r1
 80029a2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80029a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80029a6:	4413      	add	r3, r2
 80029a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029ac:	2200      	movs	r2, #0
 80029ae:	61bb      	str	r3, [r7, #24]
 80029b0:	61fa      	str	r2, [r7, #28]
 80029b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029b6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80029ba:	f7fd fc0b 	bl	80001d4 <__aeabi_uldivmod>
 80029be:	4602      	mov	r2, r0
 80029c0:	460b      	mov	r3, r1
 80029c2:	4613      	mov	r3, r2
 80029c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029c6:	e053      	b.n	8002a70 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029c8:	4b35      	ldr	r3, [pc, #212]	@ (8002aa0 <HAL_RCC_GetSysClockFreq+0x180>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	099b      	lsrs	r3, r3, #6
 80029ce:	2200      	movs	r2, #0
 80029d0:	613b      	str	r3, [r7, #16]
 80029d2:	617a      	str	r2, [r7, #20]
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80029da:	f04f 0b00 	mov.w	fp, #0
 80029de:	4652      	mov	r2, sl
 80029e0:	465b      	mov	r3, fp
 80029e2:	f04f 0000 	mov.w	r0, #0
 80029e6:	f04f 0100 	mov.w	r1, #0
 80029ea:	0159      	lsls	r1, r3, #5
 80029ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029f0:	0150      	lsls	r0, r2, #5
 80029f2:	4602      	mov	r2, r0
 80029f4:	460b      	mov	r3, r1
 80029f6:	ebb2 080a 	subs.w	r8, r2, sl
 80029fa:	eb63 090b 	sbc.w	r9, r3, fp
 80029fe:	f04f 0200 	mov.w	r2, #0
 8002a02:	f04f 0300 	mov.w	r3, #0
 8002a06:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002a0a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002a0e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002a12:	ebb2 0408 	subs.w	r4, r2, r8
 8002a16:	eb63 0509 	sbc.w	r5, r3, r9
 8002a1a:	f04f 0200 	mov.w	r2, #0
 8002a1e:	f04f 0300 	mov.w	r3, #0
 8002a22:	00eb      	lsls	r3, r5, #3
 8002a24:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a28:	00e2      	lsls	r2, r4, #3
 8002a2a:	4614      	mov	r4, r2
 8002a2c:	461d      	mov	r5, r3
 8002a2e:	eb14 030a 	adds.w	r3, r4, sl
 8002a32:	603b      	str	r3, [r7, #0]
 8002a34:	eb45 030b 	adc.w	r3, r5, fp
 8002a38:	607b      	str	r3, [r7, #4]
 8002a3a:	f04f 0200 	mov.w	r2, #0
 8002a3e:	f04f 0300 	mov.w	r3, #0
 8002a42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a46:	4629      	mov	r1, r5
 8002a48:	028b      	lsls	r3, r1, #10
 8002a4a:	4621      	mov	r1, r4
 8002a4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a50:	4621      	mov	r1, r4
 8002a52:	028a      	lsls	r2, r1, #10
 8002a54:	4610      	mov	r0, r2
 8002a56:	4619      	mov	r1, r3
 8002a58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	60bb      	str	r3, [r7, #8]
 8002a5e:	60fa      	str	r2, [r7, #12]
 8002a60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a64:	f7fd fbb6 	bl	80001d4 <__aeabi_uldivmod>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002a70:	4b0b      	ldr	r3, [pc, #44]	@ (8002aa0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	0c1b      	lsrs	r3, r3, #16
 8002a76:	f003 0303 	and.w	r3, r3, #3
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002a80:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a88:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a8a:	e002      	b.n	8002a92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a8c:	4b05      	ldr	r3, [pc, #20]	@ (8002aa4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002a8e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3740      	adds	r7, #64	@ 0x40
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a9e:	bf00      	nop
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	00f42400 	.word	0x00f42400
 8002aa8:	017d7840 	.word	0x017d7840

08002aac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ab0:	4b03      	ldr	r3, [pc, #12]	@ (8002ac0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	20000000 	.word	0x20000000

08002ac4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002ac4:	b084      	sub	sp, #16
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b084      	sub	sp, #16
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
 8002ace:	f107 001c 	add.w	r0, r7, #28
 8002ad2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002ad6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d123      	bne.n	8002b26 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ae2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8002af2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002b06:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d105      	bne.n	8002b1a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f001 fae8 	bl	80040f0 <USB_CoreReset>
 8002b20:	4603      	mov	r3, r0
 8002b22:	73fb      	strb	r3, [r7, #15]
 8002b24:	e01b      	b.n	8002b5e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f001 fadc 	bl	80040f0 <USB_CoreReset>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002b3c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d106      	bne.n	8002b52 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b48:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	639a      	str	r2, [r3, #56]	@ 0x38
 8002b50:	e005      	b.n	8002b5e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b56:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002b5e:	7fbb      	ldrb	r3, [r7, #30]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d10b      	bne.n	8002b7c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f043 0206 	orr.w	r2, r3, #6
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f043 0220 	orr.w	r2, r3, #32
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3710      	adds	r7, #16
 8002b82:	46bd      	mov	sp, r7
 8002b84:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002b88:	b004      	add	sp, #16
 8002b8a:	4770      	bx	lr

08002b8c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b087      	sub	sp, #28
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	4613      	mov	r3, r2
 8002b98:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002b9a:	79fb      	ldrb	r3, [r7, #7]
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d165      	bne.n	8002c6c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	4a41      	ldr	r2, [pc, #260]	@ (8002ca8 <USB_SetTurnaroundTime+0x11c>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d906      	bls.n	8002bb6 <USB_SetTurnaroundTime+0x2a>
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	4a40      	ldr	r2, [pc, #256]	@ (8002cac <USB_SetTurnaroundTime+0x120>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d202      	bcs.n	8002bb6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002bb0:	230f      	movs	r3, #15
 8002bb2:	617b      	str	r3, [r7, #20]
 8002bb4:	e062      	b.n	8002c7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	4a3c      	ldr	r2, [pc, #240]	@ (8002cac <USB_SetTurnaroundTime+0x120>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d306      	bcc.n	8002bcc <USB_SetTurnaroundTime+0x40>
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	4a3b      	ldr	r2, [pc, #236]	@ (8002cb0 <USB_SetTurnaroundTime+0x124>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d202      	bcs.n	8002bcc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002bc6:	230e      	movs	r3, #14
 8002bc8:	617b      	str	r3, [r7, #20]
 8002bca:	e057      	b.n	8002c7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	4a38      	ldr	r2, [pc, #224]	@ (8002cb0 <USB_SetTurnaroundTime+0x124>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d306      	bcc.n	8002be2 <USB_SetTurnaroundTime+0x56>
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	4a37      	ldr	r2, [pc, #220]	@ (8002cb4 <USB_SetTurnaroundTime+0x128>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d202      	bcs.n	8002be2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002bdc:	230d      	movs	r3, #13
 8002bde:	617b      	str	r3, [r7, #20]
 8002be0:	e04c      	b.n	8002c7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	4a33      	ldr	r2, [pc, #204]	@ (8002cb4 <USB_SetTurnaroundTime+0x128>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d306      	bcc.n	8002bf8 <USB_SetTurnaroundTime+0x6c>
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	4a32      	ldr	r2, [pc, #200]	@ (8002cb8 <USB_SetTurnaroundTime+0x12c>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d802      	bhi.n	8002bf8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002bf2:	230c      	movs	r3, #12
 8002bf4:	617b      	str	r3, [r7, #20]
 8002bf6:	e041      	b.n	8002c7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	4a2f      	ldr	r2, [pc, #188]	@ (8002cb8 <USB_SetTurnaroundTime+0x12c>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d906      	bls.n	8002c0e <USB_SetTurnaroundTime+0x82>
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	4a2e      	ldr	r2, [pc, #184]	@ (8002cbc <USB_SetTurnaroundTime+0x130>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d802      	bhi.n	8002c0e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002c08:	230b      	movs	r3, #11
 8002c0a:	617b      	str	r3, [r7, #20]
 8002c0c:	e036      	b.n	8002c7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	4a2a      	ldr	r2, [pc, #168]	@ (8002cbc <USB_SetTurnaroundTime+0x130>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d906      	bls.n	8002c24 <USB_SetTurnaroundTime+0x98>
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	4a29      	ldr	r2, [pc, #164]	@ (8002cc0 <USB_SetTurnaroundTime+0x134>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d802      	bhi.n	8002c24 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002c1e:	230a      	movs	r3, #10
 8002c20:	617b      	str	r3, [r7, #20]
 8002c22:	e02b      	b.n	8002c7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	4a26      	ldr	r2, [pc, #152]	@ (8002cc0 <USB_SetTurnaroundTime+0x134>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d906      	bls.n	8002c3a <USB_SetTurnaroundTime+0xae>
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	4a25      	ldr	r2, [pc, #148]	@ (8002cc4 <USB_SetTurnaroundTime+0x138>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d202      	bcs.n	8002c3a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002c34:	2309      	movs	r3, #9
 8002c36:	617b      	str	r3, [r7, #20]
 8002c38:	e020      	b.n	8002c7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	4a21      	ldr	r2, [pc, #132]	@ (8002cc4 <USB_SetTurnaroundTime+0x138>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d306      	bcc.n	8002c50 <USB_SetTurnaroundTime+0xc4>
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	4a20      	ldr	r2, [pc, #128]	@ (8002cc8 <USB_SetTurnaroundTime+0x13c>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d802      	bhi.n	8002c50 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002c4a:	2308      	movs	r3, #8
 8002c4c:	617b      	str	r3, [r7, #20]
 8002c4e:	e015      	b.n	8002c7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	4a1d      	ldr	r2, [pc, #116]	@ (8002cc8 <USB_SetTurnaroundTime+0x13c>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d906      	bls.n	8002c66 <USB_SetTurnaroundTime+0xda>
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	4a1c      	ldr	r2, [pc, #112]	@ (8002ccc <USB_SetTurnaroundTime+0x140>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d202      	bcs.n	8002c66 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002c60:	2307      	movs	r3, #7
 8002c62:	617b      	str	r3, [r7, #20]
 8002c64:	e00a      	b.n	8002c7c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002c66:	2306      	movs	r3, #6
 8002c68:	617b      	str	r3, [r7, #20]
 8002c6a:	e007      	b.n	8002c7c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002c6c:	79fb      	ldrb	r3, [r7, #7]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d102      	bne.n	8002c78 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002c72:	2309      	movs	r3, #9
 8002c74:	617b      	str	r3, [r7, #20]
 8002c76:	e001      	b.n	8002c7c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002c78:	2309      	movs	r3, #9
 8002c7a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	68da      	ldr	r2, [r3, #12]
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	029b      	lsls	r3, r3, #10
 8002c90:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8002c94:	431a      	orrs	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	371c      	adds	r7, #28
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr
 8002ca8:	00d8acbf 	.word	0x00d8acbf
 8002cac:	00e4e1c0 	.word	0x00e4e1c0
 8002cb0:	00f42400 	.word	0x00f42400
 8002cb4:	01067380 	.word	0x01067380
 8002cb8:	011a499f 	.word	0x011a499f
 8002cbc:	01312cff 	.word	0x01312cff
 8002cc0:	014ca43f 	.word	0x014ca43f
 8002cc4:	016e3600 	.word	0x016e3600
 8002cc8:	01a6ab1f 	.word	0x01a6ab1f
 8002ccc:	01e84800 	.word	0x01e84800

08002cd0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f043 0201 	orr.w	r2, r3, #1
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr

08002cf2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	b083      	sub	sp, #12
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f023 0201 	bic.w	r2, r3, #1
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002d06:	2300      	movs	r3, #0
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002d20:	2300      	movs	r3, #0
 8002d22:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002d30:	78fb      	ldrb	r3, [r7, #3]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d115      	bne.n	8002d62 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002d42:	200a      	movs	r0, #10
 8002d44:	f7fd fd82 	bl	800084c <HAL_Delay>
      ms += 10U;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	330a      	adds	r3, #10
 8002d4c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f001 f93f 	bl	8003fd2 <USB_GetMode>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d01e      	beq.n	8002d98 <USB_SetCurrentMode+0x84>
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2bc7      	cmp	r3, #199	@ 0xc7
 8002d5e:	d9f0      	bls.n	8002d42 <USB_SetCurrentMode+0x2e>
 8002d60:	e01a      	b.n	8002d98 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002d62:	78fb      	ldrb	r3, [r7, #3]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d115      	bne.n	8002d94 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002d74:	200a      	movs	r0, #10
 8002d76:	f7fd fd69 	bl	800084c <HAL_Delay>
      ms += 10U;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	330a      	adds	r3, #10
 8002d7e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f001 f926 	bl	8003fd2 <USB_GetMode>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d005      	beq.n	8002d98 <USB_SetCurrentMode+0x84>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2bc7      	cmp	r3, #199	@ 0xc7
 8002d90:	d9f0      	bls.n	8002d74 <USB_SetCurrentMode+0x60>
 8002d92:	e001      	b.n	8002d98 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e005      	b.n	8002da4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2bc8      	cmp	r3, #200	@ 0xc8
 8002d9c:	d101      	bne.n	8002da2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e000      	b.n	8002da4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3710      	adds	r7, #16
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002dac:	b084      	sub	sp, #16
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b086      	sub	sp, #24
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
 8002db6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8002dba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	613b      	str	r3, [r7, #16]
 8002dca:	e009      	b.n	8002de0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	3340      	adds	r3, #64	@ 0x40
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	4413      	add	r3, r2
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	3301      	adds	r3, #1
 8002dde:	613b      	str	r3, [r7, #16]
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	2b0e      	cmp	r3, #14
 8002de4:	d9f2      	bls.n	8002dcc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002de6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d11c      	bne.n	8002e28 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002dfc:	f043 0302 	orr.w	r3, r3, #2
 8002e00:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e06:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e12:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e1e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	639a      	str	r2, [r3, #56]	@ 0x38
 8002e26:	e00b      	b.n	8002e40 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e2c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e38:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8002e46:	461a      	mov	r2, r3
 8002e48:	2300      	movs	r3, #0
 8002e4a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002e4c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d10d      	bne.n	8002e70 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002e54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d104      	bne.n	8002e66 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 f968 	bl	8003134 <USB_SetDevSpeed>
 8002e64:	e008      	b.n	8002e78 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002e66:	2101      	movs	r1, #1
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f000 f963 	bl	8003134 <USB_SetDevSpeed>
 8002e6e:	e003      	b.n	8002e78 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002e70:	2103      	movs	r1, #3
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f000 f95e 	bl	8003134 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002e78:	2110      	movs	r1, #16
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 f8fa 	bl	8003074 <USB_FlushTxFifo>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 f924 	bl	80030d8 <USB_FlushRxFifo>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002eac:	461a      	mov	r2, r3
 8002eae:	2300      	movs	r3, #0
 8002eb0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002eb8:	461a      	mov	r2, r3
 8002eba:	2300      	movs	r3, #0
 8002ebc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	613b      	str	r3, [r7, #16]
 8002ec2:	e043      	b.n	8002f4c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	015a      	lsls	r2, r3, #5
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	4413      	add	r3, r2
 8002ecc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002ed6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002eda:	d118      	bne.n	8002f0e <USB_DevInit+0x162>
    {
      if (i == 0U)
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d10a      	bne.n	8002ef8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	015a      	lsls	r2, r3, #5
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	4413      	add	r3, r2
 8002eea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002eee:	461a      	mov	r2, r3
 8002ef0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002ef4:	6013      	str	r3, [r2, #0]
 8002ef6:	e013      	b.n	8002f20 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	015a      	lsls	r2, r3, #5
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	4413      	add	r3, r2
 8002f00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f04:	461a      	mov	r2, r3
 8002f06:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002f0a:	6013      	str	r3, [r2, #0]
 8002f0c:	e008      	b.n	8002f20 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	015a      	lsls	r2, r3, #5
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	4413      	add	r3, r2
 8002f16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	015a      	lsls	r2, r3, #5
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	4413      	add	r3, r2
 8002f28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	2300      	movs	r3, #0
 8002f30:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	015a      	lsls	r2, r3, #5
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	4413      	add	r3, r2
 8002f3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f3e:	461a      	mov	r2, r3
 8002f40:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002f44:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	3301      	adds	r3, #1
 8002f4a:	613b      	str	r3, [r7, #16]
 8002f4c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002f50:	461a      	mov	r2, r3
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d3b5      	bcc.n	8002ec4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002f58:	2300      	movs	r3, #0
 8002f5a:	613b      	str	r3, [r7, #16]
 8002f5c:	e043      	b.n	8002fe6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	015a      	lsls	r2, r3, #5
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	4413      	add	r3, r2
 8002f66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002f70:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002f74:	d118      	bne.n	8002fa8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d10a      	bne.n	8002f92 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	015a      	lsls	r2, r3, #5
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	4413      	add	r3, r2
 8002f84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f88:	461a      	mov	r2, r3
 8002f8a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002f8e:	6013      	str	r3, [r2, #0]
 8002f90:	e013      	b.n	8002fba <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	015a      	lsls	r2, r3, #5
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	4413      	add	r3, r2
 8002f9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002fa4:	6013      	str	r3, [r2, #0]
 8002fa6:	e008      	b.n	8002fba <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	015a      	lsls	r2, r3, #5
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	4413      	add	r3, r2
 8002fb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	015a      	lsls	r2, r3, #5
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	2300      	movs	r3, #0
 8002fca:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	015a      	lsls	r2, r3, #5
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fd8:	461a      	mov	r2, r3
 8002fda:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002fde:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	613b      	str	r3, [r7, #16]
 8002fe6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002fea:	461a      	mov	r2, r3
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d3b5      	bcc.n	8002f5e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003000:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003004:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003012:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003014:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003018:	2b00      	cmp	r3, #0
 800301a:	d105      	bne.n	8003028 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	f043 0210 	orr.w	r2, r3, #16
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	699a      	ldr	r2, [r3, #24]
 800302c:	4b10      	ldr	r3, [pc, #64]	@ (8003070 <USB_DevInit+0x2c4>)
 800302e:	4313      	orrs	r3, r2
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003034:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003038:	2b00      	cmp	r3, #0
 800303a:	d005      	beq.n	8003048 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	f043 0208 	orr.w	r2, r3, #8
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003048:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800304c:	2b01      	cmp	r3, #1
 800304e:	d107      	bne.n	8003060 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003058:	f043 0304 	orr.w	r3, r3, #4
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003060:	7dfb      	ldrb	r3, [r7, #23]
}
 8003062:	4618      	mov	r0, r3
 8003064:	3718      	adds	r7, #24
 8003066:	46bd      	mov	sp, r7
 8003068:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800306c:	b004      	add	sp, #16
 800306e:	4770      	bx	lr
 8003070:	803c3800 	.word	0x803c3800

08003074 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003074:	b480      	push	{r7}
 8003076:	b085      	sub	sp, #20
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800307e:	2300      	movs	r3, #0
 8003080:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	3301      	adds	r3, #1
 8003086:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800308e:	d901      	bls.n	8003094 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e01b      	b.n	80030cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	691b      	ldr	r3, [r3, #16]
 8003098:	2b00      	cmp	r3, #0
 800309a:	daf2      	bge.n	8003082 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800309c:	2300      	movs	r3, #0
 800309e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	019b      	lsls	r3, r3, #6
 80030a4:	f043 0220 	orr.w	r2, r3, #32
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	3301      	adds	r3, #1
 80030b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80030b8:	d901      	bls.n	80030be <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e006      	b.n	80030cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	f003 0320 	and.w	r3, r3, #32
 80030c6:	2b20      	cmp	r3, #32
 80030c8:	d0f0      	beq.n	80030ac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80030ca:	2300      	movs	r3, #0
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3714      	adds	r7, #20
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80030d8:	b480      	push	{r7}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80030e0:	2300      	movs	r3, #0
 80030e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	3301      	adds	r3, #1
 80030e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80030f0:	d901      	bls.n	80030f6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e018      	b.n	8003128 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	daf2      	bge.n	80030e4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80030fe:	2300      	movs	r3, #0
 8003100:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2210      	movs	r2, #16
 8003106:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	3301      	adds	r3, #1
 800310c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003114:	d901      	bls.n	800311a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e006      	b.n	8003128 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	f003 0310 	and.w	r3, r3, #16
 8003122:	2b10      	cmp	r3, #16
 8003124:	d0f0      	beq.n	8003108 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003126:	2300      	movs	r3, #0
}
 8003128:	4618      	mov	r0, r3
 800312a:	3714      	adds	r7, #20
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003134:	b480      	push	{r7}
 8003136:	b085      	sub	sp, #20
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	460b      	mov	r3, r1
 800313e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	78fb      	ldrb	r3, [r7, #3]
 800314e:	68f9      	ldr	r1, [r7, #12]
 8003150:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003154:	4313      	orrs	r3, r2
 8003156:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3714      	adds	r7, #20
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr

08003166 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8003166:	b480      	push	{r7}
 8003168:	b087      	sub	sp, #28
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f003 0306 	and.w	r3, r3, #6
 800317e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d102      	bne.n	800318c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003186:	2300      	movs	r3, #0
 8003188:	75fb      	strb	r3, [r7, #23]
 800318a:	e00a      	b.n	80031a2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2b02      	cmp	r3, #2
 8003190:	d002      	beq.n	8003198 <USB_GetDevSpeed+0x32>
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2b06      	cmp	r3, #6
 8003196:	d102      	bne.n	800319e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003198:	2302      	movs	r3, #2
 800319a:	75fb      	strb	r3, [r7, #23]
 800319c:	e001      	b.n	80031a2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800319e:	230f      	movs	r3, #15
 80031a0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80031a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	371c      	adds	r7, #28
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	785b      	ldrb	r3, [r3, #1]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d13a      	bne.n	8003242 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031d2:	69da      	ldr	r2, [r3, #28]
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	f003 030f 	and.w	r3, r3, #15
 80031dc:	2101      	movs	r1, #1
 80031de:	fa01 f303 	lsl.w	r3, r1, r3
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	68f9      	ldr	r1, [r7, #12]
 80031e6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80031ea:	4313      	orrs	r3, r2
 80031ec:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	015a      	lsls	r2, r3, #5
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	4413      	add	r3, r2
 80031f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d155      	bne.n	80032b0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	015a      	lsls	r2, r3, #5
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	4413      	add	r3, r2
 800320c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	791b      	ldrb	r3, [r3, #4]
 800321e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003220:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	059b      	lsls	r3, r3, #22
 8003226:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003228:	4313      	orrs	r3, r2
 800322a:	68ba      	ldr	r2, [r7, #8]
 800322c:	0151      	lsls	r1, r2, #5
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	440a      	add	r2, r1
 8003232:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003236:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800323a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800323e:	6013      	str	r3, [r2, #0]
 8003240:	e036      	b.n	80032b0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003248:	69da      	ldr	r2, [r3, #28]
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	f003 030f 	and.w	r3, r3, #15
 8003252:	2101      	movs	r1, #1
 8003254:	fa01 f303 	lsl.w	r3, r1, r3
 8003258:	041b      	lsls	r3, r3, #16
 800325a:	68f9      	ldr	r1, [r7, #12]
 800325c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003260:	4313      	orrs	r3, r2
 8003262:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	015a      	lsls	r2, r3, #5
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	4413      	add	r3, r2
 800326c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d11a      	bne.n	80032b0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	015a      	lsls	r2, r3, #5
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	4413      	add	r3, r2
 8003282:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	791b      	ldrb	r3, [r3, #4]
 8003294:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003296:	430b      	orrs	r3, r1
 8003298:	4313      	orrs	r3, r2
 800329a:	68ba      	ldr	r2, [r7, #8]
 800329c:	0151      	lsls	r1, r2, #5
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	440a      	add	r2, r1
 80032a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80032a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80032ae:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3714      	adds	r7, #20
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
	...

080032c0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b085      	sub	sp, #20
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	785b      	ldrb	r3, [r3, #1]
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d161      	bne.n	80033a0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	015a      	lsls	r2, r3, #5
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	4413      	add	r3, r2
 80032e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80032ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80032f2:	d11f      	bne.n	8003334 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	015a      	lsls	r2, r3, #5
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	4413      	add	r3, r2
 80032fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68ba      	ldr	r2, [r7, #8]
 8003304:	0151      	lsls	r1, r2, #5
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	440a      	add	r2, r1
 800330a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800330e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003312:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	015a      	lsls	r2, r3, #5
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	4413      	add	r3, r2
 800331c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68ba      	ldr	r2, [r7, #8]
 8003324:	0151      	lsls	r1, r2, #5
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	440a      	add	r2, r1
 800332a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800332e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003332:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800333a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	f003 030f 	and.w	r3, r3, #15
 8003344:	2101      	movs	r1, #1
 8003346:	fa01 f303 	lsl.w	r3, r1, r3
 800334a:	b29b      	uxth	r3, r3
 800334c:	43db      	mvns	r3, r3
 800334e:	68f9      	ldr	r1, [r7, #12]
 8003350:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003354:	4013      	ands	r3, r2
 8003356:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800335e:	69da      	ldr	r2, [r3, #28]
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	f003 030f 	and.w	r3, r3, #15
 8003368:	2101      	movs	r1, #1
 800336a:	fa01 f303 	lsl.w	r3, r1, r3
 800336e:	b29b      	uxth	r3, r3
 8003370:	43db      	mvns	r3, r3
 8003372:	68f9      	ldr	r1, [r7, #12]
 8003374:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003378:	4013      	ands	r3, r2
 800337a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	015a      	lsls	r2, r3, #5
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	4413      	add	r3, r2
 8003384:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	0159      	lsls	r1, r3, #5
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	440b      	add	r3, r1
 8003392:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003396:	4619      	mov	r1, r3
 8003398:	4b35      	ldr	r3, [pc, #212]	@ (8003470 <USB_DeactivateEndpoint+0x1b0>)
 800339a:	4013      	ands	r3, r2
 800339c:	600b      	str	r3, [r1, #0]
 800339e:	e060      	b.n	8003462 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	015a      	lsls	r2, r3, #5
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	4413      	add	r3, r2
 80033a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80033b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80033b6:	d11f      	bne.n	80033f8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	015a      	lsls	r2, r3, #5
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	4413      	add	r3, r2
 80033c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	68ba      	ldr	r2, [r7, #8]
 80033c8:	0151      	lsls	r1, r2, #5
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	440a      	add	r2, r1
 80033ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80033d2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80033d6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	015a      	lsls	r2, r3, #5
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	4413      	add	r3, r2
 80033e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68ba      	ldr	r2, [r7, #8]
 80033e8:	0151      	lsls	r1, r2, #5
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	440a      	add	r2, r1
 80033ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80033f2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80033f6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	f003 030f 	and.w	r3, r3, #15
 8003408:	2101      	movs	r1, #1
 800340a:	fa01 f303 	lsl.w	r3, r1, r3
 800340e:	041b      	lsls	r3, r3, #16
 8003410:	43db      	mvns	r3, r3
 8003412:	68f9      	ldr	r1, [r7, #12]
 8003414:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003418:	4013      	ands	r3, r2
 800341a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003422:	69da      	ldr	r2, [r3, #28]
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	f003 030f 	and.w	r3, r3, #15
 800342c:	2101      	movs	r1, #1
 800342e:	fa01 f303 	lsl.w	r3, r1, r3
 8003432:	041b      	lsls	r3, r3, #16
 8003434:	43db      	mvns	r3, r3
 8003436:	68f9      	ldr	r1, [r7, #12]
 8003438:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800343c:	4013      	ands	r3, r2
 800343e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	015a      	lsls	r2, r3, #5
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	4413      	add	r3, r2
 8003448:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	0159      	lsls	r1, r3, #5
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	440b      	add	r3, r1
 8003456:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800345a:	4619      	mov	r1, r3
 800345c:	4b05      	ldr	r3, [pc, #20]	@ (8003474 <USB_DeactivateEndpoint+0x1b4>)
 800345e:	4013      	ands	r3, r2
 8003460:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003462:	2300      	movs	r3, #0
}
 8003464:	4618      	mov	r0, r3
 8003466:	3714      	adds	r7, #20
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr
 8003470:	ec337800 	.word	0xec337800
 8003474:	eff37800 	.word	0xeff37800

08003478 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b08a      	sub	sp, #40	@ 0x28
 800347c:	af02      	add	r7, sp, #8
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	4613      	mov	r3, r2
 8003484:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	785b      	ldrb	r3, [r3, #1]
 8003494:	2b01      	cmp	r3, #1
 8003496:	f040 817f 	bne.w	8003798 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d132      	bne.n	8003508 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	015a      	lsls	r2, r3, #5
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	4413      	add	r3, r2
 80034aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	0151      	lsls	r1, r2, #5
 80034b4:	69fa      	ldr	r2, [r7, #28]
 80034b6:	440a      	add	r2, r1
 80034b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80034bc:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80034c0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80034c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	015a      	lsls	r2, r3, #5
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	4413      	add	r3, r2
 80034ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80034d2:	691b      	ldr	r3, [r3, #16]
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	0151      	lsls	r1, r2, #5
 80034d8:	69fa      	ldr	r2, [r7, #28]
 80034da:	440a      	add	r2, r1
 80034dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80034e0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80034e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	015a      	lsls	r2, r3, #5
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	4413      	add	r3, r2
 80034ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	0151      	lsls	r1, r2, #5
 80034f8:	69fa      	ldr	r2, [r7, #28]
 80034fa:	440a      	add	r2, r1
 80034fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003500:	0cdb      	lsrs	r3, r3, #19
 8003502:	04db      	lsls	r3, r3, #19
 8003504:	6113      	str	r3, [r2, #16]
 8003506:	e097      	b.n	8003638 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	015a      	lsls	r2, r3, #5
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	4413      	add	r3, r2
 8003510:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	69ba      	ldr	r2, [r7, #24]
 8003518:	0151      	lsls	r1, r2, #5
 800351a:	69fa      	ldr	r2, [r7, #28]
 800351c:	440a      	add	r2, r1
 800351e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003522:	0cdb      	lsrs	r3, r3, #19
 8003524:	04db      	lsls	r3, r3, #19
 8003526:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	015a      	lsls	r2, r3, #5
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	4413      	add	r3, r2
 8003530:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	69ba      	ldr	r2, [r7, #24]
 8003538:	0151      	lsls	r1, r2, #5
 800353a:	69fa      	ldr	r2, [r7, #28]
 800353c:	440a      	add	r2, r1
 800353e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003542:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003546:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800354a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d11a      	bne.n	8003588 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	691a      	ldr	r2, [r3, #16]
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	429a      	cmp	r2, r3
 800355c:	d903      	bls.n	8003566 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	689a      	ldr	r2, [r3, #8]
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	015a      	lsls	r2, r3, #5
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	4413      	add	r3, r2
 800356e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003572:	691b      	ldr	r3, [r3, #16]
 8003574:	69ba      	ldr	r2, [r7, #24]
 8003576:	0151      	lsls	r1, r2, #5
 8003578:	69fa      	ldr	r2, [r7, #28]
 800357a:	440a      	add	r2, r1
 800357c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003580:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003584:	6113      	str	r3, [r2, #16]
 8003586:	e044      	b.n	8003612 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	691a      	ldr	r2, [r3, #16]
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	4413      	add	r3, r2
 8003592:	1e5a      	subs	r2, r3, #1
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	fbb2 f3f3 	udiv	r3, r2, r3
 800359c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	015a      	lsls	r2, r3, #5
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	4413      	add	r3, r2
 80035a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035aa:	691a      	ldr	r2, [r3, #16]
 80035ac:	8afb      	ldrh	r3, [r7, #22]
 80035ae:	04d9      	lsls	r1, r3, #19
 80035b0:	4ba4      	ldr	r3, [pc, #656]	@ (8003844 <USB_EPStartXfer+0x3cc>)
 80035b2:	400b      	ands	r3, r1
 80035b4:	69b9      	ldr	r1, [r7, #24]
 80035b6:	0148      	lsls	r0, r1, #5
 80035b8:	69f9      	ldr	r1, [r7, #28]
 80035ba:	4401      	add	r1, r0
 80035bc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80035c0:	4313      	orrs	r3, r2
 80035c2:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	791b      	ldrb	r3, [r3, #4]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d122      	bne.n	8003612 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	015a      	lsls	r2, r3, #5
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	4413      	add	r3, r2
 80035d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	69ba      	ldr	r2, [r7, #24]
 80035dc:	0151      	lsls	r1, r2, #5
 80035de:	69fa      	ldr	r2, [r7, #28]
 80035e0:	440a      	add	r2, r1
 80035e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80035e6:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80035ea:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	015a      	lsls	r2, r3, #5
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	4413      	add	r3, r2
 80035f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035f8:	691a      	ldr	r2, [r3, #16]
 80035fa:	8afb      	ldrh	r3, [r7, #22]
 80035fc:	075b      	lsls	r3, r3, #29
 80035fe:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8003602:	69b9      	ldr	r1, [r7, #24]
 8003604:	0148      	lsls	r0, r1, #5
 8003606:	69f9      	ldr	r1, [r7, #28]
 8003608:	4401      	add	r1, r0
 800360a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800360e:	4313      	orrs	r3, r2
 8003610:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	015a      	lsls	r2, r3, #5
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	4413      	add	r3, r2
 800361a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800361e:	691a      	ldr	r2, [r3, #16]
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003628:	69b9      	ldr	r1, [r7, #24]
 800362a:	0148      	lsls	r0, r1, #5
 800362c:	69f9      	ldr	r1, [r7, #28]
 800362e:	4401      	add	r1, r0
 8003630:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003634:	4313      	orrs	r3, r2
 8003636:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003638:	79fb      	ldrb	r3, [r7, #7]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d14b      	bne.n	80036d6 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	69db      	ldr	r3, [r3, #28]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d009      	beq.n	800365a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	015a      	lsls	r2, r3, #5
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	4413      	add	r3, r2
 800364e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003652:	461a      	mov	r2, r3
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	69db      	ldr	r3, [r3, #28]
 8003658:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	791b      	ldrb	r3, [r3, #4]
 800365e:	2b01      	cmp	r3, #1
 8003660:	d128      	bne.n	80036b4 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800366e:	2b00      	cmp	r3, #0
 8003670:	d110      	bne.n	8003694 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	015a      	lsls	r2, r3, #5
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	4413      	add	r3, r2
 800367a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	0151      	lsls	r1, r2, #5
 8003684:	69fa      	ldr	r2, [r7, #28]
 8003686:	440a      	add	r2, r1
 8003688:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800368c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003690:	6013      	str	r3, [r2, #0]
 8003692:	e00f      	b.n	80036b4 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	015a      	lsls	r2, r3, #5
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	4413      	add	r3, r2
 800369c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	69ba      	ldr	r2, [r7, #24]
 80036a4:	0151      	lsls	r1, r2, #5
 80036a6:	69fa      	ldr	r2, [r7, #28]
 80036a8:	440a      	add	r2, r1
 80036aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80036ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036b2:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	015a      	lsls	r2, r3, #5
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	4413      	add	r3, r2
 80036bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	0151      	lsls	r1, r2, #5
 80036c6:	69fa      	ldr	r2, [r7, #28]
 80036c8:	440a      	add	r2, r1
 80036ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80036ce:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80036d2:	6013      	str	r3, [r2, #0]
 80036d4:	e166      	b.n	80039a4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	015a      	lsls	r2, r3, #5
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	4413      	add	r3, r2
 80036de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	69ba      	ldr	r2, [r7, #24]
 80036e6:	0151      	lsls	r1, r2, #5
 80036e8:	69fa      	ldr	r2, [r7, #28]
 80036ea:	440a      	add	r2, r1
 80036ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80036f0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80036f4:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	791b      	ldrb	r3, [r3, #4]
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d015      	beq.n	800372a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	2b00      	cmp	r3, #0
 8003704:	f000 814e 	beq.w	80039a4 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800370e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	f003 030f 	and.w	r3, r3, #15
 8003718:	2101      	movs	r1, #1
 800371a:	fa01 f303 	lsl.w	r3, r1, r3
 800371e:	69f9      	ldr	r1, [r7, #28]
 8003720:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003724:	4313      	orrs	r3, r2
 8003726:	634b      	str	r3, [r1, #52]	@ 0x34
 8003728:	e13c      	b.n	80039a4 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003736:	2b00      	cmp	r3, #0
 8003738:	d110      	bne.n	800375c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	015a      	lsls	r2, r3, #5
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	4413      	add	r3, r2
 8003742:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	0151      	lsls	r1, r2, #5
 800374c:	69fa      	ldr	r2, [r7, #28]
 800374e:	440a      	add	r2, r1
 8003750:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003754:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003758:	6013      	str	r3, [r2, #0]
 800375a:	e00f      	b.n	800377c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	015a      	lsls	r2, r3, #5
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	4413      	add	r3, r2
 8003764:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	69ba      	ldr	r2, [r7, #24]
 800376c:	0151      	lsls	r1, r2, #5
 800376e:	69fa      	ldr	r2, [r7, #28]
 8003770:	440a      	add	r2, r1
 8003772:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003776:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800377a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	68d9      	ldr	r1, [r3, #12]
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	781a      	ldrb	r2, [r3, #0]
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	691b      	ldr	r3, [r3, #16]
 8003788:	b298      	uxth	r0, r3
 800378a:	79fb      	ldrb	r3, [r7, #7]
 800378c:	9300      	str	r3, [sp, #0]
 800378e:	4603      	mov	r3, r0
 8003790:	68f8      	ldr	r0, [r7, #12]
 8003792:	f000 f9b9 	bl	8003b08 <USB_WritePacket>
 8003796:	e105      	b.n	80039a4 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	015a      	lsls	r2, r3, #5
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	4413      	add	r3, r2
 80037a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	69ba      	ldr	r2, [r7, #24]
 80037a8:	0151      	lsls	r1, r2, #5
 80037aa:	69fa      	ldr	r2, [r7, #28]
 80037ac:	440a      	add	r2, r1
 80037ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80037b2:	0cdb      	lsrs	r3, r3, #19
 80037b4:	04db      	lsls	r3, r3, #19
 80037b6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	015a      	lsls	r2, r3, #5
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	4413      	add	r3, r2
 80037c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	69ba      	ldr	r2, [r7, #24]
 80037c8:	0151      	lsls	r1, r2, #5
 80037ca:	69fa      	ldr	r2, [r7, #28]
 80037cc:	440a      	add	r2, r1
 80037ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80037d2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80037d6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80037da:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d132      	bne.n	8003848 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d003      	beq.n	80037f2 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	689a      	ldr	r2, [r3, #8]
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	689a      	ldr	r2, [r3, #8]
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	015a      	lsls	r2, r3, #5
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	4413      	add	r3, r2
 8003802:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003806:	691a      	ldr	r2, [r3, #16]
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	6a1b      	ldr	r3, [r3, #32]
 800380c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003810:	69b9      	ldr	r1, [r7, #24]
 8003812:	0148      	lsls	r0, r1, #5
 8003814:	69f9      	ldr	r1, [r7, #28]
 8003816:	4401      	add	r1, r0
 8003818:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800381c:	4313      	orrs	r3, r2
 800381e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	015a      	lsls	r2, r3, #5
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	4413      	add	r3, r2
 8003828:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	69ba      	ldr	r2, [r7, #24]
 8003830:	0151      	lsls	r1, r2, #5
 8003832:	69fa      	ldr	r2, [r7, #28]
 8003834:	440a      	add	r2, r1
 8003836:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800383a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800383e:	6113      	str	r3, [r2, #16]
 8003840:	e062      	b.n	8003908 <USB_EPStartXfer+0x490>
 8003842:	bf00      	nop
 8003844:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	691b      	ldr	r3, [r3, #16]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d123      	bne.n	8003898 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	015a      	lsls	r2, r3, #5
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	4413      	add	r3, r2
 8003858:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800385c:	691a      	ldr	r2, [r3, #16]
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003866:	69b9      	ldr	r1, [r7, #24]
 8003868:	0148      	lsls	r0, r1, #5
 800386a:	69f9      	ldr	r1, [r7, #28]
 800386c:	4401      	add	r1, r0
 800386e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003872:	4313      	orrs	r3, r2
 8003874:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	015a      	lsls	r2, r3, #5
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	4413      	add	r3, r2
 800387e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	69ba      	ldr	r2, [r7, #24]
 8003886:	0151      	lsls	r1, r2, #5
 8003888:	69fa      	ldr	r2, [r7, #28]
 800388a:	440a      	add	r2, r1
 800388c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003890:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003894:	6113      	str	r3, [r2, #16]
 8003896:	e037      	b.n	8003908 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	691a      	ldr	r2, [r3, #16]
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	4413      	add	r3, r2
 80038a2:	1e5a      	subs	r2, r3, #1
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ac:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	8afa      	ldrh	r2, [r7, #22]
 80038b4:	fb03 f202 	mul.w	r2, r3, r2
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	015a      	lsls	r2, r3, #5
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	4413      	add	r3, r2
 80038c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038c8:	691a      	ldr	r2, [r3, #16]
 80038ca:	8afb      	ldrh	r3, [r7, #22]
 80038cc:	04d9      	lsls	r1, r3, #19
 80038ce:	4b38      	ldr	r3, [pc, #224]	@ (80039b0 <USB_EPStartXfer+0x538>)
 80038d0:	400b      	ands	r3, r1
 80038d2:	69b9      	ldr	r1, [r7, #24]
 80038d4:	0148      	lsls	r0, r1, #5
 80038d6:	69f9      	ldr	r1, [r7, #28]
 80038d8:	4401      	add	r1, r0
 80038da:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80038de:	4313      	orrs	r3, r2
 80038e0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	015a      	lsls	r2, r3, #5
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	4413      	add	r3, r2
 80038ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038ee:	691a      	ldr	r2, [r3, #16]
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	6a1b      	ldr	r3, [r3, #32]
 80038f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038f8:	69b9      	ldr	r1, [r7, #24]
 80038fa:	0148      	lsls	r0, r1, #5
 80038fc:	69f9      	ldr	r1, [r7, #28]
 80038fe:	4401      	add	r1, r0
 8003900:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003904:	4313      	orrs	r3, r2
 8003906:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8003908:	79fb      	ldrb	r3, [r7, #7]
 800390a:	2b01      	cmp	r3, #1
 800390c:	d10d      	bne.n	800392a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d009      	beq.n	800392a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	68d9      	ldr	r1, [r3, #12]
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	015a      	lsls	r2, r3, #5
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	4413      	add	r3, r2
 8003922:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003926:	460a      	mov	r2, r1
 8003928:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	791b      	ldrb	r3, [r3, #4]
 800392e:	2b01      	cmp	r3, #1
 8003930:	d128      	bne.n	8003984 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800393e:	2b00      	cmp	r3, #0
 8003940:	d110      	bne.n	8003964 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	015a      	lsls	r2, r3, #5
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	4413      	add	r3, r2
 800394a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	69ba      	ldr	r2, [r7, #24]
 8003952:	0151      	lsls	r1, r2, #5
 8003954:	69fa      	ldr	r2, [r7, #28]
 8003956:	440a      	add	r2, r1
 8003958:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800395c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003960:	6013      	str	r3, [r2, #0]
 8003962:	e00f      	b.n	8003984 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	015a      	lsls	r2, r3, #5
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	4413      	add	r3, r2
 800396c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	69ba      	ldr	r2, [r7, #24]
 8003974:	0151      	lsls	r1, r2, #5
 8003976:	69fa      	ldr	r2, [r7, #28]
 8003978:	440a      	add	r2, r1
 800397a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800397e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003982:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	015a      	lsls	r2, r3, #5
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	4413      	add	r3, r2
 800398c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	69ba      	ldr	r2, [r7, #24]
 8003994:	0151      	lsls	r1, r2, #5
 8003996:	69fa      	ldr	r2, [r7, #28]
 8003998:	440a      	add	r2, r1
 800399a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800399e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80039a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3720      	adds	r7, #32
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	1ff80000 	.word	0x1ff80000

080039b4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b087      	sub	sp, #28
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80039be:	2300      	movs	r3, #0
 80039c0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80039c2:	2300      	movs	r3, #0
 80039c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	785b      	ldrb	r3, [r3, #1]
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d14a      	bne.n	8003a68 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	015a      	lsls	r2, r3, #5
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	4413      	add	r3, r2
 80039dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80039e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80039ea:	f040 8086 	bne.w	8003afa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	015a      	lsls	r2, r3, #5
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	4413      	add	r3, r2
 80039f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	683a      	ldr	r2, [r7, #0]
 8003a00:	7812      	ldrb	r2, [r2, #0]
 8003a02:	0151      	lsls	r1, r2, #5
 8003a04:	693a      	ldr	r2, [r7, #16]
 8003a06:	440a      	add	r2, r1
 8003a08:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003a0c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003a10:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	015a      	lsls	r2, r3, #5
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	683a      	ldr	r2, [r7, #0]
 8003a24:	7812      	ldrb	r2, [r2, #0]
 8003a26:	0151      	lsls	r1, r2, #5
 8003a28:	693a      	ldr	r2, [r7, #16]
 8003a2a:	440a      	add	r2, r1
 8003a2c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003a30:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003a34:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	3301      	adds	r3, #1
 8003a3a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d902      	bls.n	8003a4c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	75fb      	strb	r3, [r7, #23]
          break;
 8003a4a:	e056      	b.n	8003afa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	015a      	lsls	r2, r3, #5
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	4413      	add	r3, r2
 8003a56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003a60:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003a64:	d0e7      	beq.n	8003a36 <USB_EPStopXfer+0x82>
 8003a66:	e048      	b.n	8003afa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	015a      	lsls	r2, r3, #5
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	4413      	add	r3, r2
 8003a72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003a7c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003a80:	d13b      	bne.n	8003afa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	015a      	lsls	r2, r3, #5
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	683a      	ldr	r2, [r7, #0]
 8003a94:	7812      	ldrb	r2, [r2, #0]
 8003a96:	0151      	lsls	r1, r2, #5
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	440a      	add	r2, r1
 8003a9c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003aa0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003aa4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	015a      	lsls	r2, r3, #5
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	4413      	add	r3, r2
 8003ab0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	683a      	ldr	r2, [r7, #0]
 8003ab8:	7812      	ldrb	r2, [r2, #0]
 8003aba:	0151      	lsls	r1, r2, #5
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	440a      	add	r2, r1
 8003ac0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003ac4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003ac8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	3301      	adds	r3, #1
 8003ace:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d902      	bls.n	8003ae0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	75fb      	strb	r3, [r7, #23]
          break;
 8003ade:	e00c      	b.n	8003afa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	015a      	lsls	r2, r3, #5
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	4413      	add	r3, r2
 8003aea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003af4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003af8:	d0e7      	beq.n	8003aca <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8003afa:	7dfb      	ldrb	r3, [r7, #23]
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	371c      	adds	r7, #28
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b089      	sub	sp, #36	@ 0x24
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	4611      	mov	r1, r2
 8003b14:	461a      	mov	r2, r3
 8003b16:	460b      	mov	r3, r1
 8003b18:	71fb      	strb	r3, [r7, #7]
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003b26:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d123      	bne.n	8003b76 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003b2e:	88bb      	ldrh	r3, [r7, #4]
 8003b30:	3303      	adds	r3, #3
 8003b32:	089b      	lsrs	r3, r3, #2
 8003b34:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003b36:	2300      	movs	r3, #0
 8003b38:	61bb      	str	r3, [r7, #24]
 8003b3a:	e018      	b.n	8003b6e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003b3c:	79fb      	ldrb	r3, [r7, #7]
 8003b3e:	031a      	lsls	r2, r3, #12
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	4413      	add	r3, r2
 8003b44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b48:	461a      	mov	r2, r3
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	3301      	adds	r3, #1
 8003b54:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	3301      	adds	r3, #1
 8003b5a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	3301      	adds	r3, #1
 8003b60:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	3301      	adds	r3, #1
 8003b66:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	61bb      	str	r3, [r7, #24]
 8003b6e:	69ba      	ldr	r2, [r7, #24]
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d3e2      	bcc.n	8003b3c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3724      	adds	r7, #36	@ 0x24
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b08b      	sub	sp, #44	@ 0x2c
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	4613      	mov	r3, r2
 8003b90:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003b9a:	88fb      	ldrh	r3, [r7, #6]
 8003b9c:	089b      	lsrs	r3, r3, #2
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003ba2:	88fb      	ldrh	r3, [r7, #6]
 8003ba4:	f003 0303 	and.w	r3, r3, #3
 8003ba8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003baa:	2300      	movs	r3, #0
 8003bac:	623b      	str	r3, [r7, #32]
 8003bae:	e014      	b.n	8003bda <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bba:	601a      	str	r2, [r3, #0]
    pDest++;
 8003bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bca:	3301      	adds	r3, #1
 8003bcc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8003bd4:	6a3b      	ldr	r3, [r7, #32]
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	623b      	str	r3, [r7, #32]
 8003bda:	6a3a      	ldr	r2, [r7, #32]
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d3e6      	bcc.n	8003bb0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003be2:	8bfb      	ldrh	r3, [r7, #30]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d01e      	beq.n	8003c26 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003be8:	2300      	movs	r3, #0
 8003bea:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	f107 0310 	add.w	r3, r7, #16
 8003bf8:	6812      	ldr	r2, [r2, #0]
 8003bfa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	6a3b      	ldr	r3, [r7, #32]
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	00db      	lsls	r3, r3, #3
 8003c04:	fa22 f303 	lsr.w	r3, r2, r3
 8003c08:	b2da      	uxtb	r2, r3
 8003c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c0c:	701a      	strb	r2, [r3, #0]
      i++;
 8003c0e:	6a3b      	ldr	r3, [r7, #32]
 8003c10:	3301      	adds	r3, #1
 8003c12:	623b      	str	r3, [r7, #32]
      pDest++;
 8003c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c16:	3301      	adds	r3, #1
 8003c18:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8003c1a:	8bfb      	ldrh	r3, [r7, #30]
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003c20:	8bfb      	ldrh	r3, [r7, #30]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1ea      	bne.n	8003bfc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	372c      	adds	r7, #44	@ 0x2c
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	785b      	ldrb	r3, [r3, #1]
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d12c      	bne.n	8003caa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	015a      	lsls	r2, r3, #5
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	4413      	add	r3, r2
 8003c58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	db12      	blt.n	8003c88 <USB_EPSetStall+0x54>
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d00f      	beq.n	8003c88 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	015a      	lsls	r2, r3, #5
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	4413      	add	r3, r2
 8003c70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68ba      	ldr	r2, [r7, #8]
 8003c78:	0151      	lsls	r1, r2, #5
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	440a      	add	r2, r1
 8003c7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003c82:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003c86:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	015a      	lsls	r2, r3, #5
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	4413      	add	r3, r2
 8003c90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	68ba      	ldr	r2, [r7, #8]
 8003c98:	0151      	lsls	r1, r2, #5
 8003c9a:	68fa      	ldr	r2, [r7, #12]
 8003c9c:	440a      	add	r2, r1
 8003c9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ca2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003ca6:	6013      	str	r3, [r2, #0]
 8003ca8:	e02b      	b.n	8003d02 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	015a      	lsls	r2, r3, #5
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	db12      	blt.n	8003ce2 <USB_EPSetStall+0xae>
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00f      	beq.n	8003ce2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	015a      	lsls	r2, r3, #5
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	4413      	add	r3, r2
 8003cca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68ba      	ldr	r2, [r7, #8]
 8003cd2:	0151      	lsls	r1, r2, #5
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	440a      	add	r2, r1
 8003cd8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003cdc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003ce0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	015a      	lsls	r2, r3, #5
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	4413      	add	r3, r2
 8003cea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68ba      	ldr	r2, [r7, #8]
 8003cf2:	0151      	lsls	r1, r2, #5
 8003cf4:	68fa      	ldr	r2, [r7, #12]
 8003cf6:	440a      	add	r2, r1
 8003cf8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003cfc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003d00:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003d02:	2300      	movs	r3, #0
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3714      	adds	r7, #20
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b085      	sub	sp, #20
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	785b      	ldrb	r3, [r3, #1]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d128      	bne.n	8003d7e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	015a      	lsls	r2, r3, #5
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	4413      	add	r3, r2
 8003d34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	68ba      	ldr	r2, [r7, #8]
 8003d3c:	0151      	lsls	r1, r2, #5
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	440a      	add	r2, r1
 8003d42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003d46:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003d4a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	791b      	ldrb	r3, [r3, #4]
 8003d50:	2b03      	cmp	r3, #3
 8003d52:	d003      	beq.n	8003d5c <USB_EPClearStall+0x4c>
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	791b      	ldrb	r3, [r3, #4]
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d138      	bne.n	8003dce <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	015a      	lsls	r2, r3, #5
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	4413      	add	r3, r2
 8003d64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68ba      	ldr	r2, [r7, #8]
 8003d6c:	0151      	lsls	r1, r2, #5
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	440a      	add	r2, r1
 8003d72:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003d76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d7a:	6013      	str	r3, [r2, #0]
 8003d7c:	e027      	b.n	8003dce <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	015a      	lsls	r2, r3, #5
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	4413      	add	r3, r2
 8003d86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68ba      	ldr	r2, [r7, #8]
 8003d8e:	0151      	lsls	r1, r2, #5
 8003d90:	68fa      	ldr	r2, [r7, #12]
 8003d92:	440a      	add	r2, r1
 8003d94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d98:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003d9c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	791b      	ldrb	r3, [r3, #4]
 8003da2:	2b03      	cmp	r3, #3
 8003da4:	d003      	beq.n	8003dae <USB_EPClearStall+0x9e>
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	791b      	ldrb	r3, [r3, #4]
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d10f      	bne.n	8003dce <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	015a      	lsls	r2, r3, #5
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	4413      	add	r3, r2
 8003db6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68ba      	ldr	r2, [r7, #8]
 8003dbe:	0151      	lsls	r1, r2, #5
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	440a      	add	r2, r1
 8003dc4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003dc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dcc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3714      	adds	r7, #20
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b085      	sub	sp, #20
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	460b      	mov	r3, r1
 8003de6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003dfa:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003dfe:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	78fb      	ldrb	r3, [r7, #3]
 8003e0a:	011b      	lsls	r3, r3, #4
 8003e0c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8003e10:	68f9      	ldr	r1, [r7, #12]
 8003e12:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003e16:	4313      	orrs	r3, r2
 8003e18:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8003e1a:	2300      	movs	r3, #0
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3714      	adds	r7, #20
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b085      	sub	sp, #20
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003e42:	f023 0303 	bic.w	r3, r3, #3
 8003e46:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e56:	f023 0302 	bic.w	r3, r3, #2
 8003e5a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3714      	adds	r7, #20
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr

08003e6a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003e6a:	b480      	push	{r7}
 8003e6c:	b085      	sub	sp, #20
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68fa      	ldr	r2, [r7, #12]
 8003e80:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003e84:	f023 0303 	bic.w	r3, r3, #3
 8003e88:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e98:	f043 0302 	orr.w	r3, r3, #2
 8003e9c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003e9e:	2300      	movs	r3, #0
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3714      	adds	r7, #20
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b085      	sub	sp, #20
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	695b      	ldr	r3, [r3, #20]
 8003eb8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3714      	adds	r7, #20
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr

08003ed2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8003ed2:	b480      	push	{r7}
 8003ed4:	b085      	sub	sp, #20
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ee4:	699b      	ldr	r3, [r3, #24]
 8003ee6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003eee:	69db      	ldr	r3, [r3, #28]
 8003ef0:	68ba      	ldr	r2, [r7, #8]
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	0c1b      	lsrs	r3, r3, #16
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3714      	adds	r7, #20
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr

08003f06 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8003f06:	b480      	push	{r7}
 8003f08:	b085      	sub	sp, #20
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f22:	69db      	ldr	r3, [r3, #28]
 8003f24:	68ba      	ldr	r2, [r7, #8]
 8003f26:	4013      	ands	r3, r2
 8003f28:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	b29b      	uxth	r3, r3
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3714      	adds	r7, #20
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr

08003f3a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003f3a:	b480      	push	{r7}
 8003f3c:	b085      	sub	sp, #20
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
 8003f42:	460b      	mov	r3, r1
 8003f44:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8003f4a:	78fb      	ldrb	r3, [r7, #3]
 8003f4c:	015a      	lsls	r2, r3, #5
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	4413      	add	r3, r2
 8003f52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	68ba      	ldr	r2, [r7, #8]
 8003f64:	4013      	ands	r3, r2
 8003f66:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003f68:	68bb      	ldr	r3, [r7, #8]
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3714      	adds	r7, #20
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr

08003f76 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003f76:	b480      	push	{r7}
 8003f78:	b087      	sub	sp, #28
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
 8003f7e:	460b      	mov	r3, r1
 8003f80:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f8c:	691b      	ldr	r3, [r3, #16]
 8003f8e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f98:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8003f9a:	78fb      	ldrb	r3, [r7, #3]
 8003f9c:	f003 030f 	and.w	r3, r3, #15
 8003fa0:	68fa      	ldr	r2, [r7, #12]
 8003fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8003fa6:	01db      	lsls	r3, r3, #7
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	693a      	ldr	r2, [r7, #16]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8003fb0:	78fb      	ldrb	r3, [r7, #3]
 8003fb2:	015a      	lsls	r2, r3, #5
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	693a      	ldr	r2, [r7, #16]
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003fc4:	68bb      	ldr	r3, [r7, #8]
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	371c      	adds	r7, #28
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr

08003fd2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8003fd2:	b480      	push	{r7}
 8003fd4:	b083      	sub	sp, #12
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	f003 0301 	and.w	r3, r3, #1
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	370c      	adds	r7, #12
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr

08003fee <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8003fee:	b480      	push	{r7}
 8003ff0:	b085      	sub	sp, #20
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004008:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800400c:	f023 0307 	bic.w	r3, r3, #7
 8004010:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004020:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004024:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004026:	2300      	movs	r3, #0
}
 8004028:	4618      	mov	r0, r3
 800402a:	3714      	adds	r7, #20
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8004034:	b480      	push	{r7}
 8004036:	b087      	sub	sp, #28
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	460b      	mov	r3, r1
 800403e:	607a      	str	r2, [r7, #4]
 8004040:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	333c      	adds	r3, #60	@ 0x3c
 800404a:	3304      	adds	r3, #4
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	4a26      	ldr	r2, [pc, #152]	@ (80040ec <USB_EP0_OutStart+0xb8>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d90a      	bls.n	800406e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004064:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004068:	d101      	bne.n	800406e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800406a:	2300      	movs	r3, #0
 800406c:	e037      	b.n	80040de <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004074:	461a      	mov	r2, r3
 8004076:	2300      	movs	r3, #0
 8004078:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	697a      	ldr	r2, [r7, #20]
 8004084:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004088:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800408c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	697a      	ldr	r2, [r7, #20]
 8004098:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800409c:	f043 0318 	orr.w	r3, r3, #24
 80040a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	697a      	ldr	r2, [r7, #20]
 80040ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80040b0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80040b4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80040b6:	7afb      	ldrb	r3, [r7, #11]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d10f      	bne.n	80040dc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040c2:	461a      	mov	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	697a      	ldr	r2, [r7, #20]
 80040d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80040d6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80040da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	371c      	adds	r7, #28
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	4f54300a 	.word	0x4f54300a

080040f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b085      	sub	sp, #20
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80040f8:	2300      	movs	r3, #0
 80040fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	3301      	adds	r3, #1
 8004100:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004108:	d901      	bls.n	800410e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e01b      	b.n	8004146 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	2b00      	cmp	r3, #0
 8004114:	daf2      	bge.n	80040fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004116:	2300      	movs	r3, #0
 8004118:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	f043 0201 	orr.w	r2, r3, #1
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	3301      	adds	r3, #1
 800412a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004132:	d901      	bls.n	8004138 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004134:	2303      	movs	r3, #3
 8004136:	e006      	b.n	8004146 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	f003 0301 	and.w	r3, r3, #1
 8004140:	2b01      	cmp	r3, #1
 8004142:	d0f0      	beq.n	8004126 <USB_CoreReset+0x36>

  return HAL_OK;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	3714      	adds	r7, #20
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
	...

08004154 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	460b      	mov	r3, r1
 800415e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004160:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8004164:	f002 fc2e 	bl	80069c4 <USBD_static_malloc>
 8004168:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d109      	bne.n	8004184 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	32b0      	adds	r2, #176	@ 0xb0
 800417a:	2100      	movs	r1, #0
 800417c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004180:	2302      	movs	r3, #2
 8004182:	e0d4      	b.n	800432e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004184:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8004188:	2100      	movs	r1, #0
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f002 fc5e 	bl	8006a4c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	32b0      	adds	r2, #176	@ 0xb0
 800419a:	68f9      	ldr	r1, [r7, #12]
 800419c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	32b0      	adds	r2, #176	@ 0xb0
 80041aa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	7c1b      	ldrb	r3, [r3, #16]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d138      	bne.n	800422e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80041bc:	4b5e      	ldr	r3, [pc, #376]	@ (8004338 <USBD_CDC_Init+0x1e4>)
 80041be:	7819      	ldrb	r1, [r3, #0]
 80041c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80041c4:	2202      	movs	r2, #2
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f002 fad9 	bl	800677e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80041cc:	4b5a      	ldr	r3, [pc, #360]	@ (8004338 <USBD_CDC_Init+0x1e4>)
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	f003 020f 	and.w	r2, r3, #15
 80041d4:	6879      	ldr	r1, [r7, #4]
 80041d6:	4613      	mov	r3, r2
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	4413      	add	r3, r2
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	440b      	add	r3, r1
 80041e0:	3324      	adds	r3, #36	@ 0x24
 80041e2:	2201      	movs	r2, #1
 80041e4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80041e6:	4b55      	ldr	r3, [pc, #340]	@ (800433c <USBD_CDC_Init+0x1e8>)
 80041e8:	7819      	ldrb	r1, [r3, #0]
 80041ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80041ee:	2202      	movs	r2, #2
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f002 fac4 	bl	800677e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80041f6:	4b51      	ldr	r3, [pc, #324]	@ (800433c <USBD_CDC_Init+0x1e8>)
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	f003 020f 	and.w	r2, r3, #15
 80041fe:	6879      	ldr	r1, [r7, #4]
 8004200:	4613      	mov	r3, r2
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	4413      	add	r3, r2
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	440b      	add	r3, r1
 800420a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800420e:	2201      	movs	r2, #1
 8004210:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004212:	4b4b      	ldr	r3, [pc, #300]	@ (8004340 <USBD_CDC_Init+0x1ec>)
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	f003 020f 	and.w	r2, r3, #15
 800421a:	6879      	ldr	r1, [r7, #4]
 800421c:	4613      	mov	r3, r2
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	4413      	add	r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	440b      	add	r3, r1
 8004226:	3326      	adds	r3, #38	@ 0x26
 8004228:	2210      	movs	r2, #16
 800422a:	801a      	strh	r2, [r3, #0]
 800422c:	e035      	b.n	800429a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800422e:	4b42      	ldr	r3, [pc, #264]	@ (8004338 <USBD_CDC_Init+0x1e4>)
 8004230:	7819      	ldrb	r1, [r3, #0]
 8004232:	2340      	movs	r3, #64	@ 0x40
 8004234:	2202      	movs	r2, #2
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f002 faa1 	bl	800677e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800423c:	4b3e      	ldr	r3, [pc, #248]	@ (8004338 <USBD_CDC_Init+0x1e4>)
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	f003 020f 	and.w	r2, r3, #15
 8004244:	6879      	ldr	r1, [r7, #4]
 8004246:	4613      	mov	r3, r2
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	4413      	add	r3, r2
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	440b      	add	r3, r1
 8004250:	3324      	adds	r3, #36	@ 0x24
 8004252:	2201      	movs	r2, #1
 8004254:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004256:	4b39      	ldr	r3, [pc, #228]	@ (800433c <USBD_CDC_Init+0x1e8>)
 8004258:	7819      	ldrb	r1, [r3, #0]
 800425a:	2340      	movs	r3, #64	@ 0x40
 800425c:	2202      	movs	r2, #2
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f002 fa8d 	bl	800677e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004264:	4b35      	ldr	r3, [pc, #212]	@ (800433c <USBD_CDC_Init+0x1e8>)
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	f003 020f 	and.w	r2, r3, #15
 800426c:	6879      	ldr	r1, [r7, #4]
 800426e:	4613      	mov	r3, r2
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	4413      	add	r3, r2
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	440b      	add	r3, r1
 8004278:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800427c:	2201      	movs	r2, #1
 800427e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004280:	4b2f      	ldr	r3, [pc, #188]	@ (8004340 <USBD_CDC_Init+0x1ec>)
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	f003 020f 	and.w	r2, r3, #15
 8004288:	6879      	ldr	r1, [r7, #4]
 800428a:	4613      	mov	r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	4413      	add	r3, r2
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	440b      	add	r3, r1
 8004294:	3326      	adds	r3, #38	@ 0x26
 8004296:	2210      	movs	r2, #16
 8004298:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800429a:	4b29      	ldr	r3, [pc, #164]	@ (8004340 <USBD_CDC_Init+0x1ec>)
 800429c:	7819      	ldrb	r1, [r3, #0]
 800429e:	2308      	movs	r3, #8
 80042a0:	2203      	movs	r2, #3
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f002 fa6b 	bl	800677e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80042a8:	4b25      	ldr	r3, [pc, #148]	@ (8004340 <USBD_CDC_Init+0x1ec>)
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	f003 020f 	and.w	r2, r3, #15
 80042b0:	6879      	ldr	r1, [r7, #4]
 80042b2:	4613      	mov	r3, r2
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	4413      	add	r3, r2
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	440b      	add	r3, r1
 80042bc:	3324      	adds	r3, #36	@ 0x24
 80042be:	2201      	movs	r2, #1
 80042c0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	33b0      	adds	r3, #176	@ 0xb0
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	4413      	add	r3, r2
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d101      	bne.n	80042fc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80042f8:	2302      	movs	r3, #2
 80042fa:	e018      	b.n	800432e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	7c1b      	ldrb	r3, [r3, #16]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d10a      	bne.n	800431a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004304:	4b0d      	ldr	r3, [pc, #52]	@ (800433c <USBD_CDC_Init+0x1e8>)
 8004306:	7819      	ldrb	r1, [r3, #0]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800430e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f002 fb22 	bl	800695c <USBD_LL_PrepareReceive>
 8004318:	e008      	b.n	800432c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800431a:	4b08      	ldr	r3, [pc, #32]	@ (800433c <USBD_CDC_Init+0x1e8>)
 800431c:	7819      	ldrb	r1, [r3, #0]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004324:	2340      	movs	r3, #64	@ 0x40
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f002 fb18 	bl	800695c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	20000093 	.word	0x20000093
 800433c:	20000094 	.word	0x20000094
 8004340:	20000095 	.word	0x20000095

08004344 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	460b      	mov	r3, r1
 800434e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8004350:	4b3a      	ldr	r3, [pc, #232]	@ (800443c <USBD_CDC_DeInit+0xf8>)
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	4619      	mov	r1, r3
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f002 fa37 	bl	80067ca <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800435c:	4b37      	ldr	r3, [pc, #220]	@ (800443c <USBD_CDC_DeInit+0xf8>)
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	f003 020f 	and.w	r2, r3, #15
 8004364:	6879      	ldr	r1, [r7, #4]
 8004366:	4613      	mov	r3, r2
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	4413      	add	r3, r2
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	440b      	add	r3, r1
 8004370:	3324      	adds	r3, #36	@ 0x24
 8004372:	2200      	movs	r2, #0
 8004374:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8004376:	4b32      	ldr	r3, [pc, #200]	@ (8004440 <USBD_CDC_DeInit+0xfc>)
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	4619      	mov	r1, r3
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f002 fa24 	bl	80067ca <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8004382:	4b2f      	ldr	r3, [pc, #188]	@ (8004440 <USBD_CDC_DeInit+0xfc>)
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	f003 020f 	and.w	r2, r3, #15
 800438a:	6879      	ldr	r1, [r7, #4]
 800438c:	4613      	mov	r3, r2
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	4413      	add	r3, r2
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	440b      	add	r3, r1
 8004396:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800439a:	2200      	movs	r2, #0
 800439c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800439e:	4b29      	ldr	r3, [pc, #164]	@ (8004444 <USBD_CDC_DeInit+0x100>)
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	4619      	mov	r1, r3
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f002 fa10 	bl	80067ca <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80043aa:	4b26      	ldr	r3, [pc, #152]	@ (8004444 <USBD_CDC_DeInit+0x100>)
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	f003 020f 	and.w	r2, r3, #15
 80043b2:	6879      	ldr	r1, [r7, #4]
 80043b4:	4613      	mov	r3, r2
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	4413      	add	r3, r2
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	440b      	add	r3, r1
 80043be:	3324      	adds	r3, #36	@ 0x24
 80043c0:	2200      	movs	r2, #0
 80043c2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80043c4:	4b1f      	ldr	r3, [pc, #124]	@ (8004444 <USBD_CDC_DeInit+0x100>)
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	f003 020f 	and.w	r2, r3, #15
 80043cc:	6879      	ldr	r1, [r7, #4]
 80043ce:	4613      	mov	r3, r2
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	4413      	add	r3, r2
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	440b      	add	r3, r1
 80043d8:	3326      	adds	r3, #38	@ 0x26
 80043da:	2200      	movs	r2, #0
 80043dc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	32b0      	adds	r2, #176	@ 0xb0
 80043e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d01f      	beq.n	8004430 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	33b0      	adds	r3, #176	@ 0xb0
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	4413      	add	r3, r2
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	32b0      	adds	r2, #176	@ 0xb0
 800440e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004412:	4618      	mov	r0, r3
 8004414:	f002 fae4 	bl	80069e0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	32b0      	adds	r2, #176	@ 0xb0
 8004422:	2100      	movs	r1, #0
 8004424:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3708      	adds	r7, #8
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	20000093 	.word	0x20000093
 8004440:	20000094 	.word	0x20000094
 8004444:	20000095 	.word	0x20000095

08004448 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b086      	sub	sp, #24
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	32b0      	adds	r2, #176	@ 0xb0
 800445c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004460:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004462:	2300      	movs	r3, #0
 8004464:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004466:	2300      	movs	r3, #0
 8004468:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800446a:	2300      	movs	r3, #0
 800446c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d101      	bne.n	8004478 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8004474:	2303      	movs	r3, #3
 8004476:	e0bf      	b.n	80045f8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004480:	2b00      	cmp	r3, #0
 8004482:	d050      	beq.n	8004526 <USBD_CDC_Setup+0xde>
 8004484:	2b20      	cmp	r3, #32
 8004486:	f040 80af 	bne.w	80045e8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	88db      	ldrh	r3, [r3, #6]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d03a      	beq.n	8004508 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	b25b      	sxtb	r3, r3
 8004498:	2b00      	cmp	r3, #0
 800449a:	da1b      	bge.n	80044d4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	33b0      	adds	r3, #176	@ 0xb0
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	4413      	add	r3, r2
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	683a      	ldr	r2, [r7, #0]
 80044b0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80044b2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80044b4:	683a      	ldr	r2, [r7, #0]
 80044b6:	88d2      	ldrh	r2, [r2, #6]
 80044b8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	88db      	ldrh	r3, [r3, #6]
 80044be:	2b07      	cmp	r3, #7
 80044c0:	bf28      	it	cs
 80044c2:	2307      	movcs	r3, #7
 80044c4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	89fa      	ldrh	r2, [r7, #14]
 80044ca:	4619      	mov	r1, r3
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f001 fd53 	bl	8005f78 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80044d2:	e090      	b.n	80045f6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	785a      	ldrb	r2, [r3, #1]
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	88db      	ldrh	r3, [r3, #6]
 80044e2:	2b3f      	cmp	r3, #63	@ 0x3f
 80044e4:	d803      	bhi.n	80044ee <USBD_CDC_Setup+0xa6>
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	88db      	ldrh	r3, [r3, #6]
 80044ea:	b2da      	uxtb	r2, r3
 80044ec:	e000      	b.n	80044f0 <USBD_CDC_Setup+0xa8>
 80044ee:	2240      	movs	r2, #64	@ 0x40
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80044f6:	6939      	ldr	r1, [r7, #16]
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80044fe:	461a      	mov	r2, r3
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f001 fd65 	bl	8005fd0 <USBD_CtlPrepareRx>
      break;
 8004506:	e076      	b.n	80045f6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	33b0      	adds	r3, #176	@ 0xb0
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	4413      	add	r3, r2
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	683a      	ldr	r2, [r7, #0]
 800451c:	7850      	ldrb	r0, [r2, #1]
 800451e:	2200      	movs	r2, #0
 8004520:	6839      	ldr	r1, [r7, #0]
 8004522:	4798      	blx	r3
      break;
 8004524:	e067      	b.n	80045f6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	785b      	ldrb	r3, [r3, #1]
 800452a:	2b0b      	cmp	r3, #11
 800452c:	d851      	bhi.n	80045d2 <USBD_CDC_Setup+0x18a>
 800452e:	a201      	add	r2, pc, #4	@ (adr r2, 8004534 <USBD_CDC_Setup+0xec>)
 8004530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004534:	08004565 	.word	0x08004565
 8004538:	080045e1 	.word	0x080045e1
 800453c:	080045d3 	.word	0x080045d3
 8004540:	080045d3 	.word	0x080045d3
 8004544:	080045d3 	.word	0x080045d3
 8004548:	080045d3 	.word	0x080045d3
 800454c:	080045d3 	.word	0x080045d3
 8004550:	080045d3 	.word	0x080045d3
 8004554:	080045d3 	.word	0x080045d3
 8004558:	080045d3 	.word	0x080045d3
 800455c:	0800458f 	.word	0x0800458f
 8004560:	080045b9 	.word	0x080045b9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800456a:	b2db      	uxtb	r3, r3
 800456c:	2b03      	cmp	r3, #3
 800456e:	d107      	bne.n	8004580 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004570:	f107 030a 	add.w	r3, r7, #10
 8004574:	2202      	movs	r2, #2
 8004576:	4619      	mov	r1, r3
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f001 fcfd 	bl	8005f78 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800457e:	e032      	b.n	80045e6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004580:	6839      	ldr	r1, [r7, #0]
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f001 fc7b 	bl	8005e7e <USBD_CtlError>
            ret = USBD_FAIL;
 8004588:	2303      	movs	r3, #3
 800458a:	75fb      	strb	r3, [r7, #23]
          break;
 800458c:	e02b      	b.n	80045e6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004594:	b2db      	uxtb	r3, r3
 8004596:	2b03      	cmp	r3, #3
 8004598:	d107      	bne.n	80045aa <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800459a:	f107 030d 	add.w	r3, r7, #13
 800459e:	2201      	movs	r2, #1
 80045a0:	4619      	mov	r1, r3
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f001 fce8 	bl	8005f78 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80045a8:	e01d      	b.n	80045e6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80045aa:	6839      	ldr	r1, [r7, #0]
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f001 fc66 	bl	8005e7e <USBD_CtlError>
            ret = USBD_FAIL;
 80045b2:	2303      	movs	r3, #3
 80045b4:	75fb      	strb	r3, [r7, #23]
          break;
 80045b6:	e016      	b.n	80045e6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	2b03      	cmp	r3, #3
 80045c2:	d00f      	beq.n	80045e4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80045c4:	6839      	ldr	r1, [r7, #0]
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f001 fc59 	bl	8005e7e <USBD_CtlError>
            ret = USBD_FAIL;
 80045cc:	2303      	movs	r3, #3
 80045ce:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80045d0:	e008      	b.n	80045e4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80045d2:	6839      	ldr	r1, [r7, #0]
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f001 fc52 	bl	8005e7e <USBD_CtlError>
          ret = USBD_FAIL;
 80045da:	2303      	movs	r3, #3
 80045dc:	75fb      	strb	r3, [r7, #23]
          break;
 80045de:	e002      	b.n	80045e6 <USBD_CDC_Setup+0x19e>
          break;
 80045e0:	bf00      	nop
 80045e2:	e008      	b.n	80045f6 <USBD_CDC_Setup+0x1ae>
          break;
 80045e4:	bf00      	nop
      }
      break;
 80045e6:	e006      	b.n	80045f6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80045e8:	6839      	ldr	r1, [r7, #0]
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f001 fc47 	bl	8005e7e <USBD_CtlError>
      ret = USBD_FAIL;
 80045f0:	2303      	movs	r3, #3
 80045f2:	75fb      	strb	r3, [r7, #23]
      break;
 80045f4:	bf00      	nop
  }

  return (uint8_t)ret;
 80045f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3718      	adds	r7, #24
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	460b      	mov	r3, r1
 800460a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8004612:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	32b0      	adds	r2, #176	@ 0xb0
 800461e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d101      	bne.n	800462a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8004626:	2303      	movs	r3, #3
 8004628:	e065      	b.n	80046f6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	32b0      	adds	r2, #176	@ 0xb0
 8004634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004638:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800463a:	78fb      	ldrb	r3, [r7, #3]
 800463c:	f003 020f 	and.w	r2, r3, #15
 8004640:	6879      	ldr	r1, [r7, #4]
 8004642:	4613      	mov	r3, r2
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	4413      	add	r3, r2
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	440b      	add	r3, r1
 800464c:	3318      	adds	r3, #24
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d02f      	beq.n	80046b4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8004654:	78fb      	ldrb	r3, [r7, #3]
 8004656:	f003 020f 	and.w	r2, r3, #15
 800465a:	6879      	ldr	r1, [r7, #4]
 800465c:	4613      	mov	r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	4413      	add	r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	440b      	add	r3, r1
 8004666:	3318      	adds	r3, #24
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	78fb      	ldrb	r3, [r7, #3]
 800466c:	f003 010f 	and.w	r1, r3, #15
 8004670:	68f8      	ldr	r0, [r7, #12]
 8004672:	460b      	mov	r3, r1
 8004674:	00db      	lsls	r3, r3, #3
 8004676:	440b      	add	r3, r1
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	4403      	add	r3, r0
 800467c:	331c      	adds	r3, #28
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	fbb2 f1f3 	udiv	r1, r2, r3
 8004684:	fb01 f303 	mul.w	r3, r1, r3
 8004688:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800468a:	2b00      	cmp	r3, #0
 800468c:	d112      	bne.n	80046b4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800468e:	78fb      	ldrb	r3, [r7, #3]
 8004690:	f003 020f 	and.w	r2, r3, #15
 8004694:	6879      	ldr	r1, [r7, #4]
 8004696:	4613      	mov	r3, r2
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	4413      	add	r3, r2
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	440b      	add	r3, r1
 80046a0:	3318      	adds	r3, #24
 80046a2:	2200      	movs	r2, #0
 80046a4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80046a6:	78f9      	ldrb	r1, [r7, #3]
 80046a8:	2300      	movs	r3, #0
 80046aa:	2200      	movs	r2, #0
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f002 f934 	bl	800691a <USBD_LL_Transmit>
 80046b2:	e01f      	b.n	80046f4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	33b0      	adds	r3, #176	@ 0xb0
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	4413      	add	r3, r2
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d010      	beq.n	80046f4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	33b0      	adds	r3, #176	@ 0xb0
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	4413      	add	r3, r2
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	68ba      	ldr	r2, [r7, #8]
 80046e6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80046ea:	68ba      	ldr	r2, [r7, #8]
 80046ec:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80046f0:	78fa      	ldrb	r2, [r7, #3]
 80046f2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3710      	adds	r7, #16
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}

080046fe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80046fe:	b580      	push	{r7, lr}
 8004700:	b084      	sub	sp, #16
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
 8004706:	460b      	mov	r3, r1
 8004708:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	32b0      	adds	r2, #176	@ 0xb0
 8004714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004718:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	32b0      	adds	r2, #176	@ 0xb0
 8004724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d101      	bne.n	8004730 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800472c:	2303      	movs	r3, #3
 800472e:	e01a      	b.n	8004766 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004730:	78fb      	ldrb	r3, [r7, #3]
 8004732:	4619      	mov	r1, r3
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f002 f932 	bl	800699e <USBD_LL_GetRxDataSize>
 800473a:	4602      	mov	r2, r0
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	33b0      	adds	r3, #176	@ 0xb0
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	4413      	add	r3, r2
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800475a:	68fa      	ldr	r2, [r7, #12]
 800475c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8004760:	4611      	mov	r1, r2
 8004762:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3710      	adds	r7, #16
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}

0800476e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800476e:	b580      	push	{r7, lr}
 8004770:	b084      	sub	sp, #16
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	32b0      	adds	r2, #176	@ 0xb0
 8004780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004784:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d101      	bne.n	8004790 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800478c:	2303      	movs	r3, #3
 800478e:	e024      	b.n	80047da <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	33b0      	adds	r3, #176	@ 0xb0
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	4413      	add	r3, r2
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d019      	beq.n	80047d8 <USBD_CDC_EP0_RxReady+0x6a>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80047aa:	2bff      	cmp	r3, #255	@ 0xff
 80047ac:	d014      	beq.n	80047d8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	33b0      	adds	r3, #176	@ 0xb0
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	4413      	add	r3, r2
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80047c6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80047c8:	68fa      	ldr	r2, [r7, #12]
 80047ca:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80047ce:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	22ff      	movs	r2, #255	@ 0xff
 80047d4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3710      	adds	r7, #16
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
	...

080047e4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b086      	sub	sp, #24
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80047ec:	2182      	movs	r1, #130	@ 0x82
 80047ee:	4818      	ldr	r0, [pc, #96]	@ (8004850 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80047f0:	f000 fd0f 	bl	8005212 <USBD_GetEpDesc>
 80047f4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80047f6:	2101      	movs	r1, #1
 80047f8:	4815      	ldr	r0, [pc, #84]	@ (8004850 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80047fa:	f000 fd0a 	bl	8005212 <USBD_GetEpDesc>
 80047fe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004800:	2181      	movs	r1, #129	@ 0x81
 8004802:	4813      	ldr	r0, [pc, #76]	@ (8004850 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004804:	f000 fd05 	bl	8005212 <USBD_GetEpDesc>
 8004808:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d002      	beq.n	8004816 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	2210      	movs	r2, #16
 8004814:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d006      	beq.n	800482a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	2200      	movs	r2, #0
 8004820:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004824:	711a      	strb	r2, [r3, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d006      	beq.n	800483e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2200      	movs	r2, #0
 8004834:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004838:	711a      	strb	r2, [r3, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2243      	movs	r2, #67	@ 0x43
 8004842:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004844:	4b02      	ldr	r3, [pc, #8]	@ (8004850 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8004846:	4618      	mov	r0, r3
 8004848:	3718      	adds	r7, #24
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	20000050 	.word	0x20000050

08004854 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b086      	sub	sp, #24
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800485c:	2182      	movs	r1, #130	@ 0x82
 800485e:	4818      	ldr	r0, [pc, #96]	@ (80048c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004860:	f000 fcd7 	bl	8005212 <USBD_GetEpDesc>
 8004864:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004866:	2101      	movs	r1, #1
 8004868:	4815      	ldr	r0, [pc, #84]	@ (80048c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800486a:	f000 fcd2 	bl	8005212 <USBD_GetEpDesc>
 800486e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004870:	2181      	movs	r1, #129	@ 0x81
 8004872:	4813      	ldr	r0, [pc, #76]	@ (80048c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004874:	f000 fccd 	bl	8005212 <USBD_GetEpDesc>
 8004878:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d002      	beq.n	8004886 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	2210      	movs	r2, #16
 8004884:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d006      	beq.n	800489a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	2200      	movs	r2, #0
 8004890:	711a      	strb	r2, [r3, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	f042 0202 	orr.w	r2, r2, #2
 8004898:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d006      	beq.n	80048ae <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	711a      	strb	r2, [r3, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f042 0202 	orr.w	r2, r2, #2
 80048ac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2243      	movs	r2, #67	@ 0x43
 80048b2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80048b4:	4b02      	ldr	r3, [pc, #8]	@ (80048c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3718      	adds	r7, #24
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	20000050 	.word	0x20000050

080048c4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b086      	sub	sp, #24
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80048cc:	2182      	movs	r1, #130	@ 0x82
 80048ce:	4818      	ldr	r0, [pc, #96]	@ (8004930 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80048d0:	f000 fc9f 	bl	8005212 <USBD_GetEpDesc>
 80048d4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80048d6:	2101      	movs	r1, #1
 80048d8:	4815      	ldr	r0, [pc, #84]	@ (8004930 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80048da:	f000 fc9a 	bl	8005212 <USBD_GetEpDesc>
 80048de:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80048e0:	2181      	movs	r1, #129	@ 0x81
 80048e2:	4813      	ldr	r0, [pc, #76]	@ (8004930 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80048e4:	f000 fc95 	bl	8005212 <USBD_GetEpDesc>
 80048e8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d002      	beq.n	80048f6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	2210      	movs	r2, #16
 80048f4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d006      	beq.n	800490a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	2200      	movs	r2, #0
 8004900:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004904:	711a      	strb	r2, [r3, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d006      	beq.n	800491e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2200      	movs	r2, #0
 8004914:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004918:	711a      	strb	r2, [r3, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2243      	movs	r2, #67	@ 0x43
 8004922:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004924:	4b02      	ldr	r3, [pc, #8]	@ (8004930 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8004926:	4618      	mov	r0, r3
 8004928:	3718      	adds	r7, #24
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	20000050 	.word	0x20000050

08004934 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	220a      	movs	r2, #10
 8004940:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004942:	4b03      	ldr	r3, [pc, #12]	@ (8004950 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004944:	4618      	mov	r0, r3
 8004946:	370c      	adds	r7, #12
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr
 8004950:	2000000c 	.word	0x2000000c

08004954 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d101      	bne.n	8004968 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004964:	2303      	movs	r3, #3
 8004966:	e009      	b.n	800497c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	33b0      	adds	r3, #176	@ 0xb0
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	4413      	add	r3, r2
 8004976:	683a      	ldr	r2, [r7, #0]
 8004978:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004988:	b480      	push	{r7}
 800498a:	b087      	sub	sp, #28
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	32b0      	adds	r2, #176	@ 0xb0
 800499e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049a2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d101      	bne.n	80049ae <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e008      	b.n	80049c0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	68ba      	ldr	r2, [r7, #8]
 80049b2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80049be:	2300      	movs	r3, #0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	371c      	adds	r7, #28
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b085      	sub	sp, #20
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	32b0      	adds	r2, #176	@ 0xb0
 80049e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049e4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d101      	bne.n	80049f0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80049ec:	2303      	movs	r3, #3
 80049ee:	e004      	b.n	80049fa <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	683a      	ldr	r2, [r7, #0]
 80049f4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3714      	adds	r7, #20
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
	...

08004a08 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	32b0      	adds	r2, #176	@ 0xb0
 8004a1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a1e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	32b0      	adds	r2, #176	@ 0xb0
 8004a2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d101      	bne.n	8004a36 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e018      	b.n	8004a68 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	7c1b      	ldrb	r3, [r3, #16]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d10a      	bne.n	8004a54 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004a3e:	4b0c      	ldr	r3, [pc, #48]	@ (8004a70 <USBD_CDC_ReceivePacket+0x68>)
 8004a40:	7819      	ldrb	r1, [r3, #0]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004a48:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f001 ff85 	bl	800695c <USBD_LL_PrepareReceive>
 8004a52:	e008      	b.n	8004a66 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004a54:	4b06      	ldr	r3, [pc, #24]	@ (8004a70 <USBD_CDC_ReceivePacket+0x68>)
 8004a56:	7819      	ldrb	r1, [r3, #0]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004a5e:	2340      	movs	r3, #64	@ 0x40
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f001 ff7b 	bl	800695c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004a66:	2300      	movs	r3, #0
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3710      	adds	r7, #16
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	20000094 	.word	0x20000094

08004a74 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b086      	sub	sp, #24
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	60b9      	str	r1, [r7, #8]
 8004a7e:	4613      	mov	r3, r2
 8004a80:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d101      	bne.n	8004a8c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e01f      	b.n	8004acc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d003      	beq.n	8004ab2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	68ba      	ldr	r2, [r7, #8]
 8004aae:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	79fa      	ldrb	r2, [r7, #7]
 8004abe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004ac0:	68f8      	ldr	r0, [r7, #12]
 8004ac2:	f001 fdf5 	bl	80066b0 <USBD_LL_Init>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004aca:	7dfb      	ldrb	r3, [r7, #23]
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3718      	adds	r7, #24
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d101      	bne.n	8004aec <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e025      	b.n	8004b38 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	683a      	ldr	r2, [r7, #0]
 8004af0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	32ae      	adds	r2, #174	@ 0xae
 8004afe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d00f      	beq.n	8004b28 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	32ae      	adds	r2, #174	@ 0xae
 8004b12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b18:	f107 020e 	add.w	r2, r7, #14
 8004b1c:	4610      	mov	r0, r2
 8004b1e:	4798      	blx	r3
 8004b20:	4602      	mov	r2, r0
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8004b2e:	1c5a      	adds	r2, r3, #1
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3710      	adds	r7, #16
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f001 fdfd 	bl	8006748 <USBD_LL_Start>
 8004b4e:	4603      	mov	r3, r0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3708      	adds	r7, #8
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004b60:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	370c      	adds	r7, #12
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr

08004b6e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004b6e:	b580      	push	{r7, lr}
 8004b70:	b084      	sub	sp, #16
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
 8004b76:	460b      	mov	r3, r1
 8004b78:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d009      	beq.n	8004b9c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	78fa      	ldrb	r2, [r7, #3]
 8004b92:	4611      	mov	r1, r2
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	4798      	blx	r3
 8004b98:	4603      	mov	r3, r0
 8004b9a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3710      	adds	r7, #16
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}

08004ba6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004ba6:	b580      	push	{r7, lr}
 8004ba8:	b084      	sub	sp, #16
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
 8004bae:	460b      	mov	r3, r1
 8004bb0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	78fa      	ldrb	r2, [r7, #3]
 8004bc0:	4611      	mov	r1, r2
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	4798      	blx	r3
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d001      	beq.n	8004bd0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3710      	adds	r7, #16
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}

08004bda <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004bda:	b580      	push	{r7, lr}
 8004bdc:	b084      	sub	sp, #16
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
 8004be2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004bea:	6839      	ldr	r1, [r7, #0]
 8004bec:	4618      	mov	r0, r3
 8004bee:	f001 f90c 	bl	8005e0a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8004c00:	461a      	mov	r2, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8004c0e:	f003 031f 	and.w	r3, r3, #31
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d01a      	beq.n	8004c4c <USBD_LL_SetupStage+0x72>
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d822      	bhi.n	8004c60 <USBD_LL_SetupStage+0x86>
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d002      	beq.n	8004c24 <USBD_LL_SetupStage+0x4a>
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d00a      	beq.n	8004c38 <USBD_LL_SetupStage+0x5e>
 8004c22:	e01d      	b.n	8004c60 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 fb63 	bl	80052f8 <USBD_StdDevReq>
 8004c32:	4603      	mov	r3, r0
 8004c34:	73fb      	strb	r3, [r7, #15]
      break;
 8004c36:	e020      	b.n	8004c7a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004c3e:	4619      	mov	r1, r3
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f000 fbcb 	bl	80053dc <USBD_StdItfReq>
 8004c46:	4603      	mov	r3, r0
 8004c48:	73fb      	strb	r3, [r7, #15]
      break;
 8004c4a:	e016      	b.n	8004c7a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8004c52:	4619      	mov	r1, r3
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f000 fc2d 	bl	80054b4 <USBD_StdEPReq>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	73fb      	strb	r3, [r7, #15]
      break;
 8004c5e:	e00c      	b.n	8004c7a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8004c66:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f001 fdca 	bl	8006808 <USBD_LL_StallEP>
 8004c74:	4603      	mov	r3, r0
 8004c76:	73fb      	strb	r3, [r7, #15]
      break;
 8004c78:	bf00      	nop
  }

  return ret;
 8004c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3710      	adds	r7, #16
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b086      	sub	sp, #24
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	460b      	mov	r3, r1
 8004c8e:	607a      	str	r2, [r7, #4]
 8004c90:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8004c92:	2300      	movs	r3, #0
 8004c94:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8004c96:	7afb      	ldrb	r3, [r7, #11]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d16e      	bne.n	8004d7a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8004ca2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8004caa:	2b03      	cmp	r3, #3
 8004cac:	f040 8098 	bne.w	8004de0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	689a      	ldr	r2, [r3, #8]
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d913      	bls.n	8004ce4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	689a      	ldr	r2, [r3, #8]
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	1ad2      	subs	r2, r2, r3
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	68da      	ldr	r2, [r3, #12]
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	bf28      	it	cs
 8004cd6:	4613      	movcs	r3, r2
 8004cd8:	461a      	mov	r2, r3
 8004cda:	6879      	ldr	r1, [r7, #4]
 8004cdc:	68f8      	ldr	r0, [r7, #12]
 8004cde:	f001 f994 	bl	800600a <USBD_CtlContinueRx>
 8004ce2:	e07d      	b.n	8004de0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8004cea:	f003 031f 	and.w	r3, r3, #31
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d014      	beq.n	8004d1c <USBD_LL_DataOutStage+0x98>
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d81d      	bhi.n	8004d32 <USBD_LL_DataOutStage+0xae>
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d002      	beq.n	8004d00 <USBD_LL_DataOutStage+0x7c>
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d003      	beq.n	8004d06 <USBD_LL_DataOutStage+0x82>
 8004cfe:	e018      	b.n	8004d32 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8004d00:	2300      	movs	r3, #0
 8004d02:	75bb      	strb	r3, [r7, #22]
            break;
 8004d04:	e018      	b.n	8004d38 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	4619      	mov	r1, r3
 8004d10:	68f8      	ldr	r0, [r7, #12]
 8004d12:	f000 fa64 	bl	80051de <USBD_CoreFindIF>
 8004d16:	4603      	mov	r3, r0
 8004d18:	75bb      	strb	r3, [r7, #22]
            break;
 8004d1a:	e00d      	b.n	8004d38 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	4619      	mov	r1, r3
 8004d26:	68f8      	ldr	r0, [r7, #12]
 8004d28:	f000 fa66 	bl	80051f8 <USBD_CoreFindEP>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	75bb      	strb	r3, [r7, #22]
            break;
 8004d30:	e002      	b.n	8004d38 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8004d32:	2300      	movs	r3, #0
 8004d34:	75bb      	strb	r3, [r7, #22]
            break;
 8004d36:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8004d38:	7dbb      	ldrb	r3, [r7, #22]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d119      	bne.n	8004d72 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	2b03      	cmp	r3, #3
 8004d48:	d113      	bne.n	8004d72 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8004d4a:	7dba      	ldrb	r2, [r7, #22]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	32ae      	adds	r2, #174	@ 0xae
 8004d50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d00b      	beq.n	8004d72 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8004d5a:	7dba      	ldrb	r2, [r7, #22]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8004d62:	7dba      	ldrb	r2, [r7, #22]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	32ae      	adds	r2, #174	@ 0xae
 8004d68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	68f8      	ldr	r0, [r7, #12]
 8004d70:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8004d72:	68f8      	ldr	r0, [r7, #12]
 8004d74:	f001 f95a 	bl	800602c <USBD_CtlSendStatus>
 8004d78:	e032      	b.n	8004de0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8004d7a:	7afb      	ldrb	r3, [r7, #11]
 8004d7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	4619      	mov	r1, r3
 8004d84:	68f8      	ldr	r0, [r7, #12]
 8004d86:	f000 fa37 	bl	80051f8 <USBD_CoreFindEP>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004d8e:	7dbb      	ldrb	r3, [r7, #22]
 8004d90:	2bff      	cmp	r3, #255	@ 0xff
 8004d92:	d025      	beq.n	8004de0 <USBD_LL_DataOutStage+0x15c>
 8004d94:	7dbb      	ldrb	r3, [r7, #22]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d122      	bne.n	8004de0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	2b03      	cmp	r3, #3
 8004da4:	d117      	bne.n	8004dd6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8004da6:	7dba      	ldrb	r2, [r7, #22]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	32ae      	adds	r2, #174	@ 0xae
 8004dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d00f      	beq.n	8004dd6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8004db6:	7dba      	ldrb	r2, [r7, #22]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8004dbe:	7dba      	ldrb	r2, [r7, #22]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	32ae      	adds	r2, #174	@ 0xae
 8004dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	7afa      	ldrb	r2, [r7, #11]
 8004dcc:	4611      	mov	r1, r2
 8004dce:	68f8      	ldr	r0, [r7, #12]
 8004dd0:	4798      	blx	r3
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8004dd6:	7dfb      	ldrb	r3, [r7, #23]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d001      	beq.n	8004de0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8004ddc:	7dfb      	ldrb	r3, [r7, #23]
 8004dde:	e000      	b.n	8004de2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3718      	adds	r7, #24
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}

08004dea <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004dea:	b580      	push	{r7, lr}
 8004dec:	b086      	sub	sp, #24
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	60f8      	str	r0, [r7, #12]
 8004df2:	460b      	mov	r3, r1
 8004df4:	607a      	str	r2, [r7, #4]
 8004df6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8004df8:	7afb      	ldrb	r3, [r7, #11]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d16f      	bne.n	8004ede <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	3314      	adds	r3, #20
 8004e02:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8004e0a:	2b02      	cmp	r3, #2
 8004e0c:	d15a      	bne.n	8004ec4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	689a      	ldr	r2, [r3, #8]
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d914      	bls.n	8004e44 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	689a      	ldr	r2, [r3, #8]
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	1ad2      	subs	r2, r2, r3
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	6879      	ldr	r1, [r7, #4]
 8004e30:	68f8      	ldr	r0, [r7, #12]
 8004e32:	f001 f8bc 	bl	8005fae <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004e36:	2300      	movs	r3, #0
 8004e38:	2200      	movs	r2, #0
 8004e3a:	2100      	movs	r1, #0
 8004e3c:	68f8      	ldr	r0, [r7, #12]
 8004e3e:	f001 fd8d 	bl	800695c <USBD_LL_PrepareReceive>
 8004e42:	e03f      	b.n	8004ec4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	68da      	ldr	r2, [r3, #12]
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d11c      	bne.n	8004e8a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	685a      	ldr	r2, [r3, #4]
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d316      	bcc.n	8004e8a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	685a      	ldr	r2, [r3, #4]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d20f      	bcs.n	8004e8a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	2100      	movs	r1, #0
 8004e6e:	68f8      	ldr	r0, [r7, #12]
 8004e70:	f001 f89d 	bl	8005fae <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	2200      	movs	r2, #0
 8004e80:	2100      	movs	r1, #0
 8004e82:	68f8      	ldr	r0, [r7, #12]
 8004e84:	f001 fd6a 	bl	800695c <USBD_LL_PrepareReceive>
 8004e88:	e01c      	b.n	8004ec4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	2b03      	cmp	r3, #3
 8004e94:	d10f      	bne.n	8004eb6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d009      	beq.n	8004eb6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	68f8      	ldr	r0, [r7, #12]
 8004eb4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004eb6:	2180      	movs	r1, #128	@ 0x80
 8004eb8:	68f8      	ldr	r0, [r7, #12]
 8004eba:	f001 fca5 	bl	8006808 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004ebe:	68f8      	ldr	r0, [r7, #12]
 8004ec0:	f001 f8c7 	bl	8006052 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d03a      	beq.n	8004f44 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8004ece:	68f8      	ldr	r0, [r7, #12]
 8004ed0:	f7ff fe42 	bl	8004b58 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8004edc:	e032      	b.n	8004f44 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8004ede:	7afb      	ldrb	r3, [r7, #11]
 8004ee0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	68f8      	ldr	r0, [r7, #12]
 8004eea:	f000 f985 	bl	80051f8 <USBD_CoreFindEP>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004ef2:	7dfb      	ldrb	r3, [r7, #23]
 8004ef4:	2bff      	cmp	r3, #255	@ 0xff
 8004ef6:	d025      	beq.n	8004f44 <USBD_LL_DataInStage+0x15a>
 8004ef8:	7dfb      	ldrb	r3, [r7, #23]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d122      	bne.n	8004f44 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	2b03      	cmp	r3, #3
 8004f08:	d11c      	bne.n	8004f44 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8004f0a:	7dfa      	ldrb	r2, [r7, #23]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	32ae      	adds	r2, #174	@ 0xae
 8004f10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f14:	695b      	ldr	r3, [r3, #20]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d014      	beq.n	8004f44 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8004f1a:	7dfa      	ldrb	r2, [r7, #23]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8004f22:	7dfa      	ldrb	r2, [r7, #23]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	32ae      	adds	r2, #174	@ 0xae
 8004f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f2c:	695b      	ldr	r3, [r3, #20]
 8004f2e:	7afa      	ldrb	r2, [r7, #11]
 8004f30:	4611      	mov	r1, r2
 8004f32:	68f8      	ldr	r0, [r7, #12]
 8004f34:	4798      	blx	r3
 8004f36:	4603      	mov	r3, r0
 8004f38:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8004f3a:	7dbb      	ldrb	r3, [r7, #22]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d001      	beq.n	8004f44 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8004f40:	7dbb      	ldrb	r3, [r7, #22]
 8004f42:	e000      	b.n	8004f46 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3718      	adds	r7, #24
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}

08004f4e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004f4e:	b580      	push	{r7, lr}
 8004f50:	b084      	sub	sp, #16
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8004f56:	2300      	movs	r3, #0
 8004f58:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d014      	beq.n	8004fb4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d00e      	beq.n	8004fb4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	6852      	ldr	r2, [r2, #4]
 8004fa2:	b2d2      	uxtb	r2, r2
 8004fa4:	4611      	mov	r1, r2
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	4798      	blx	r3
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d001      	beq.n	8004fb4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004fb4:	2340      	movs	r3, #64	@ 0x40
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	2100      	movs	r1, #0
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f001 fbdf 	bl	800677e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2240      	movs	r2, #64	@ 0x40
 8004fcc:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004fd0:	2340      	movs	r3, #64	@ 0x40
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	2180      	movs	r1, #128	@ 0x80
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f001 fbd1 	bl	800677e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2240      	movs	r2, #64	@ 0x40
 8004fe6:	621a      	str	r2, [r3, #32]

  return ret;
 8004fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3710      	adds	r7, #16
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}

08004ff2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004ff2:	b480      	push	{r7}
 8004ff4:	b083      	sub	sp, #12
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
 8004ffa:	460b      	mov	r3, r1
 8004ffc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	78fa      	ldrb	r2, [r7, #3]
 8005002:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	370c      	adds	r7, #12
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr

08005012 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005012:	b480      	push	{r7}
 8005014:	b083      	sub	sp, #12
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005020:	b2db      	uxtb	r3, r3
 8005022:	2b04      	cmp	r3, #4
 8005024:	d006      	beq.n	8005034 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800502c:	b2da      	uxtb	r2, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2204      	movs	r2, #4
 8005038:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	370c      	adds	r7, #12
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr

0800504a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800504a:	b480      	push	{r7}
 800504c:	b083      	sub	sp, #12
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005058:	b2db      	uxtb	r3, r3
 800505a:	2b04      	cmp	r3, #4
 800505c:	d106      	bne.n	800506c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8005064:	b2da      	uxtb	r2, r3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	370c      	adds	r7, #12
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr

0800507a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800507a:	b580      	push	{r7, lr}
 800507c:	b082      	sub	sp, #8
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005088:	b2db      	uxtb	r3, r3
 800508a:	2b03      	cmp	r3, #3
 800508c:	d110      	bne.n	80050b0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005094:	2b00      	cmp	r3, #0
 8005096:	d00b      	beq.n	80050b0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800509e:	69db      	ldr	r3, [r3, #28]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d005      	beq.n	80050b0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80050aa:	69db      	ldr	r3, [r3, #28]
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3708      	adds	r7, #8
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}

080050ba <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80050ba:	b580      	push	{r7, lr}
 80050bc:	b082      	sub	sp, #8
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
 80050c2:	460b      	mov	r3, r1
 80050c4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	32ae      	adds	r2, #174	@ 0xae
 80050d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d101      	bne.n	80050dc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80050d8:	2303      	movs	r3, #3
 80050da:	e01c      	b.n	8005116 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	2b03      	cmp	r3, #3
 80050e6:	d115      	bne.n	8005114 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	32ae      	adds	r2, #174	@ 0xae
 80050f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050f6:	6a1b      	ldr	r3, [r3, #32]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d00b      	beq.n	8005114 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	32ae      	adds	r2, #174	@ 0xae
 8005106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800510a:	6a1b      	ldr	r3, [r3, #32]
 800510c:	78fa      	ldrb	r2, [r7, #3]
 800510e:	4611      	mov	r1, r2
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3708      	adds	r7, #8
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}

0800511e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800511e:	b580      	push	{r7, lr}
 8005120:	b082      	sub	sp, #8
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
 8005126:	460b      	mov	r3, r1
 8005128:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	32ae      	adds	r2, #174	@ 0xae
 8005134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d101      	bne.n	8005140 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800513c:	2303      	movs	r3, #3
 800513e:	e01c      	b.n	800517a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005146:	b2db      	uxtb	r3, r3
 8005148:	2b03      	cmp	r3, #3
 800514a:	d115      	bne.n	8005178 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	32ae      	adds	r2, #174	@ 0xae
 8005156:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800515a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800515c:	2b00      	cmp	r3, #0
 800515e:	d00b      	beq.n	8005178 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	32ae      	adds	r2, #174	@ 0xae
 800516a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800516e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005170:	78fa      	ldrb	r2, [r7, #3]
 8005172:	4611      	mov	r1, r2
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	3708      	adds	r7, #8
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}

08005182 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005182:	b480      	push	{r7}
 8005184:	b083      	sub	sp, #12
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800518a:	2300      	movs	r3, #0
}
 800518c:	4618      	mov	r0, r3
 800518e:	370c      	adds	r7, #12
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80051a0:	2300      	movs	r3, #0
 80051a2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00e      	beq.n	80051d4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	6852      	ldr	r2, [r2, #4]
 80051c2:	b2d2      	uxtb	r2, r2
 80051c4:	4611      	mov	r1, r2
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	4798      	blx	r3
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d001      	beq.n	80051d4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80051d0:	2303      	movs	r3, #3
 80051d2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80051d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3710      	adds	r7, #16
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}

080051de <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80051de:	b480      	push	{r7}
 80051e0:	b083      	sub	sp, #12
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
 80051e6:	460b      	mov	r3, r1
 80051e8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80051ea:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b083      	sub	sp, #12
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	460b      	mov	r3, r1
 8005202:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005204:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005206:	4618      	mov	r0, r3
 8005208:	370c      	adds	r7, #12
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr

08005212 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005212:	b580      	push	{r7, lr}
 8005214:	b086      	sub	sp, #24
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
 800521a:	460b      	mov	r3, r1
 800521c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005226:	2300      	movs	r3, #0
 8005228:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	885b      	ldrh	r3, [r3, #2]
 800522e:	b29b      	uxth	r3, r3
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	7812      	ldrb	r2, [r2, #0]
 8005234:	4293      	cmp	r3, r2
 8005236:	d91f      	bls.n	8005278 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800523e:	e013      	b.n	8005268 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005240:	f107 030a 	add.w	r3, r7, #10
 8005244:	4619      	mov	r1, r3
 8005246:	6978      	ldr	r0, [r7, #20]
 8005248:	f000 f81b 	bl	8005282 <USBD_GetNextDesc>
 800524c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	785b      	ldrb	r3, [r3, #1]
 8005252:	2b05      	cmp	r3, #5
 8005254:	d108      	bne.n	8005268 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	789b      	ldrb	r3, [r3, #2]
 800525e:	78fa      	ldrb	r2, [r7, #3]
 8005260:	429a      	cmp	r2, r3
 8005262:	d008      	beq.n	8005276 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005264:	2300      	movs	r3, #0
 8005266:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	885b      	ldrh	r3, [r3, #2]
 800526c:	b29a      	uxth	r2, r3
 800526e:	897b      	ldrh	r3, [r7, #10]
 8005270:	429a      	cmp	r2, r3
 8005272:	d8e5      	bhi.n	8005240 <USBD_GetEpDesc+0x2e>
 8005274:	e000      	b.n	8005278 <USBD_GetEpDesc+0x66>
          break;
 8005276:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005278:	693b      	ldr	r3, [r7, #16]
}
 800527a:	4618      	mov	r0, r3
 800527c:	3718      	adds	r7, #24
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}

08005282 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005282:	b480      	push	{r7}
 8005284:	b085      	sub	sp, #20
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
 800528a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	881b      	ldrh	r3, [r3, #0]
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	7812      	ldrb	r2, [r2, #0]
 8005298:	4413      	add	r3, r2
 800529a:	b29a      	uxth	r2, r3
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	461a      	mov	r2, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4413      	add	r3, r2
 80052aa:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80052ac:	68fb      	ldr	r3, [r7, #12]
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3714      	adds	r7, #20
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr

080052ba <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80052ba:	b480      	push	{r7}
 80052bc:	b087      	sub	sp, #28
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	3301      	adds	r3, #1
 80052d0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80052d8:	8a3b      	ldrh	r3, [r7, #16]
 80052da:	021b      	lsls	r3, r3, #8
 80052dc:	b21a      	sxth	r2, r3
 80052de:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	b21b      	sxth	r3, r3
 80052e6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80052e8:	89fb      	ldrh	r3, [r7, #14]
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	371c      	adds	r7, #28
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr
	...

080052f8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005302:	2300      	movs	r3, #0
 8005304:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800530e:	2b40      	cmp	r3, #64	@ 0x40
 8005310:	d005      	beq.n	800531e <USBD_StdDevReq+0x26>
 8005312:	2b40      	cmp	r3, #64	@ 0x40
 8005314:	d857      	bhi.n	80053c6 <USBD_StdDevReq+0xce>
 8005316:	2b00      	cmp	r3, #0
 8005318:	d00f      	beq.n	800533a <USBD_StdDevReq+0x42>
 800531a:	2b20      	cmp	r3, #32
 800531c:	d153      	bne.n	80053c6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	32ae      	adds	r2, #174	@ 0xae
 8005328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	6839      	ldr	r1, [r7, #0]
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	4798      	blx	r3
 8005334:	4603      	mov	r3, r0
 8005336:	73fb      	strb	r3, [r7, #15]
      break;
 8005338:	e04a      	b.n	80053d0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	785b      	ldrb	r3, [r3, #1]
 800533e:	2b09      	cmp	r3, #9
 8005340:	d83b      	bhi.n	80053ba <USBD_StdDevReq+0xc2>
 8005342:	a201      	add	r2, pc, #4	@ (adr r2, 8005348 <USBD_StdDevReq+0x50>)
 8005344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005348:	0800539d 	.word	0x0800539d
 800534c:	080053b1 	.word	0x080053b1
 8005350:	080053bb 	.word	0x080053bb
 8005354:	080053a7 	.word	0x080053a7
 8005358:	080053bb 	.word	0x080053bb
 800535c:	0800537b 	.word	0x0800537b
 8005360:	08005371 	.word	0x08005371
 8005364:	080053bb 	.word	0x080053bb
 8005368:	08005393 	.word	0x08005393
 800536c:	08005385 	.word	0x08005385
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005370:	6839      	ldr	r1, [r7, #0]
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 fa3c 	bl	80057f0 <USBD_GetDescriptor>
          break;
 8005378:	e024      	b.n	80053c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800537a:	6839      	ldr	r1, [r7, #0]
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f000 fba1 	bl	8005ac4 <USBD_SetAddress>
          break;
 8005382:	e01f      	b.n	80053c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005384:	6839      	ldr	r1, [r7, #0]
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 fbe0 	bl	8005b4c <USBD_SetConfig>
 800538c:	4603      	mov	r3, r0
 800538e:	73fb      	strb	r3, [r7, #15]
          break;
 8005390:	e018      	b.n	80053c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005392:	6839      	ldr	r1, [r7, #0]
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f000 fc83 	bl	8005ca0 <USBD_GetConfig>
          break;
 800539a:	e013      	b.n	80053c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800539c:	6839      	ldr	r1, [r7, #0]
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 fcb4 	bl	8005d0c <USBD_GetStatus>
          break;
 80053a4:	e00e      	b.n	80053c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80053a6:	6839      	ldr	r1, [r7, #0]
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f000 fce3 	bl	8005d74 <USBD_SetFeature>
          break;
 80053ae:	e009      	b.n	80053c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80053b0:	6839      	ldr	r1, [r7, #0]
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 fd07 	bl	8005dc6 <USBD_ClrFeature>
          break;
 80053b8:	e004      	b.n	80053c4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80053ba:	6839      	ldr	r1, [r7, #0]
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f000 fd5e 	bl	8005e7e <USBD_CtlError>
          break;
 80053c2:	bf00      	nop
      }
      break;
 80053c4:	e004      	b.n	80053d0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80053c6:	6839      	ldr	r1, [r7, #0]
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 fd58 	bl	8005e7e <USBD_CtlError>
      break;
 80053ce:	bf00      	nop
  }

  return ret;
 80053d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3710      	adds	r7, #16
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop

080053dc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80053e6:	2300      	movs	r3, #0
 80053e8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80053f2:	2b40      	cmp	r3, #64	@ 0x40
 80053f4:	d005      	beq.n	8005402 <USBD_StdItfReq+0x26>
 80053f6:	2b40      	cmp	r3, #64	@ 0x40
 80053f8:	d852      	bhi.n	80054a0 <USBD_StdItfReq+0xc4>
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d001      	beq.n	8005402 <USBD_StdItfReq+0x26>
 80053fe:	2b20      	cmp	r3, #32
 8005400:	d14e      	bne.n	80054a0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005408:	b2db      	uxtb	r3, r3
 800540a:	3b01      	subs	r3, #1
 800540c:	2b02      	cmp	r3, #2
 800540e:	d840      	bhi.n	8005492 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	889b      	ldrh	r3, [r3, #4]
 8005414:	b2db      	uxtb	r3, r3
 8005416:	2b01      	cmp	r3, #1
 8005418:	d836      	bhi.n	8005488 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	889b      	ldrh	r3, [r3, #4]
 800541e:	b2db      	uxtb	r3, r3
 8005420:	4619      	mov	r1, r3
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f7ff fedb 	bl	80051de <USBD_CoreFindIF>
 8005428:	4603      	mov	r3, r0
 800542a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800542c:	7bbb      	ldrb	r3, [r7, #14]
 800542e:	2bff      	cmp	r3, #255	@ 0xff
 8005430:	d01d      	beq.n	800546e <USBD_StdItfReq+0x92>
 8005432:	7bbb      	ldrb	r3, [r7, #14]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d11a      	bne.n	800546e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005438:	7bba      	ldrb	r2, [r7, #14]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	32ae      	adds	r2, #174	@ 0xae
 800543e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d00f      	beq.n	8005468 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005448:	7bba      	ldrb	r2, [r7, #14]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005450:	7bba      	ldrb	r2, [r7, #14]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	32ae      	adds	r2, #174	@ 0xae
 8005456:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	6839      	ldr	r1, [r7, #0]
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	4798      	blx	r3
 8005462:	4603      	mov	r3, r0
 8005464:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005466:	e004      	b.n	8005472 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005468:	2303      	movs	r3, #3
 800546a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800546c:	e001      	b.n	8005472 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800546e:	2303      	movs	r3, #3
 8005470:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	88db      	ldrh	r3, [r3, #6]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d110      	bne.n	800549c <USBD_StdItfReq+0xc0>
 800547a:	7bfb      	ldrb	r3, [r7, #15]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d10d      	bne.n	800549c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 fdd3 	bl	800602c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005486:	e009      	b.n	800549c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005488:	6839      	ldr	r1, [r7, #0]
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 fcf7 	bl	8005e7e <USBD_CtlError>
          break;
 8005490:	e004      	b.n	800549c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005492:	6839      	ldr	r1, [r7, #0]
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f000 fcf2 	bl	8005e7e <USBD_CtlError>
          break;
 800549a:	e000      	b.n	800549e <USBD_StdItfReq+0xc2>
          break;
 800549c:	bf00      	nop
      }
      break;
 800549e:	e004      	b.n	80054aa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80054a0:	6839      	ldr	r1, [r7, #0]
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 fceb 	bl	8005e7e <USBD_CtlError>
      break;
 80054a8:	bf00      	nop
  }

  return ret;
 80054aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3710      	adds	r7, #16
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80054be:	2300      	movs	r3, #0
 80054c0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	889b      	ldrh	r3, [r3, #4]
 80054c6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80054d0:	2b40      	cmp	r3, #64	@ 0x40
 80054d2:	d007      	beq.n	80054e4 <USBD_StdEPReq+0x30>
 80054d4:	2b40      	cmp	r3, #64	@ 0x40
 80054d6:	f200 817f 	bhi.w	80057d8 <USBD_StdEPReq+0x324>
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d02a      	beq.n	8005534 <USBD_StdEPReq+0x80>
 80054de:	2b20      	cmp	r3, #32
 80054e0:	f040 817a 	bne.w	80057d8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80054e4:	7bbb      	ldrb	r3, [r7, #14]
 80054e6:	4619      	mov	r1, r3
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f7ff fe85 	bl	80051f8 <USBD_CoreFindEP>
 80054ee:	4603      	mov	r3, r0
 80054f0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80054f2:	7b7b      	ldrb	r3, [r7, #13]
 80054f4:	2bff      	cmp	r3, #255	@ 0xff
 80054f6:	f000 8174 	beq.w	80057e2 <USBD_StdEPReq+0x32e>
 80054fa:	7b7b      	ldrb	r3, [r7, #13]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	f040 8170 	bne.w	80057e2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005502:	7b7a      	ldrb	r2, [r7, #13]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800550a:	7b7a      	ldrb	r2, [r7, #13]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	32ae      	adds	r2, #174	@ 0xae
 8005510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	2b00      	cmp	r3, #0
 8005518:	f000 8163 	beq.w	80057e2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800551c:	7b7a      	ldrb	r2, [r7, #13]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	32ae      	adds	r2, #174	@ 0xae
 8005522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	6839      	ldr	r1, [r7, #0]
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	4798      	blx	r3
 800552e:	4603      	mov	r3, r0
 8005530:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005532:	e156      	b.n	80057e2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	785b      	ldrb	r3, [r3, #1]
 8005538:	2b03      	cmp	r3, #3
 800553a:	d008      	beq.n	800554e <USBD_StdEPReq+0x9a>
 800553c:	2b03      	cmp	r3, #3
 800553e:	f300 8145 	bgt.w	80057cc <USBD_StdEPReq+0x318>
 8005542:	2b00      	cmp	r3, #0
 8005544:	f000 809b 	beq.w	800567e <USBD_StdEPReq+0x1ca>
 8005548:	2b01      	cmp	r3, #1
 800554a:	d03c      	beq.n	80055c6 <USBD_StdEPReq+0x112>
 800554c:	e13e      	b.n	80057cc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005554:	b2db      	uxtb	r3, r3
 8005556:	2b02      	cmp	r3, #2
 8005558:	d002      	beq.n	8005560 <USBD_StdEPReq+0xac>
 800555a:	2b03      	cmp	r3, #3
 800555c:	d016      	beq.n	800558c <USBD_StdEPReq+0xd8>
 800555e:	e02c      	b.n	80055ba <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005560:	7bbb      	ldrb	r3, [r7, #14]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d00d      	beq.n	8005582 <USBD_StdEPReq+0xce>
 8005566:	7bbb      	ldrb	r3, [r7, #14]
 8005568:	2b80      	cmp	r3, #128	@ 0x80
 800556a:	d00a      	beq.n	8005582 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800556c:	7bbb      	ldrb	r3, [r7, #14]
 800556e:	4619      	mov	r1, r3
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f001 f949 	bl	8006808 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005576:	2180      	movs	r1, #128	@ 0x80
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f001 f945 	bl	8006808 <USBD_LL_StallEP>
 800557e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005580:	e020      	b.n	80055c4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8005582:	6839      	ldr	r1, [r7, #0]
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 fc7a 	bl	8005e7e <USBD_CtlError>
              break;
 800558a:	e01b      	b.n	80055c4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	885b      	ldrh	r3, [r3, #2]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d10e      	bne.n	80055b2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005594:	7bbb      	ldrb	r3, [r7, #14]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d00b      	beq.n	80055b2 <USBD_StdEPReq+0xfe>
 800559a:	7bbb      	ldrb	r3, [r7, #14]
 800559c:	2b80      	cmp	r3, #128	@ 0x80
 800559e:	d008      	beq.n	80055b2 <USBD_StdEPReq+0xfe>
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	88db      	ldrh	r3, [r3, #6]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d104      	bne.n	80055b2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80055a8:	7bbb      	ldrb	r3, [r7, #14]
 80055aa:	4619      	mov	r1, r3
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f001 f92b 	bl	8006808 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 fd3a 	bl	800602c <USBD_CtlSendStatus>

              break;
 80055b8:	e004      	b.n	80055c4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80055ba:	6839      	ldr	r1, [r7, #0]
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f000 fc5e 	bl	8005e7e <USBD_CtlError>
              break;
 80055c2:	bf00      	nop
          }
          break;
 80055c4:	e107      	b.n	80057d6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	d002      	beq.n	80055d8 <USBD_StdEPReq+0x124>
 80055d2:	2b03      	cmp	r3, #3
 80055d4:	d016      	beq.n	8005604 <USBD_StdEPReq+0x150>
 80055d6:	e04b      	b.n	8005670 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80055d8:	7bbb      	ldrb	r3, [r7, #14]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d00d      	beq.n	80055fa <USBD_StdEPReq+0x146>
 80055de:	7bbb      	ldrb	r3, [r7, #14]
 80055e0:	2b80      	cmp	r3, #128	@ 0x80
 80055e2:	d00a      	beq.n	80055fa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80055e4:	7bbb      	ldrb	r3, [r7, #14]
 80055e6:	4619      	mov	r1, r3
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f001 f90d 	bl	8006808 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80055ee:	2180      	movs	r1, #128	@ 0x80
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f001 f909 	bl	8006808 <USBD_LL_StallEP>
 80055f6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80055f8:	e040      	b.n	800567c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80055fa:	6839      	ldr	r1, [r7, #0]
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f000 fc3e 	bl	8005e7e <USBD_CtlError>
              break;
 8005602:	e03b      	b.n	800567c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	885b      	ldrh	r3, [r3, #2]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d136      	bne.n	800567a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800560c:	7bbb      	ldrb	r3, [r7, #14]
 800560e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005612:	2b00      	cmp	r3, #0
 8005614:	d004      	beq.n	8005620 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005616:	7bbb      	ldrb	r3, [r7, #14]
 8005618:	4619      	mov	r1, r3
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f001 f913 	bl	8006846 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f000 fd03 	bl	800602c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005626:	7bbb      	ldrb	r3, [r7, #14]
 8005628:	4619      	mov	r1, r3
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f7ff fde4 	bl	80051f8 <USBD_CoreFindEP>
 8005630:	4603      	mov	r3, r0
 8005632:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005634:	7b7b      	ldrb	r3, [r7, #13]
 8005636:	2bff      	cmp	r3, #255	@ 0xff
 8005638:	d01f      	beq.n	800567a <USBD_StdEPReq+0x1c6>
 800563a:	7b7b      	ldrb	r3, [r7, #13]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d11c      	bne.n	800567a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005640:	7b7a      	ldrb	r2, [r7, #13]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005648:	7b7a      	ldrb	r2, [r7, #13]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	32ae      	adds	r2, #174	@ 0xae
 800564e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d010      	beq.n	800567a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005658:	7b7a      	ldrb	r2, [r7, #13]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	32ae      	adds	r2, #174	@ 0xae
 800565e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	6839      	ldr	r1, [r7, #0]
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	4798      	blx	r3
 800566a:	4603      	mov	r3, r0
 800566c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800566e:	e004      	b.n	800567a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8005670:	6839      	ldr	r1, [r7, #0]
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 fc03 	bl	8005e7e <USBD_CtlError>
              break;
 8005678:	e000      	b.n	800567c <USBD_StdEPReq+0x1c8>
              break;
 800567a:	bf00      	nop
          }
          break;
 800567c:	e0ab      	b.n	80057d6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005684:	b2db      	uxtb	r3, r3
 8005686:	2b02      	cmp	r3, #2
 8005688:	d002      	beq.n	8005690 <USBD_StdEPReq+0x1dc>
 800568a:	2b03      	cmp	r3, #3
 800568c:	d032      	beq.n	80056f4 <USBD_StdEPReq+0x240>
 800568e:	e097      	b.n	80057c0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005690:	7bbb      	ldrb	r3, [r7, #14]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d007      	beq.n	80056a6 <USBD_StdEPReq+0x1f2>
 8005696:	7bbb      	ldrb	r3, [r7, #14]
 8005698:	2b80      	cmp	r3, #128	@ 0x80
 800569a:	d004      	beq.n	80056a6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800569c:	6839      	ldr	r1, [r7, #0]
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 fbed 	bl	8005e7e <USBD_CtlError>
                break;
 80056a4:	e091      	b.n	80057ca <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80056a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	da0b      	bge.n	80056c6 <USBD_StdEPReq+0x212>
 80056ae:	7bbb      	ldrb	r3, [r7, #14]
 80056b0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80056b4:	4613      	mov	r3, r2
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	4413      	add	r3, r2
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	3310      	adds	r3, #16
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	4413      	add	r3, r2
 80056c2:	3304      	adds	r3, #4
 80056c4:	e00b      	b.n	80056de <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80056c6:	7bbb      	ldrb	r3, [r7, #14]
 80056c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80056cc:	4613      	mov	r3, r2
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	4413      	add	r3, r2
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	4413      	add	r3, r2
 80056dc:	3304      	adds	r3, #4
 80056de:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	2200      	movs	r2, #0
 80056e4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	2202      	movs	r2, #2
 80056ea:	4619      	mov	r1, r3
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f000 fc43 	bl	8005f78 <USBD_CtlSendData>
              break;
 80056f2:	e06a      	b.n	80057ca <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80056f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	da11      	bge.n	8005720 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80056fc:	7bbb      	ldrb	r3, [r7, #14]
 80056fe:	f003 020f 	and.w	r2, r3, #15
 8005702:	6879      	ldr	r1, [r7, #4]
 8005704:	4613      	mov	r3, r2
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	4413      	add	r3, r2
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	440b      	add	r3, r1
 800570e:	3324      	adds	r3, #36	@ 0x24
 8005710:	881b      	ldrh	r3, [r3, #0]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d117      	bne.n	8005746 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005716:	6839      	ldr	r1, [r7, #0]
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f000 fbb0 	bl	8005e7e <USBD_CtlError>
                  break;
 800571e:	e054      	b.n	80057ca <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005720:	7bbb      	ldrb	r3, [r7, #14]
 8005722:	f003 020f 	and.w	r2, r3, #15
 8005726:	6879      	ldr	r1, [r7, #4]
 8005728:	4613      	mov	r3, r2
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	4413      	add	r3, r2
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	440b      	add	r3, r1
 8005732:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005736:	881b      	ldrh	r3, [r3, #0]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d104      	bne.n	8005746 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800573c:	6839      	ldr	r1, [r7, #0]
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 fb9d 	bl	8005e7e <USBD_CtlError>
                  break;
 8005744:	e041      	b.n	80057ca <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005746:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800574a:	2b00      	cmp	r3, #0
 800574c:	da0b      	bge.n	8005766 <USBD_StdEPReq+0x2b2>
 800574e:	7bbb      	ldrb	r3, [r7, #14]
 8005750:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005754:	4613      	mov	r3, r2
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	4413      	add	r3, r2
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	3310      	adds	r3, #16
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	4413      	add	r3, r2
 8005762:	3304      	adds	r3, #4
 8005764:	e00b      	b.n	800577e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005766:	7bbb      	ldrb	r3, [r7, #14]
 8005768:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800576c:	4613      	mov	r3, r2
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	4413      	add	r3, r2
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	4413      	add	r3, r2
 800577c:	3304      	adds	r3, #4
 800577e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005780:	7bbb      	ldrb	r3, [r7, #14]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d002      	beq.n	800578c <USBD_StdEPReq+0x2d8>
 8005786:	7bbb      	ldrb	r3, [r7, #14]
 8005788:	2b80      	cmp	r3, #128	@ 0x80
 800578a:	d103      	bne.n	8005794 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	2200      	movs	r2, #0
 8005790:	601a      	str	r2, [r3, #0]
 8005792:	e00e      	b.n	80057b2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005794:	7bbb      	ldrb	r3, [r7, #14]
 8005796:	4619      	mov	r1, r3
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f001 f873 	bl	8006884 <USBD_LL_IsStallEP>
 800579e:	4603      	mov	r3, r0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d003      	beq.n	80057ac <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	2201      	movs	r2, #1
 80057a8:	601a      	str	r2, [r3, #0]
 80057aa:	e002      	b.n	80057b2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	2200      	movs	r2, #0
 80057b0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	2202      	movs	r2, #2
 80057b6:	4619      	mov	r1, r3
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f000 fbdd 	bl	8005f78 <USBD_CtlSendData>
              break;
 80057be:	e004      	b.n	80057ca <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80057c0:	6839      	ldr	r1, [r7, #0]
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 fb5b 	bl	8005e7e <USBD_CtlError>
              break;
 80057c8:	bf00      	nop
          }
          break;
 80057ca:	e004      	b.n	80057d6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80057cc:	6839      	ldr	r1, [r7, #0]
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 fb55 	bl	8005e7e <USBD_CtlError>
          break;
 80057d4:	bf00      	nop
      }
      break;
 80057d6:	e005      	b.n	80057e4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80057d8:	6839      	ldr	r1, [r7, #0]
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 fb4f 	bl	8005e7e <USBD_CtlError>
      break;
 80057e0:	e000      	b.n	80057e4 <USBD_StdEPReq+0x330>
      break;
 80057e2:	bf00      	nop
  }

  return ret;
 80057e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3710      	adds	r7, #16
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
	...

080057f0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80057fa:	2300      	movs	r3, #0
 80057fc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80057fe:	2300      	movs	r3, #0
 8005800:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005802:	2300      	movs	r3, #0
 8005804:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	885b      	ldrh	r3, [r3, #2]
 800580a:	0a1b      	lsrs	r3, r3, #8
 800580c:	b29b      	uxth	r3, r3
 800580e:	3b01      	subs	r3, #1
 8005810:	2b06      	cmp	r3, #6
 8005812:	f200 8128 	bhi.w	8005a66 <USBD_GetDescriptor+0x276>
 8005816:	a201      	add	r2, pc, #4	@ (adr r2, 800581c <USBD_GetDescriptor+0x2c>)
 8005818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800581c:	08005839 	.word	0x08005839
 8005820:	08005851 	.word	0x08005851
 8005824:	08005891 	.word	0x08005891
 8005828:	08005a67 	.word	0x08005a67
 800582c:	08005a67 	.word	0x08005a67
 8005830:	08005a07 	.word	0x08005a07
 8005834:	08005a33 	.word	0x08005a33
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	7c12      	ldrb	r2, [r2, #16]
 8005844:	f107 0108 	add.w	r1, r7, #8
 8005848:	4610      	mov	r0, r2
 800584a:	4798      	blx	r3
 800584c:	60f8      	str	r0, [r7, #12]
      break;
 800584e:	e112      	b.n	8005a76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	7c1b      	ldrb	r3, [r3, #16]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d10d      	bne.n	8005874 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800585e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005860:	f107 0208 	add.w	r2, r7, #8
 8005864:	4610      	mov	r0, r2
 8005866:	4798      	blx	r3
 8005868:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	3301      	adds	r3, #1
 800586e:	2202      	movs	r2, #2
 8005870:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005872:	e100      	b.n	8005a76 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800587a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800587c:	f107 0208 	add.w	r2, r7, #8
 8005880:	4610      	mov	r0, r2
 8005882:	4798      	blx	r3
 8005884:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	3301      	adds	r3, #1
 800588a:	2202      	movs	r2, #2
 800588c:	701a      	strb	r2, [r3, #0]
      break;
 800588e:	e0f2      	b.n	8005a76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	885b      	ldrh	r3, [r3, #2]
 8005894:	b2db      	uxtb	r3, r3
 8005896:	2b05      	cmp	r3, #5
 8005898:	f200 80ac 	bhi.w	80059f4 <USBD_GetDescriptor+0x204>
 800589c:	a201      	add	r2, pc, #4	@ (adr r2, 80058a4 <USBD_GetDescriptor+0xb4>)
 800589e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a2:	bf00      	nop
 80058a4:	080058bd 	.word	0x080058bd
 80058a8:	080058f1 	.word	0x080058f1
 80058ac:	08005925 	.word	0x08005925
 80058b0:	08005959 	.word	0x08005959
 80058b4:	0800598d 	.word	0x0800598d
 80058b8:	080059c1 	.word	0x080059c1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d00b      	beq.n	80058e0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	7c12      	ldrb	r2, [r2, #16]
 80058d4:	f107 0108 	add.w	r1, r7, #8
 80058d8:	4610      	mov	r0, r2
 80058da:	4798      	blx	r3
 80058dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80058de:	e091      	b.n	8005a04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80058e0:	6839      	ldr	r1, [r7, #0]
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 facb 	bl	8005e7e <USBD_CtlError>
            err++;
 80058e8:	7afb      	ldrb	r3, [r7, #11]
 80058ea:	3301      	adds	r3, #1
 80058ec:	72fb      	strb	r3, [r7, #11]
          break;
 80058ee:	e089      	b.n	8005a04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d00b      	beq.n	8005914 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	7c12      	ldrb	r2, [r2, #16]
 8005908:	f107 0108 	add.w	r1, r7, #8
 800590c:	4610      	mov	r0, r2
 800590e:	4798      	blx	r3
 8005910:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005912:	e077      	b.n	8005a04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005914:	6839      	ldr	r1, [r7, #0]
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 fab1 	bl	8005e7e <USBD_CtlError>
            err++;
 800591c:	7afb      	ldrb	r3, [r7, #11]
 800591e:	3301      	adds	r3, #1
 8005920:	72fb      	strb	r3, [r7, #11]
          break;
 8005922:	e06f      	b.n	8005a04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d00b      	beq.n	8005948 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	7c12      	ldrb	r2, [r2, #16]
 800593c:	f107 0108 	add.w	r1, r7, #8
 8005940:	4610      	mov	r0, r2
 8005942:	4798      	blx	r3
 8005944:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005946:	e05d      	b.n	8005a04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005948:	6839      	ldr	r1, [r7, #0]
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 fa97 	bl	8005e7e <USBD_CtlError>
            err++;
 8005950:	7afb      	ldrb	r3, [r7, #11]
 8005952:	3301      	adds	r3, #1
 8005954:	72fb      	strb	r3, [r7, #11]
          break;
 8005956:	e055      	b.n	8005a04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800595e:	691b      	ldr	r3, [r3, #16]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d00b      	beq.n	800597c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	7c12      	ldrb	r2, [r2, #16]
 8005970:	f107 0108 	add.w	r1, r7, #8
 8005974:	4610      	mov	r0, r2
 8005976:	4798      	blx	r3
 8005978:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800597a:	e043      	b.n	8005a04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800597c:	6839      	ldr	r1, [r7, #0]
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 fa7d 	bl	8005e7e <USBD_CtlError>
            err++;
 8005984:	7afb      	ldrb	r3, [r7, #11]
 8005986:	3301      	adds	r3, #1
 8005988:	72fb      	strb	r3, [r7, #11]
          break;
 800598a:	e03b      	b.n	8005a04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005992:	695b      	ldr	r3, [r3, #20]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d00b      	beq.n	80059b0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800599e:	695b      	ldr	r3, [r3, #20]
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	7c12      	ldrb	r2, [r2, #16]
 80059a4:	f107 0108 	add.w	r1, r7, #8
 80059a8:	4610      	mov	r0, r2
 80059aa:	4798      	blx	r3
 80059ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80059ae:	e029      	b.n	8005a04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80059b0:	6839      	ldr	r1, [r7, #0]
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f000 fa63 	bl	8005e7e <USBD_CtlError>
            err++;
 80059b8:	7afb      	ldrb	r3, [r7, #11]
 80059ba:	3301      	adds	r3, #1
 80059bc:	72fb      	strb	r3, [r7, #11]
          break;
 80059be:	e021      	b.n	8005a04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80059c6:	699b      	ldr	r3, [r3, #24]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d00b      	beq.n	80059e4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80059d2:	699b      	ldr	r3, [r3, #24]
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	7c12      	ldrb	r2, [r2, #16]
 80059d8:	f107 0108 	add.w	r1, r7, #8
 80059dc:	4610      	mov	r0, r2
 80059de:	4798      	blx	r3
 80059e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80059e2:	e00f      	b.n	8005a04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80059e4:	6839      	ldr	r1, [r7, #0]
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 fa49 	bl	8005e7e <USBD_CtlError>
            err++;
 80059ec:	7afb      	ldrb	r3, [r7, #11]
 80059ee:	3301      	adds	r3, #1
 80059f0:	72fb      	strb	r3, [r7, #11]
          break;
 80059f2:	e007      	b.n	8005a04 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80059f4:	6839      	ldr	r1, [r7, #0]
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 fa41 	bl	8005e7e <USBD_CtlError>
          err++;
 80059fc:	7afb      	ldrb	r3, [r7, #11]
 80059fe:	3301      	adds	r3, #1
 8005a00:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8005a02:	bf00      	nop
      }
      break;
 8005a04:	e037      	b.n	8005a76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	7c1b      	ldrb	r3, [r3, #16]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d109      	bne.n	8005a22 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a16:	f107 0208 	add.w	r2, r7, #8
 8005a1a:	4610      	mov	r0, r2
 8005a1c:	4798      	blx	r3
 8005a1e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005a20:	e029      	b.n	8005a76 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005a22:	6839      	ldr	r1, [r7, #0]
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f000 fa2a 	bl	8005e7e <USBD_CtlError>
        err++;
 8005a2a:	7afb      	ldrb	r3, [r7, #11]
 8005a2c:	3301      	adds	r3, #1
 8005a2e:	72fb      	strb	r3, [r7, #11]
      break;
 8005a30:	e021      	b.n	8005a76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	7c1b      	ldrb	r3, [r3, #16]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d10d      	bne.n	8005a56 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a42:	f107 0208 	add.w	r2, r7, #8
 8005a46:	4610      	mov	r0, r2
 8005a48:	4798      	blx	r3
 8005a4a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	3301      	adds	r3, #1
 8005a50:	2207      	movs	r2, #7
 8005a52:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005a54:	e00f      	b.n	8005a76 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005a56:	6839      	ldr	r1, [r7, #0]
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f000 fa10 	bl	8005e7e <USBD_CtlError>
        err++;
 8005a5e:	7afb      	ldrb	r3, [r7, #11]
 8005a60:	3301      	adds	r3, #1
 8005a62:	72fb      	strb	r3, [r7, #11]
      break;
 8005a64:	e007      	b.n	8005a76 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005a66:	6839      	ldr	r1, [r7, #0]
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f000 fa08 	bl	8005e7e <USBD_CtlError>
      err++;
 8005a6e:	7afb      	ldrb	r3, [r7, #11]
 8005a70:	3301      	adds	r3, #1
 8005a72:	72fb      	strb	r3, [r7, #11]
      break;
 8005a74:	bf00      	nop
  }

  if (err != 0U)
 8005a76:	7afb      	ldrb	r3, [r7, #11]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d11e      	bne.n	8005aba <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	88db      	ldrh	r3, [r3, #6]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d016      	beq.n	8005ab2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005a84:	893b      	ldrh	r3, [r7, #8]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d00e      	beq.n	8005aa8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	88da      	ldrh	r2, [r3, #6]
 8005a8e:	893b      	ldrh	r3, [r7, #8]
 8005a90:	4293      	cmp	r3, r2
 8005a92:	bf28      	it	cs
 8005a94:	4613      	movcs	r3, r2
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005a9a:	893b      	ldrh	r3, [r7, #8]
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	68f9      	ldr	r1, [r7, #12]
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f000 fa69 	bl	8005f78 <USBD_CtlSendData>
 8005aa6:	e009      	b.n	8005abc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005aa8:	6839      	ldr	r1, [r7, #0]
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 f9e7 	bl	8005e7e <USBD_CtlError>
 8005ab0:	e004      	b.n	8005abc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 faba 	bl	800602c <USBD_CtlSendStatus>
 8005ab8:	e000      	b.n	8005abc <USBD_GetDescriptor+0x2cc>
    return;
 8005aba:	bf00      	nop
  }
}
 8005abc:	3710      	adds	r7, #16
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}
 8005ac2:	bf00      	nop

08005ac4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	889b      	ldrh	r3, [r3, #4]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d131      	bne.n	8005b3a <USBD_SetAddress+0x76>
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	88db      	ldrh	r3, [r3, #6]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d12d      	bne.n	8005b3a <USBD_SetAddress+0x76>
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	885b      	ldrh	r3, [r3, #2]
 8005ae2:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ae4:	d829      	bhi.n	8005b3a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	885b      	ldrh	r3, [r3, #2]
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005af0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	2b03      	cmp	r3, #3
 8005afc:	d104      	bne.n	8005b08 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005afe:	6839      	ldr	r1, [r7, #0]
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f000 f9bc 	bl	8005e7e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b06:	e01d      	b.n	8005b44 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	7bfa      	ldrb	r2, [r7, #15]
 8005b0c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005b10:	7bfb      	ldrb	r3, [r7, #15]
 8005b12:	4619      	mov	r1, r3
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f000 fee1 	bl	80068dc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 fa86 	bl	800602c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005b20:	7bfb      	ldrb	r3, [r7, #15]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d004      	beq.n	8005b30 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2202      	movs	r2, #2
 8005b2a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b2e:	e009      	b.n	8005b44 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b38:	e004      	b.n	8005b44 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005b3a:	6839      	ldr	r1, [r7, #0]
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f000 f99e 	bl	8005e7e <USBD_CtlError>
  }
}
 8005b42:	bf00      	nop
 8005b44:	bf00      	nop
 8005b46:	3710      	adds	r7, #16
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b56:	2300      	movs	r3, #0
 8005b58:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	885b      	ldrh	r3, [r3, #2]
 8005b5e:	b2da      	uxtb	r2, r3
 8005b60:	4b4e      	ldr	r3, [pc, #312]	@ (8005c9c <USBD_SetConfig+0x150>)
 8005b62:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005b64:	4b4d      	ldr	r3, [pc, #308]	@ (8005c9c <USBD_SetConfig+0x150>)
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d905      	bls.n	8005b78 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005b6c:	6839      	ldr	r1, [r7, #0]
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 f985 	bl	8005e7e <USBD_CtlError>
    return USBD_FAIL;
 8005b74:	2303      	movs	r3, #3
 8005b76:	e08c      	b.n	8005c92 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	2b02      	cmp	r3, #2
 8005b82:	d002      	beq.n	8005b8a <USBD_SetConfig+0x3e>
 8005b84:	2b03      	cmp	r3, #3
 8005b86:	d029      	beq.n	8005bdc <USBD_SetConfig+0x90>
 8005b88:	e075      	b.n	8005c76 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005b8a:	4b44      	ldr	r3, [pc, #272]	@ (8005c9c <USBD_SetConfig+0x150>)
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d020      	beq.n	8005bd4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8005b92:	4b42      	ldr	r3, [pc, #264]	@ (8005c9c <USBD_SetConfig+0x150>)
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	461a      	mov	r2, r3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005b9c:	4b3f      	ldr	r3, [pc, #252]	@ (8005c9c <USBD_SetConfig+0x150>)
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f7fe ffe3 	bl	8004b6e <USBD_SetClassConfig>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005bac:	7bfb      	ldrb	r3, [r7, #15]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d008      	beq.n	8005bc4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8005bb2:	6839      	ldr	r1, [r7, #0]
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f000 f962 	bl	8005e7e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2202      	movs	r2, #2
 8005bbe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005bc2:	e065      	b.n	8005c90 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f000 fa31 	bl	800602c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2203      	movs	r2, #3
 8005bce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8005bd2:	e05d      	b.n	8005c90 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f000 fa29 	bl	800602c <USBD_CtlSendStatus>
      break;
 8005bda:	e059      	b.n	8005c90 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005bdc:	4b2f      	ldr	r3, [pc, #188]	@ (8005c9c <USBD_SetConfig+0x150>)
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d112      	bne.n	8005c0a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2202      	movs	r2, #2
 8005be8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8005bec:	4b2b      	ldr	r3, [pc, #172]	@ (8005c9c <USBD_SetConfig+0x150>)
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005bf6:	4b29      	ldr	r3, [pc, #164]	@ (8005c9c <USBD_SetConfig+0x150>)
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f7fe ffd2 	bl	8004ba6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 fa12 	bl	800602c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005c08:	e042      	b.n	8005c90 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8005c0a:	4b24      	ldr	r3, [pc, #144]	@ (8005c9c <USBD_SetConfig+0x150>)
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	461a      	mov	r2, r3
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d02a      	beq.n	8005c6e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	4619      	mov	r1, r3
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f7fe ffc0 	bl	8004ba6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005c26:	4b1d      	ldr	r3, [pc, #116]	@ (8005c9c <USBD_SetConfig+0x150>)
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005c30:	4b1a      	ldr	r3, [pc, #104]	@ (8005c9c <USBD_SetConfig+0x150>)
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	4619      	mov	r1, r3
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f7fe ff99 	bl	8004b6e <USBD_SetClassConfig>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005c40:	7bfb      	ldrb	r3, [r7, #15]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d00f      	beq.n	8005c66 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8005c46:	6839      	ldr	r1, [r7, #0]
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f000 f918 	bl	8005e7e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	4619      	mov	r1, r3
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f7fe ffa5 	bl	8004ba6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2202      	movs	r2, #2
 8005c60:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8005c64:	e014      	b.n	8005c90 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 f9e0 	bl	800602c <USBD_CtlSendStatus>
      break;
 8005c6c:	e010      	b.n	8005c90 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 f9dc 	bl	800602c <USBD_CtlSendStatus>
      break;
 8005c74:	e00c      	b.n	8005c90 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8005c76:	6839      	ldr	r1, [r7, #0]
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f000 f900 	bl	8005e7e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005c7e:	4b07      	ldr	r3, [pc, #28]	@ (8005c9c <USBD_SetConfig+0x150>)
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	4619      	mov	r1, r3
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f7fe ff8e 	bl	8004ba6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	73fb      	strb	r3, [r7, #15]
      break;
 8005c8e:	bf00      	nop
  }

  return ret;
 8005c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3710      	adds	r7, #16
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	2000011c 	.word	0x2000011c

08005ca0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b082      	sub	sp, #8
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	88db      	ldrh	r3, [r3, #6]
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d004      	beq.n	8005cbc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005cb2:	6839      	ldr	r1, [r7, #0]
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f000 f8e2 	bl	8005e7e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005cba:	e023      	b.n	8005d04 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	2b02      	cmp	r3, #2
 8005cc6:	dc02      	bgt.n	8005cce <USBD_GetConfig+0x2e>
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	dc03      	bgt.n	8005cd4 <USBD_GetConfig+0x34>
 8005ccc:	e015      	b.n	8005cfa <USBD_GetConfig+0x5a>
 8005cce:	2b03      	cmp	r3, #3
 8005cd0:	d00b      	beq.n	8005cea <USBD_GetConfig+0x4a>
 8005cd2:	e012      	b.n	8005cfa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	3308      	adds	r3, #8
 8005cde:	2201      	movs	r2, #1
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 f948 	bl	8005f78 <USBD_CtlSendData>
        break;
 8005ce8:	e00c      	b.n	8005d04 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	3304      	adds	r3, #4
 8005cee:	2201      	movs	r2, #1
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 f940 	bl	8005f78 <USBD_CtlSendData>
        break;
 8005cf8:	e004      	b.n	8005d04 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8005cfa:	6839      	ldr	r1, [r7, #0]
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 f8be 	bl	8005e7e <USBD_CtlError>
        break;
 8005d02:	bf00      	nop
}
 8005d04:	bf00      	nop
 8005d06:	3708      	adds	r7, #8
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	3b01      	subs	r3, #1
 8005d20:	2b02      	cmp	r3, #2
 8005d22:	d81e      	bhi.n	8005d62 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	88db      	ldrh	r3, [r3, #6]
 8005d28:	2b02      	cmp	r3, #2
 8005d2a:	d004      	beq.n	8005d36 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8005d2c:	6839      	ldr	r1, [r7, #0]
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 f8a5 	bl	8005e7e <USBD_CtlError>
        break;
 8005d34:	e01a      	b.n	8005d6c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2201      	movs	r2, #1
 8005d3a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d005      	beq.n	8005d52 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	f043 0202 	orr.w	r2, r3, #2
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	330c      	adds	r3, #12
 8005d56:	2202      	movs	r2, #2
 8005d58:	4619      	mov	r1, r3
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 f90c 	bl	8005f78 <USBD_CtlSendData>
      break;
 8005d60:	e004      	b.n	8005d6c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8005d62:	6839      	ldr	r1, [r7, #0]
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f000 f88a 	bl	8005e7e <USBD_CtlError>
      break;
 8005d6a:	bf00      	nop
  }
}
 8005d6c:	bf00      	nop
 8005d6e:	3708      	adds	r7, #8
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b082      	sub	sp, #8
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	885b      	ldrh	r3, [r3, #2]
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d107      	bne.n	8005d96 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2201      	movs	r2, #1
 8005d8a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 f94c 	bl	800602c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8005d94:	e013      	b.n	8005dbe <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	885b      	ldrh	r3, [r3, #2]
 8005d9a:	2b02      	cmp	r3, #2
 8005d9c:	d10b      	bne.n	8005db6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	889b      	ldrh	r3, [r3, #4]
 8005da2:	0a1b      	lsrs	r3, r3, #8
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	b2da      	uxtb	r2, r3
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 f93c 	bl	800602c <USBD_CtlSendStatus>
}
 8005db4:	e003      	b.n	8005dbe <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8005db6:	6839      	ldr	r1, [r7, #0]
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f000 f860 	bl	8005e7e <USBD_CtlError>
}
 8005dbe:	bf00      	nop
 8005dc0:	3708      	adds	r7, #8
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}

08005dc6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005dc6:	b580      	push	{r7, lr}
 8005dc8:	b082      	sub	sp, #8
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
 8005dce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	3b01      	subs	r3, #1
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d80b      	bhi.n	8005df6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	885b      	ldrh	r3, [r3, #2]
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d10c      	bne.n	8005e00 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 f91c 	bl	800602c <USBD_CtlSendStatus>
      }
      break;
 8005df4:	e004      	b.n	8005e00 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8005df6:	6839      	ldr	r1, [r7, #0]
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f000 f840 	bl	8005e7e <USBD_CtlError>
      break;
 8005dfe:	e000      	b.n	8005e02 <USBD_ClrFeature+0x3c>
      break;
 8005e00:	bf00      	nop
  }
}
 8005e02:	bf00      	nop
 8005e04:	3708      	adds	r7, #8
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}

08005e0a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005e0a:	b580      	push	{r7, lr}
 8005e0c:	b084      	sub	sp, #16
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	6078      	str	r0, [r7, #4]
 8005e12:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	781a      	ldrb	r2, [r3, #0]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	3301      	adds	r3, #1
 8005e24:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	781a      	ldrb	r2, [r3, #0]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	3301      	adds	r3, #1
 8005e32:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005e34:	68f8      	ldr	r0, [r7, #12]
 8005e36:	f7ff fa40 	bl	80052ba <SWAPBYTE>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	3301      	adds	r3, #1
 8005e46:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005e4e:	68f8      	ldr	r0, [r7, #12]
 8005e50:	f7ff fa33 	bl	80052ba <SWAPBYTE>
 8005e54:	4603      	mov	r3, r0
 8005e56:	461a      	mov	r2, r3
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	3301      	adds	r3, #1
 8005e60:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	3301      	adds	r3, #1
 8005e66:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8005e68:	68f8      	ldr	r0, [r7, #12]
 8005e6a:	f7ff fa26 	bl	80052ba <SWAPBYTE>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	461a      	mov	r2, r3
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	80da      	strh	r2, [r3, #6]
}
 8005e76:	bf00      	nop
 8005e78:	3710      	adds	r7, #16
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}

08005e7e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b082      	sub	sp, #8
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
 8005e86:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005e88:	2180      	movs	r1, #128	@ 0x80
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 fcbc 	bl	8006808 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005e90:	2100      	movs	r1, #0
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 fcb8 	bl	8006808 <USBD_LL_StallEP>
}
 8005e98:	bf00      	nop
 8005e9a:	3708      	adds	r7, #8
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b086      	sub	sp, #24
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005eac:	2300      	movs	r3, #0
 8005eae:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d042      	beq.n	8005f3c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8005eba:	6938      	ldr	r0, [r7, #16]
 8005ebc:	f000 f842 	bl	8005f44 <USBD_GetLen>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	005b      	lsls	r3, r3, #1
 8005ec6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005eca:	d808      	bhi.n	8005ede <USBD_GetString+0x3e>
 8005ecc:	6938      	ldr	r0, [r7, #16]
 8005ece:	f000 f839 	bl	8005f44 <USBD_GetLen>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	3301      	adds	r3, #1
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	005b      	lsls	r3, r3, #1
 8005eda:	b29a      	uxth	r2, r3
 8005edc:	e001      	b.n	8005ee2 <USBD_GetString+0x42>
 8005ede:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8005ee6:	7dfb      	ldrb	r3, [r7, #23]
 8005ee8:	68ba      	ldr	r2, [r7, #8]
 8005eea:	4413      	add	r3, r2
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	7812      	ldrb	r2, [r2, #0]
 8005ef0:	701a      	strb	r2, [r3, #0]
  idx++;
 8005ef2:	7dfb      	ldrb	r3, [r7, #23]
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8005ef8:	7dfb      	ldrb	r3, [r7, #23]
 8005efa:	68ba      	ldr	r2, [r7, #8]
 8005efc:	4413      	add	r3, r2
 8005efe:	2203      	movs	r2, #3
 8005f00:	701a      	strb	r2, [r3, #0]
  idx++;
 8005f02:	7dfb      	ldrb	r3, [r7, #23]
 8005f04:	3301      	adds	r3, #1
 8005f06:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8005f08:	e013      	b.n	8005f32 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8005f0a:	7dfb      	ldrb	r3, [r7, #23]
 8005f0c:	68ba      	ldr	r2, [r7, #8]
 8005f0e:	4413      	add	r3, r2
 8005f10:	693a      	ldr	r2, [r7, #16]
 8005f12:	7812      	ldrb	r2, [r2, #0]
 8005f14:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	3301      	adds	r3, #1
 8005f1a:	613b      	str	r3, [r7, #16]
    idx++;
 8005f1c:	7dfb      	ldrb	r3, [r7, #23]
 8005f1e:	3301      	adds	r3, #1
 8005f20:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8005f22:	7dfb      	ldrb	r3, [r7, #23]
 8005f24:	68ba      	ldr	r2, [r7, #8]
 8005f26:	4413      	add	r3, r2
 8005f28:	2200      	movs	r2, #0
 8005f2a:	701a      	strb	r2, [r3, #0]
    idx++;
 8005f2c:	7dfb      	ldrb	r3, [r7, #23]
 8005f2e:	3301      	adds	r3, #1
 8005f30:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d1e7      	bne.n	8005f0a <USBD_GetString+0x6a>
 8005f3a:	e000      	b.n	8005f3e <USBD_GetString+0x9e>
    return;
 8005f3c:	bf00      	nop
  }
}
 8005f3e:	3718      	adds	r7, #24
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}

08005f44 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b085      	sub	sp, #20
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8005f54:	e005      	b.n	8005f62 <USBD_GetLen+0x1e>
  {
    len++;
 8005f56:	7bfb      	ldrb	r3, [r7, #15]
 8005f58:	3301      	adds	r3, #1
 8005f5a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	3301      	adds	r3, #1
 8005f60:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d1f5      	bne.n	8005f56 <USBD_GetLen+0x12>
  }

  return len;
 8005f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3714      	adds	r7, #20
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2202      	movs	r2, #2
 8005f88:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	68ba      	ldr	r2, [r7, #8]
 8005f9c:	2100      	movs	r1, #0
 8005f9e:	68f8      	ldr	r0, [r7, #12]
 8005fa0:	f000 fcbb 	bl	800691a <USBD_LL_Transmit>

  return USBD_OK;
 8005fa4:	2300      	movs	r3, #0
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3710      	adds	r7, #16
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}

08005fae <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005fae:	b580      	push	{r7, lr}
 8005fb0:	b084      	sub	sp, #16
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	60f8      	str	r0, [r7, #12]
 8005fb6:	60b9      	str	r1, [r7, #8]
 8005fb8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	68ba      	ldr	r2, [r7, #8]
 8005fbe:	2100      	movs	r1, #0
 8005fc0:	68f8      	ldr	r0, [r7, #12]
 8005fc2:	f000 fcaa 	bl	800691a <USBD_LL_Transmit>

  return USBD_OK;
 8005fc6:	2300      	movs	r3, #0
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3710      	adds	r7, #16
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b084      	sub	sp, #16
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	60b9      	str	r1, [r7, #8]
 8005fda:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2203      	movs	r2, #3
 8005fe0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	68ba      	ldr	r2, [r7, #8]
 8005ff8:	2100      	movs	r1, #0
 8005ffa:	68f8      	ldr	r0, [r7, #12]
 8005ffc:	f000 fcae 	bl	800695c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006000:	2300      	movs	r3, #0
}
 8006002:	4618      	mov	r0, r3
 8006004:	3710      	adds	r7, #16
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}

0800600a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800600a:	b580      	push	{r7, lr}
 800600c:	b084      	sub	sp, #16
 800600e:	af00      	add	r7, sp, #0
 8006010:	60f8      	str	r0, [r7, #12]
 8006012:	60b9      	str	r1, [r7, #8]
 8006014:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	68ba      	ldr	r2, [r7, #8]
 800601a:	2100      	movs	r1, #0
 800601c:	68f8      	ldr	r0, [r7, #12]
 800601e:	f000 fc9d 	bl	800695c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006022:	2300      	movs	r3, #0
}
 8006024:	4618      	mov	r0, r3
 8006026:	3710      	adds	r7, #16
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b082      	sub	sp, #8
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2204      	movs	r2, #4
 8006038:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800603c:	2300      	movs	r3, #0
 800603e:	2200      	movs	r2, #0
 8006040:	2100      	movs	r1, #0
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 fc69 	bl	800691a <USBD_LL_Transmit>

  return USBD_OK;
 8006048:	2300      	movs	r3, #0
}
 800604a:	4618      	mov	r0, r3
 800604c:	3708      	adds	r7, #8
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}

08006052 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006052:	b580      	push	{r7, lr}
 8006054:	b082      	sub	sp, #8
 8006056:	af00      	add	r7, sp, #0
 8006058:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2205      	movs	r2, #5
 800605e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006062:	2300      	movs	r3, #0
 8006064:	2200      	movs	r2, #0
 8006066:	2100      	movs	r1, #0
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 fc77 	bl	800695c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800606e:	2300      	movs	r3, #0
}
 8006070:	4618      	mov	r0, r3
 8006072:	3708      	adds	r7, #8
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800607c:	2200      	movs	r2, #0
 800607e:	4912      	ldr	r1, [pc, #72]	@ (80060c8 <MX_USB_DEVICE_Init+0x50>)
 8006080:	4812      	ldr	r0, [pc, #72]	@ (80060cc <MX_USB_DEVICE_Init+0x54>)
 8006082:	f7fe fcf7 	bl	8004a74 <USBD_Init>
 8006086:	4603      	mov	r3, r0
 8006088:	2b00      	cmp	r3, #0
 800608a:	d001      	beq.n	8006090 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800608c:	f7fa fac8 	bl	8000620 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006090:	490f      	ldr	r1, [pc, #60]	@ (80060d0 <MX_USB_DEVICE_Init+0x58>)
 8006092:	480e      	ldr	r0, [pc, #56]	@ (80060cc <MX_USB_DEVICE_Init+0x54>)
 8006094:	f7fe fd1e 	bl	8004ad4 <USBD_RegisterClass>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d001      	beq.n	80060a2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800609e:	f7fa fabf 	bl	8000620 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80060a2:	490c      	ldr	r1, [pc, #48]	@ (80060d4 <MX_USB_DEVICE_Init+0x5c>)
 80060a4:	4809      	ldr	r0, [pc, #36]	@ (80060cc <MX_USB_DEVICE_Init+0x54>)
 80060a6:	f7fe fc55 	bl	8004954 <USBD_CDC_RegisterInterface>
 80060aa:	4603      	mov	r3, r0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d001      	beq.n	80060b4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80060b0:	f7fa fab6 	bl	8000620 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80060b4:	4805      	ldr	r0, [pc, #20]	@ (80060cc <MX_USB_DEVICE_Init+0x54>)
 80060b6:	f7fe fd43 	bl	8004b40 <USBD_Start>
 80060ba:	4603      	mov	r3, r0
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d001      	beq.n	80060c4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80060c0:	f7fa faae 	bl	8000620 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80060c4:	bf00      	nop
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	200000ac 	.word	0x200000ac
 80060cc:	20000120 	.word	0x20000120
 80060d0:	20000018 	.word	0x20000018
 80060d4:	20000098 	.word	0x20000098

080060d8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80060dc:	2200      	movs	r2, #0
 80060de:	4905      	ldr	r1, [pc, #20]	@ (80060f4 <CDC_Init_FS+0x1c>)
 80060e0:	4805      	ldr	r0, [pc, #20]	@ (80060f8 <CDC_Init_FS+0x20>)
 80060e2:	f7fe fc51 	bl	8004988 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80060e6:	4905      	ldr	r1, [pc, #20]	@ (80060fc <CDC_Init_FS+0x24>)
 80060e8:	4803      	ldr	r0, [pc, #12]	@ (80060f8 <CDC_Init_FS+0x20>)
 80060ea:	f7fe fc6f 	bl	80049cc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80060ee:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	bd80      	pop	{r7, pc}
 80060f4:	200007fc 	.word	0x200007fc
 80060f8:	20000120 	.word	0x20000120
 80060fc:	200003fc 	.word	0x200003fc

08006100 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006100:	b480      	push	{r7}
 8006102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006104:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006106:	4618      	mov	r0, r3
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006110:	b480      	push	{r7}
 8006112:	b083      	sub	sp, #12
 8006114:	af00      	add	r7, sp, #0
 8006116:	4603      	mov	r3, r0
 8006118:	6039      	str	r1, [r7, #0]
 800611a:	71fb      	strb	r3, [r7, #7]
 800611c:	4613      	mov	r3, r2
 800611e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006120:	79fb      	ldrb	r3, [r7, #7]
 8006122:	2b23      	cmp	r3, #35	@ 0x23
 8006124:	d84a      	bhi.n	80061bc <CDC_Control_FS+0xac>
 8006126:	a201      	add	r2, pc, #4	@ (adr r2, 800612c <CDC_Control_FS+0x1c>)
 8006128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800612c:	080061bd 	.word	0x080061bd
 8006130:	080061bd 	.word	0x080061bd
 8006134:	080061bd 	.word	0x080061bd
 8006138:	080061bd 	.word	0x080061bd
 800613c:	080061bd 	.word	0x080061bd
 8006140:	080061bd 	.word	0x080061bd
 8006144:	080061bd 	.word	0x080061bd
 8006148:	080061bd 	.word	0x080061bd
 800614c:	080061bd 	.word	0x080061bd
 8006150:	080061bd 	.word	0x080061bd
 8006154:	080061bd 	.word	0x080061bd
 8006158:	080061bd 	.word	0x080061bd
 800615c:	080061bd 	.word	0x080061bd
 8006160:	080061bd 	.word	0x080061bd
 8006164:	080061bd 	.word	0x080061bd
 8006168:	080061bd 	.word	0x080061bd
 800616c:	080061bd 	.word	0x080061bd
 8006170:	080061bd 	.word	0x080061bd
 8006174:	080061bd 	.word	0x080061bd
 8006178:	080061bd 	.word	0x080061bd
 800617c:	080061bd 	.word	0x080061bd
 8006180:	080061bd 	.word	0x080061bd
 8006184:	080061bd 	.word	0x080061bd
 8006188:	080061bd 	.word	0x080061bd
 800618c:	080061bd 	.word	0x080061bd
 8006190:	080061bd 	.word	0x080061bd
 8006194:	080061bd 	.word	0x080061bd
 8006198:	080061bd 	.word	0x080061bd
 800619c:	080061bd 	.word	0x080061bd
 80061a0:	080061bd 	.word	0x080061bd
 80061a4:	080061bd 	.word	0x080061bd
 80061a8:	080061bd 	.word	0x080061bd
 80061ac:	080061bd 	.word	0x080061bd
 80061b0:	080061bd 	.word	0x080061bd
 80061b4:	080061bd 	.word	0x080061bd
 80061b8:	080061bd 	.word	0x080061bd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80061bc:	bf00      	nop
  }

  return (USBD_OK);
 80061be:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	370c      	adds	r7, #12
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b082      	sub	sp, #8
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80061d6:	6879      	ldr	r1, [r7, #4]
 80061d8:	4805      	ldr	r0, [pc, #20]	@ (80061f0 <CDC_Receive_FS+0x24>)
 80061da:	f7fe fbf7 	bl	80049cc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80061de:	4804      	ldr	r0, [pc, #16]	@ (80061f0 <CDC_Receive_FS+0x24>)
 80061e0:	f7fe fc12 	bl	8004a08 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80061e4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3708      	adds	r7, #8
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	bf00      	nop
 80061f0:	20000120 	.word	0x20000120

080061f4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b087      	sub	sp, #28
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	60f8      	str	r0, [r7, #12]
 80061fc:	60b9      	str	r1, [r7, #8]
 80061fe:	4613      	mov	r3, r2
 8006200:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006202:	2300      	movs	r3, #0
 8006204:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006206:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800620a:	4618      	mov	r0, r3
 800620c:	371c      	adds	r7, #28
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr
	...

08006218 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	4603      	mov	r3, r0
 8006220:	6039      	str	r1, [r7, #0]
 8006222:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	2212      	movs	r2, #18
 8006228:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800622a:	4b03      	ldr	r3, [pc, #12]	@ (8006238 <USBD_FS_DeviceDescriptor+0x20>)
}
 800622c:	4618      	mov	r0, r3
 800622e:	370c      	adds	r7, #12
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr
 8006238:	200000c8 	.word	0x200000c8

0800623c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800623c:	b480      	push	{r7}
 800623e:	b083      	sub	sp, #12
 8006240:	af00      	add	r7, sp, #0
 8006242:	4603      	mov	r3, r0
 8006244:	6039      	str	r1, [r7, #0]
 8006246:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	2204      	movs	r2, #4
 800624c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800624e:	4b03      	ldr	r3, [pc, #12]	@ (800625c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006250:	4618      	mov	r0, r3
 8006252:	370c      	adds	r7, #12
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr
 800625c:	200000dc 	.word	0x200000dc

08006260 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b082      	sub	sp, #8
 8006264:	af00      	add	r7, sp, #0
 8006266:	4603      	mov	r3, r0
 8006268:	6039      	str	r1, [r7, #0]
 800626a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800626c:	79fb      	ldrb	r3, [r7, #7]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d105      	bne.n	800627e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006272:	683a      	ldr	r2, [r7, #0]
 8006274:	4907      	ldr	r1, [pc, #28]	@ (8006294 <USBD_FS_ProductStrDescriptor+0x34>)
 8006276:	4808      	ldr	r0, [pc, #32]	@ (8006298 <USBD_FS_ProductStrDescriptor+0x38>)
 8006278:	f7ff fe12 	bl	8005ea0 <USBD_GetString>
 800627c:	e004      	b.n	8006288 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800627e:	683a      	ldr	r2, [r7, #0]
 8006280:	4904      	ldr	r1, [pc, #16]	@ (8006294 <USBD_FS_ProductStrDescriptor+0x34>)
 8006282:	4805      	ldr	r0, [pc, #20]	@ (8006298 <USBD_FS_ProductStrDescriptor+0x38>)
 8006284:	f7ff fe0c 	bl	8005ea0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006288:	4b02      	ldr	r3, [pc, #8]	@ (8006294 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800628a:	4618      	mov	r0, r3
 800628c:	3708      	adds	r7, #8
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
 8006292:	bf00      	nop
 8006294:	20000bfc 	.word	0x20000bfc
 8006298:	08006abc 	.word	0x08006abc

0800629c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b082      	sub	sp, #8
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	4603      	mov	r3, r0
 80062a4:	6039      	str	r1, [r7, #0]
 80062a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80062a8:	683a      	ldr	r2, [r7, #0]
 80062aa:	4904      	ldr	r1, [pc, #16]	@ (80062bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80062ac:	4804      	ldr	r0, [pc, #16]	@ (80062c0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80062ae:	f7ff fdf7 	bl	8005ea0 <USBD_GetString>
  return USBD_StrDesc;
 80062b2:	4b02      	ldr	r3, [pc, #8]	@ (80062bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3708      	adds	r7, #8
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}
 80062bc:	20000bfc 	.word	0x20000bfc
 80062c0:	08006ad4 	.word	0x08006ad4

080062c4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b082      	sub	sp, #8
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	4603      	mov	r3, r0
 80062cc:	6039      	str	r1, [r7, #0]
 80062ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	221a      	movs	r2, #26
 80062d4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80062d6:	f000 f843 	bl	8006360 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80062da:	4b02      	ldr	r3, [pc, #8]	@ (80062e4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3708      	adds	r7, #8
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	200000e0 	.word	0x200000e0

080062e8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	4603      	mov	r3, r0
 80062f0:	6039      	str	r1, [r7, #0]
 80062f2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80062f4:	79fb      	ldrb	r3, [r7, #7]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d105      	bne.n	8006306 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80062fa:	683a      	ldr	r2, [r7, #0]
 80062fc:	4907      	ldr	r1, [pc, #28]	@ (800631c <USBD_FS_ConfigStrDescriptor+0x34>)
 80062fe:	4808      	ldr	r0, [pc, #32]	@ (8006320 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006300:	f7ff fdce 	bl	8005ea0 <USBD_GetString>
 8006304:	e004      	b.n	8006310 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006306:	683a      	ldr	r2, [r7, #0]
 8006308:	4904      	ldr	r1, [pc, #16]	@ (800631c <USBD_FS_ConfigStrDescriptor+0x34>)
 800630a:	4805      	ldr	r0, [pc, #20]	@ (8006320 <USBD_FS_ConfigStrDescriptor+0x38>)
 800630c:	f7ff fdc8 	bl	8005ea0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006310:	4b02      	ldr	r3, [pc, #8]	@ (800631c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006312:	4618      	mov	r0, r3
 8006314:	3708      	adds	r7, #8
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
 800631a:	bf00      	nop
 800631c:	20000bfc 	.word	0x20000bfc
 8006320:	08006ae8 	.word	0x08006ae8

08006324 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b082      	sub	sp, #8
 8006328:	af00      	add	r7, sp, #0
 800632a:	4603      	mov	r3, r0
 800632c:	6039      	str	r1, [r7, #0]
 800632e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006330:	79fb      	ldrb	r3, [r7, #7]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d105      	bne.n	8006342 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006336:	683a      	ldr	r2, [r7, #0]
 8006338:	4907      	ldr	r1, [pc, #28]	@ (8006358 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800633a:	4808      	ldr	r0, [pc, #32]	@ (800635c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800633c:	f7ff fdb0 	bl	8005ea0 <USBD_GetString>
 8006340:	e004      	b.n	800634c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006342:	683a      	ldr	r2, [r7, #0]
 8006344:	4904      	ldr	r1, [pc, #16]	@ (8006358 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006346:	4805      	ldr	r0, [pc, #20]	@ (800635c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006348:	f7ff fdaa 	bl	8005ea0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800634c:	4b02      	ldr	r3, [pc, #8]	@ (8006358 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800634e:	4618      	mov	r0, r3
 8006350:	3708      	adds	r7, #8
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
 8006356:	bf00      	nop
 8006358:	20000bfc 	.word	0x20000bfc
 800635c:	08006af4 	.word	0x08006af4

08006360 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006366:	4b0f      	ldr	r3, [pc, #60]	@ (80063a4 <Get_SerialNum+0x44>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800636c:	4b0e      	ldr	r3, [pc, #56]	@ (80063a8 <Get_SerialNum+0x48>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006372:	4b0e      	ldr	r3, [pc, #56]	@ (80063ac <Get_SerialNum+0x4c>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006378:	68fa      	ldr	r2, [r7, #12]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4413      	add	r3, r2
 800637e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d009      	beq.n	800639a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006386:	2208      	movs	r2, #8
 8006388:	4909      	ldr	r1, [pc, #36]	@ (80063b0 <Get_SerialNum+0x50>)
 800638a:	68f8      	ldr	r0, [r7, #12]
 800638c:	f000 f814 	bl	80063b8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006390:	2204      	movs	r2, #4
 8006392:	4908      	ldr	r1, [pc, #32]	@ (80063b4 <Get_SerialNum+0x54>)
 8006394:	68b8      	ldr	r0, [r7, #8]
 8006396:	f000 f80f 	bl	80063b8 <IntToUnicode>
  }
}
 800639a:	bf00      	nop
 800639c:	3710      	adds	r7, #16
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
 80063a2:	bf00      	nop
 80063a4:	1fff7a10 	.word	0x1fff7a10
 80063a8:	1fff7a14 	.word	0x1fff7a14
 80063ac:	1fff7a18 	.word	0x1fff7a18
 80063b0:	200000e2 	.word	0x200000e2
 80063b4:	200000f2 	.word	0x200000f2

080063b8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b087      	sub	sp, #28
 80063bc:	af00      	add	r7, sp, #0
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	60b9      	str	r1, [r7, #8]
 80063c2:	4613      	mov	r3, r2
 80063c4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80063c6:	2300      	movs	r3, #0
 80063c8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80063ca:	2300      	movs	r3, #0
 80063cc:	75fb      	strb	r3, [r7, #23]
 80063ce:	e027      	b.n	8006420 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	0f1b      	lsrs	r3, r3, #28
 80063d4:	2b09      	cmp	r3, #9
 80063d6:	d80b      	bhi.n	80063f0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	0f1b      	lsrs	r3, r3, #28
 80063dc:	b2da      	uxtb	r2, r3
 80063de:	7dfb      	ldrb	r3, [r7, #23]
 80063e0:	005b      	lsls	r3, r3, #1
 80063e2:	4619      	mov	r1, r3
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	440b      	add	r3, r1
 80063e8:	3230      	adds	r2, #48	@ 0x30
 80063ea:	b2d2      	uxtb	r2, r2
 80063ec:	701a      	strb	r2, [r3, #0]
 80063ee:	e00a      	b.n	8006406 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	0f1b      	lsrs	r3, r3, #28
 80063f4:	b2da      	uxtb	r2, r3
 80063f6:	7dfb      	ldrb	r3, [r7, #23]
 80063f8:	005b      	lsls	r3, r3, #1
 80063fa:	4619      	mov	r1, r3
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	440b      	add	r3, r1
 8006400:	3237      	adds	r2, #55	@ 0x37
 8006402:	b2d2      	uxtb	r2, r2
 8006404:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	011b      	lsls	r3, r3, #4
 800640a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800640c:	7dfb      	ldrb	r3, [r7, #23]
 800640e:	005b      	lsls	r3, r3, #1
 8006410:	3301      	adds	r3, #1
 8006412:	68ba      	ldr	r2, [r7, #8]
 8006414:	4413      	add	r3, r2
 8006416:	2200      	movs	r2, #0
 8006418:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800641a:	7dfb      	ldrb	r3, [r7, #23]
 800641c:	3301      	adds	r3, #1
 800641e:	75fb      	strb	r3, [r7, #23]
 8006420:	7dfa      	ldrb	r2, [r7, #23]
 8006422:	79fb      	ldrb	r3, [r7, #7]
 8006424:	429a      	cmp	r2, r3
 8006426:	d3d3      	bcc.n	80063d0 <IntToUnicode+0x18>
  }
}
 8006428:	bf00      	nop
 800642a:	bf00      	nop
 800642c:	371c      	adds	r7, #28
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr
	...

08006438 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b08a      	sub	sp, #40	@ 0x28
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006440:	f107 0314 	add.w	r3, r7, #20
 8006444:	2200      	movs	r2, #0
 8006446:	601a      	str	r2, [r3, #0]
 8006448:	605a      	str	r2, [r3, #4]
 800644a:	609a      	str	r2, [r3, #8]
 800644c:	60da      	str	r2, [r3, #12]
 800644e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006458:	d13a      	bne.n	80064d0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800645a:	2300      	movs	r3, #0
 800645c:	613b      	str	r3, [r7, #16]
 800645e:	4b1e      	ldr	r3, [pc, #120]	@ (80064d8 <HAL_PCD_MspInit+0xa0>)
 8006460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006462:	4a1d      	ldr	r2, [pc, #116]	@ (80064d8 <HAL_PCD_MspInit+0xa0>)
 8006464:	f043 0301 	orr.w	r3, r3, #1
 8006468:	6313      	str	r3, [r2, #48]	@ 0x30
 800646a:	4b1b      	ldr	r3, [pc, #108]	@ (80064d8 <HAL_PCD_MspInit+0xa0>)
 800646c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800646e:	f003 0301 	and.w	r3, r3, #1
 8006472:	613b      	str	r3, [r7, #16]
 8006474:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006476:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800647a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800647c:	2302      	movs	r3, #2
 800647e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006480:	2300      	movs	r3, #0
 8006482:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006484:	2303      	movs	r3, #3
 8006486:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006488:	230a      	movs	r3, #10
 800648a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800648c:	f107 0314 	add.w	r3, r7, #20
 8006490:	4619      	mov	r1, r3
 8006492:	4812      	ldr	r0, [pc, #72]	@ (80064dc <HAL_PCD_MspInit+0xa4>)
 8006494:	f7fa fb10 	bl	8000ab8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006498:	4b0f      	ldr	r3, [pc, #60]	@ (80064d8 <HAL_PCD_MspInit+0xa0>)
 800649a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800649c:	4a0e      	ldr	r2, [pc, #56]	@ (80064d8 <HAL_PCD_MspInit+0xa0>)
 800649e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064a2:	6353      	str	r3, [r2, #52]	@ 0x34
 80064a4:	2300      	movs	r3, #0
 80064a6:	60fb      	str	r3, [r7, #12]
 80064a8:	4b0b      	ldr	r3, [pc, #44]	@ (80064d8 <HAL_PCD_MspInit+0xa0>)
 80064aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064ac:	4a0a      	ldr	r2, [pc, #40]	@ (80064d8 <HAL_PCD_MspInit+0xa0>)
 80064ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80064b2:	6453      	str	r3, [r2, #68]	@ 0x44
 80064b4:	4b08      	ldr	r3, [pc, #32]	@ (80064d8 <HAL_PCD_MspInit+0xa0>)
 80064b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80064bc:	60fb      	str	r3, [r7, #12]
 80064be:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80064c0:	2200      	movs	r2, #0
 80064c2:	2100      	movs	r1, #0
 80064c4:	2043      	movs	r0, #67	@ 0x43
 80064c6:	f7fa fac0 	bl	8000a4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80064ca:	2043      	movs	r0, #67	@ 0x43
 80064cc:	f7fa fad9 	bl	8000a82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80064d0:	bf00      	nop
 80064d2:	3728      	adds	r7, #40	@ 0x28
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}
 80064d8:	40023800 	.word	0x40023800
 80064dc:	40020000 	.word	0x40020000

080064e0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b082      	sub	sp, #8
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80064f4:	4619      	mov	r1, r3
 80064f6:	4610      	mov	r0, r2
 80064f8:	f7fe fb6f 	bl	8004bda <USBD_LL_SetupStage>
}
 80064fc:	bf00      	nop
 80064fe:	3708      	adds	r7, #8
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}

08006504 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b082      	sub	sp, #8
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	460b      	mov	r3, r1
 800650e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8006516:	78fa      	ldrb	r2, [r7, #3]
 8006518:	6879      	ldr	r1, [r7, #4]
 800651a:	4613      	mov	r3, r2
 800651c:	00db      	lsls	r3, r3, #3
 800651e:	4413      	add	r3, r2
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	440b      	add	r3, r1
 8006524:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	78fb      	ldrb	r3, [r7, #3]
 800652c:	4619      	mov	r1, r3
 800652e:	f7fe fba9 	bl	8004c84 <USBD_LL_DataOutStage>
}
 8006532:	bf00      	nop
 8006534:	3708      	adds	r7, #8
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}

0800653a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800653a:	b580      	push	{r7, lr}
 800653c:	b082      	sub	sp, #8
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
 8006542:	460b      	mov	r3, r1
 8006544:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800654c:	78fa      	ldrb	r2, [r7, #3]
 800654e:	6879      	ldr	r1, [r7, #4]
 8006550:	4613      	mov	r3, r2
 8006552:	00db      	lsls	r3, r3, #3
 8006554:	4413      	add	r3, r2
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	440b      	add	r3, r1
 800655a:	3320      	adds	r3, #32
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	78fb      	ldrb	r3, [r7, #3]
 8006560:	4619      	mov	r1, r3
 8006562:	f7fe fc42 	bl	8004dea <USBD_LL_DataInStage>
}
 8006566:	bf00      	nop
 8006568:	3708      	adds	r7, #8
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}

0800656e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800656e:	b580      	push	{r7, lr}
 8006570:	b082      	sub	sp, #8
 8006572:	af00      	add	r7, sp, #0
 8006574:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800657c:	4618      	mov	r0, r3
 800657e:	f7fe fd7c 	bl	800507a <USBD_LL_SOF>
}
 8006582:	bf00      	nop
 8006584:	3708      	adds	r7, #8
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}

0800658a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800658a:	b580      	push	{r7, lr}
 800658c:	b084      	sub	sp, #16
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006592:	2301      	movs	r3, #1
 8006594:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	79db      	ldrb	r3, [r3, #7]
 800659a:	2b02      	cmp	r3, #2
 800659c:	d001      	beq.n	80065a2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800659e:	f7fa f83f 	bl	8000620 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80065a8:	7bfa      	ldrb	r2, [r7, #15]
 80065aa:	4611      	mov	r1, r2
 80065ac:	4618      	mov	r0, r3
 80065ae:	f7fe fd20 	bl	8004ff2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80065b8:	4618      	mov	r0, r3
 80065ba:	f7fe fcc8 	bl	8004f4e <USBD_LL_Reset>
}
 80065be:	bf00      	nop
 80065c0:	3710      	adds	r7, #16
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
	...

080065c8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b082      	sub	sp, #8
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80065d6:	4618      	mov	r0, r3
 80065d8:	f7fe fd1b 	bl	8005012 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	6812      	ldr	r2, [r2, #0]
 80065ea:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80065ee:	f043 0301 	orr.w	r3, r3, #1
 80065f2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	7adb      	ldrb	r3, [r3, #11]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d005      	beq.n	8006608 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80065fc:	4b04      	ldr	r3, [pc, #16]	@ (8006610 <HAL_PCD_SuspendCallback+0x48>)
 80065fe:	691b      	ldr	r3, [r3, #16]
 8006600:	4a03      	ldr	r2, [pc, #12]	@ (8006610 <HAL_PCD_SuspendCallback+0x48>)
 8006602:	f043 0306 	orr.w	r3, r3, #6
 8006606:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006608:	bf00      	nop
 800660a:	3708      	adds	r7, #8
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}
 8006610:	e000ed00 	.word	0xe000ed00

08006614 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b082      	sub	sp, #8
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006622:	4618      	mov	r0, r3
 8006624:	f7fe fd11 	bl	800504a <USBD_LL_Resume>
}
 8006628:	bf00      	nop
 800662a:	3708      	adds	r7, #8
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}

08006630 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b082      	sub	sp, #8
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	460b      	mov	r3, r1
 800663a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006642:	78fa      	ldrb	r2, [r7, #3]
 8006644:	4611      	mov	r1, r2
 8006646:	4618      	mov	r0, r3
 8006648:	f7fe fd69 	bl	800511e <USBD_LL_IsoOUTIncomplete>
}
 800664c:	bf00      	nop
 800664e:	3708      	adds	r7, #8
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b082      	sub	sp, #8
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	460b      	mov	r3, r1
 800665e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006666:	78fa      	ldrb	r2, [r7, #3]
 8006668:	4611      	mov	r1, r2
 800666a:	4618      	mov	r0, r3
 800666c:	f7fe fd25 	bl	80050ba <USBD_LL_IsoINIncomplete>
}
 8006670:	bf00      	nop
 8006672:	3708      	adds	r7, #8
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}

08006678 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b082      	sub	sp, #8
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006686:	4618      	mov	r0, r3
 8006688:	f7fe fd7b 	bl	8005182 <USBD_LL_DevConnected>
}
 800668c:	bf00      	nop
 800668e:	3708      	adds	r7, #8
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}

08006694 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b082      	sub	sp, #8
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80066a2:	4618      	mov	r0, r3
 80066a4:	f7fe fd78 	bl	8005198 <USBD_LL_DevDisconnected>
}
 80066a8:	bf00      	nop
 80066aa:	3708      	adds	r7, #8
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}

080066b0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b082      	sub	sp, #8
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d13c      	bne.n	800673a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80066c0:	4a20      	ldr	r2, [pc, #128]	@ (8006744 <USBD_LL_Init+0x94>)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4a1e      	ldr	r2, [pc, #120]	@ (8006744 <USBD_LL_Init+0x94>)
 80066cc:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80066d0:	4b1c      	ldr	r3, [pc, #112]	@ (8006744 <USBD_LL_Init+0x94>)
 80066d2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80066d6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80066d8:	4b1a      	ldr	r3, [pc, #104]	@ (8006744 <USBD_LL_Init+0x94>)
 80066da:	2204      	movs	r2, #4
 80066dc:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80066de:	4b19      	ldr	r3, [pc, #100]	@ (8006744 <USBD_LL_Init+0x94>)
 80066e0:	2202      	movs	r2, #2
 80066e2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80066e4:	4b17      	ldr	r3, [pc, #92]	@ (8006744 <USBD_LL_Init+0x94>)
 80066e6:	2200      	movs	r2, #0
 80066e8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80066ea:	4b16      	ldr	r3, [pc, #88]	@ (8006744 <USBD_LL_Init+0x94>)
 80066ec:	2202      	movs	r2, #2
 80066ee:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80066f0:	4b14      	ldr	r3, [pc, #80]	@ (8006744 <USBD_LL_Init+0x94>)
 80066f2:	2200      	movs	r2, #0
 80066f4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80066f6:	4b13      	ldr	r3, [pc, #76]	@ (8006744 <USBD_LL_Init+0x94>)
 80066f8:	2200      	movs	r2, #0
 80066fa:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80066fc:	4b11      	ldr	r3, [pc, #68]	@ (8006744 <USBD_LL_Init+0x94>)
 80066fe:	2200      	movs	r2, #0
 8006700:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006702:	4b10      	ldr	r3, [pc, #64]	@ (8006744 <USBD_LL_Init+0x94>)
 8006704:	2200      	movs	r2, #0
 8006706:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006708:	4b0e      	ldr	r3, [pc, #56]	@ (8006744 <USBD_LL_Init+0x94>)
 800670a:	2200      	movs	r2, #0
 800670c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800670e:	480d      	ldr	r0, [pc, #52]	@ (8006744 <USBD_LL_Init+0x94>)
 8006710:	f7fa fb56 	bl	8000dc0 <HAL_PCD_Init>
 8006714:	4603      	mov	r3, r0
 8006716:	2b00      	cmp	r3, #0
 8006718:	d001      	beq.n	800671e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800671a:	f7f9 ff81 	bl	8000620 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800671e:	2180      	movs	r1, #128	@ 0x80
 8006720:	4808      	ldr	r0, [pc, #32]	@ (8006744 <USBD_LL_Init+0x94>)
 8006722:	f7fb fd82 	bl	800222a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006726:	2240      	movs	r2, #64	@ 0x40
 8006728:	2100      	movs	r1, #0
 800672a:	4806      	ldr	r0, [pc, #24]	@ (8006744 <USBD_LL_Init+0x94>)
 800672c:	f7fb fd36 	bl	800219c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006730:	2280      	movs	r2, #128	@ 0x80
 8006732:	2101      	movs	r1, #1
 8006734:	4803      	ldr	r0, [pc, #12]	@ (8006744 <USBD_LL_Init+0x94>)
 8006736:	f7fb fd31 	bl	800219c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800673a:	2300      	movs	r3, #0
}
 800673c:	4618      	mov	r0, r3
 800673e:	3708      	adds	r7, #8
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}
 8006744:	20000dfc 	.word	0x20000dfc

08006748 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b084      	sub	sp, #16
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006750:	2300      	movs	r3, #0
 8006752:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006754:	2300      	movs	r3, #0
 8006756:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800675e:	4618      	mov	r0, r3
 8006760:	f7fa fc3d 	bl	8000fde <HAL_PCD_Start>
 8006764:	4603      	mov	r3, r0
 8006766:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006768:	7bfb      	ldrb	r3, [r7, #15]
 800676a:	4618      	mov	r0, r3
 800676c:	f000 f942 	bl	80069f4 <USBD_Get_USB_Status>
 8006770:	4603      	mov	r3, r0
 8006772:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006774:	7bbb      	ldrb	r3, [r7, #14]
}
 8006776:	4618      	mov	r0, r3
 8006778:	3710      	adds	r7, #16
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}

0800677e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800677e:	b580      	push	{r7, lr}
 8006780:	b084      	sub	sp, #16
 8006782:	af00      	add	r7, sp, #0
 8006784:	6078      	str	r0, [r7, #4]
 8006786:	4608      	mov	r0, r1
 8006788:	4611      	mov	r1, r2
 800678a:	461a      	mov	r2, r3
 800678c:	4603      	mov	r3, r0
 800678e:	70fb      	strb	r3, [r7, #3]
 8006790:	460b      	mov	r3, r1
 8006792:	70bb      	strb	r3, [r7, #2]
 8006794:	4613      	mov	r3, r2
 8006796:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006798:	2300      	movs	r3, #0
 800679a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800679c:	2300      	movs	r3, #0
 800679e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80067a6:	78bb      	ldrb	r3, [r7, #2]
 80067a8:	883a      	ldrh	r2, [r7, #0]
 80067aa:	78f9      	ldrb	r1, [r7, #3]
 80067ac:	f7fb f911 	bl	80019d2 <HAL_PCD_EP_Open>
 80067b0:	4603      	mov	r3, r0
 80067b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80067b4:	7bfb      	ldrb	r3, [r7, #15]
 80067b6:	4618      	mov	r0, r3
 80067b8:	f000 f91c 	bl	80069f4 <USBD_Get_USB_Status>
 80067bc:	4603      	mov	r3, r0
 80067be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80067c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3710      	adds	r7, #16
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}

080067ca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80067ca:	b580      	push	{r7, lr}
 80067cc:	b084      	sub	sp, #16
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
 80067d2:	460b      	mov	r3, r1
 80067d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80067d6:	2300      	movs	r3, #0
 80067d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80067da:	2300      	movs	r3, #0
 80067dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80067e4:	78fa      	ldrb	r2, [r7, #3]
 80067e6:	4611      	mov	r1, r2
 80067e8:	4618      	mov	r0, r3
 80067ea:	f7fb f95c 	bl	8001aa6 <HAL_PCD_EP_Close>
 80067ee:	4603      	mov	r3, r0
 80067f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80067f2:	7bfb      	ldrb	r3, [r7, #15]
 80067f4:	4618      	mov	r0, r3
 80067f6:	f000 f8fd 	bl	80069f4 <USBD_Get_USB_Status>
 80067fa:	4603      	mov	r3, r0
 80067fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80067fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8006800:	4618      	mov	r0, r3
 8006802:	3710      	adds	r7, #16
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}

08006808 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b084      	sub	sp, #16
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	460b      	mov	r3, r1
 8006812:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006814:	2300      	movs	r3, #0
 8006816:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006818:	2300      	movs	r3, #0
 800681a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006822:	78fa      	ldrb	r2, [r7, #3]
 8006824:	4611      	mov	r1, r2
 8006826:	4618      	mov	r0, r3
 8006828:	f7fb fa14 	bl	8001c54 <HAL_PCD_EP_SetStall>
 800682c:	4603      	mov	r3, r0
 800682e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006830:	7bfb      	ldrb	r3, [r7, #15]
 8006832:	4618      	mov	r0, r3
 8006834:	f000 f8de 	bl	80069f4 <USBD_Get_USB_Status>
 8006838:	4603      	mov	r3, r0
 800683a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800683c:	7bbb      	ldrb	r3, [r7, #14]
}
 800683e:	4618      	mov	r0, r3
 8006840:	3710      	adds	r7, #16
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}

08006846 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006846:	b580      	push	{r7, lr}
 8006848:	b084      	sub	sp, #16
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
 800684e:	460b      	mov	r3, r1
 8006850:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006852:	2300      	movs	r3, #0
 8006854:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006856:	2300      	movs	r3, #0
 8006858:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006860:	78fa      	ldrb	r2, [r7, #3]
 8006862:	4611      	mov	r1, r2
 8006864:	4618      	mov	r0, r3
 8006866:	f7fb fa58 	bl	8001d1a <HAL_PCD_EP_ClrStall>
 800686a:	4603      	mov	r3, r0
 800686c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800686e:	7bfb      	ldrb	r3, [r7, #15]
 8006870:	4618      	mov	r0, r3
 8006872:	f000 f8bf 	bl	80069f4 <USBD_Get_USB_Status>
 8006876:	4603      	mov	r3, r0
 8006878:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800687a:	7bbb      	ldrb	r3, [r7, #14]
}
 800687c:	4618      	mov	r0, r3
 800687e:	3710      	adds	r7, #16
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}

08006884 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006884:	b480      	push	{r7}
 8006886:	b085      	sub	sp, #20
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	460b      	mov	r3, r1
 800688e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006896:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006898:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800689c:	2b00      	cmp	r3, #0
 800689e:	da0b      	bge.n	80068b8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80068a0:	78fb      	ldrb	r3, [r7, #3]
 80068a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80068a6:	68f9      	ldr	r1, [r7, #12]
 80068a8:	4613      	mov	r3, r2
 80068aa:	00db      	lsls	r3, r3, #3
 80068ac:	4413      	add	r3, r2
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	440b      	add	r3, r1
 80068b2:	3316      	adds	r3, #22
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	e00b      	b.n	80068d0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80068b8:	78fb      	ldrb	r3, [r7, #3]
 80068ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80068be:	68f9      	ldr	r1, [r7, #12]
 80068c0:	4613      	mov	r3, r2
 80068c2:	00db      	lsls	r3, r3, #3
 80068c4:	4413      	add	r3, r2
 80068c6:	009b      	lsls	r3, r3, #2
 80068c8:	440b      	add	r3, r1
 80068ca:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80068ce:	781b      	ldrb	r3, [r3, #0]
  }
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3714      	adds	r7, #20
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr

080068dc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b084      	sub	sp, #16
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	460b      	mov	r3, r1
 80068e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80068e8:	2300      	movs	r3, #0
 80068ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80068ec:	2300      	movs	r3, #0
 80068ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80068f6:	78fa      	ldrb	r2, [r7, #3]
 80068f8:	4611      	mov	r1, r2
 80068fa:	4618      	mov	r0, r3
 80068fc:	f7fb f845 	bl	800198a <HAL_PCD_SetAddress>
 8006900:	4603      	mov	r3, r0
 8006902:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006904:	7bfb      	ldrb	r3, [r7, #15]
 8006906:	4618      	mov	r0, r3
 8006908:	f000 f874 	bl	80069f4 <USBD_Get_USB_Status>
 800690c:	4603      	mov	r3, r0
 800690e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006910:	7bbb      	ldrb	r3, [r7, #14]
}
 8006912:	4618      	mov	r0, r3
 8006914:	3710      	adds	r7, #16
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}

0800691a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800691a:	b580      	push	{r7, lr}
 800691c:	b086      	sub	sp, #24
 800691e:	af00      	add	r7, sp, #0
 8006920:	60f8      	str	r0, [r7, #12]
 8006922:	607a      	str	r2, [r7, #4]
 8006924:	603b      	str	r3, [r7, #0]
 8006926:	460b      	mov	r3, r1
 8006928:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800692a:	2300      	movs	r3, #0
 800692c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800692e:	2300      	movs	r3, #0
 8006930:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8006938:	7af9      	ldrb	r1, [r7, #11]
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	f7fb f94f 	bl	8001be0 <HAL_PCD_EP_Transmit>
 8006942:	4603      	mov	r3, r0
 8006944:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006946:	7dfb      	ldrb	r3, [r7, #23]
 8006948:	4618      	mov	r0, r3
 800694a:	f000 f853 	bl	80069f4 <USBD_Get_USB_Status>
 800694e:	4603      	mov	r3, r0
 8006950:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006952:	7dbb      	ldrb	r3, [r7, #22]
}
 8006954:	4618      	mov	r0, r3
 8006956:	3718      	adds	r7, #24
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}

0800695c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b086      	sub	sp, #24
 8006960:	af00      	add	r7, sp, #0
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	607a      	str	r2, [r7, #4]
 8006966:	603b      	str	r3, [r7, #0]
 8006968:	460b      	mov	r3, r1
 800696a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800696c:	2300      	movs	r3, #0
 800696e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006970:	2300      	movs	r3, #0
 8006972:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800697a:	7af9      	ldrb	r1, [r7, #11]
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	f7fb f8db 	bl	8001b3a <HAL_PCD_EP_Receive>
 8006984:	4603      	mov	r3, r0
 8006986:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006988:	7dfb      	ldrb	r3, [r7, #23]
 800698a:	4618      	mov	r0, r3
 800698c:	f000 f832 	bl	80069f4 <USBD_Get_USB_Status>
 8006990:	4603      	mov	r3, r0
 8006992:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006994:	7dbb      	ldrb	r3, [r7, #22]
}
 8006996:	4618      	mov	r0, r3
 8006998:	3718      	adds	r7, #24
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}

0800699e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800699e:	b580      	push	{r7, lr}
 80069a0:	b082      	sub	sp, #8
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	6078      	str	r0, [r7, #4]
 80069a6:	460b      	mov	r3, r1
 80069a8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80069b0:	78fa      	ldrb	r2, [r7, #3]
 80069b2:	4611      	mov	r1, r2
 80069b4:	4618      	mov	r0, r3
 80069b6:	f7fb f8fb 	bl	8001bb0 <HAL_PCD_EP_GetRxCount>
 80069ba:	4603      	mov	r3, r0
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3708      	adds	r7, #8
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b083      	sub	sp, #12
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80069cc:	4b03      	ldr	r3, [pc, #12]	@ (80069dc <USBD_static_malloc+0x18>)
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	370c      	adds	r7, #12
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr
 80069da:	bf00      	nop
 80069dc:	200012e0 	.word	0x200012e0

080069e0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b083      	sub	sp, #12
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]

}
 80069e8:	bf00      	nop
 80069ea:	370c      	adds	r7, #12
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr

080069f4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b085      	sub	sp, #20
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	4603      	mov	r3, r0
 80069fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80069fe:	2300      	movs	r3, #0
 8006a00:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006a02:	79fb      	ldrb	r3, [r7, #7]
 8006a04:	2b03      	cmp	r3, #3
 8006a06:	d817      	bhi.n	8006a38 <USBD_Get_USB_Status+0x44>
 8006a08:	a201      	add	r2, pc, #4	@ (adr r2, 8006a10 <USBD_Get_USB_Status+0x1c>)
 8006a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a0e:	bf00      	nop
 8006a10:	08006a21 	.word	0x08006a21
 8006a14:	08006a27 	.word	0x08006a27
 8006a18:	08006a2d 	.word	0x08006a2d
 8006a1c:	08006a33 	.word	0x08006a33
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006a20:	2300      	movs	r3, #0
 8006a22:	73fb      	strb	r3, [r7, #15]
    break;
 8006a24:	e00b      	b.n	8006a3e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006a26:	2303      	movs	r3, #3
 8006a28:	73fb      	strb	r3, [r7, #15]
    break;
 8006a2a:	e008      	b.n	8006a3e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	73fb      	strb	r3, [r7, #15]
    break;
 8006a30:	e005      	b.n	8006a3e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006a32:	2303      	movs	r3, #3
 8006a34:	73fb      	strb	r3, [r7, #15]
    break;
 8006a36:	e002      	b.n	8006a3e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006a38:	2303      	movs	r3, #3
 8006a3a:	73fb      	strb	r3, [r7, #15]
    break;
 8006a3c:	bf00      	nop
  }
  return usb_status;
 8006a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3714      	adds	r7, #20
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr

08006a4c <memset>:
 8006a4c:	4402      	add	r2, r0
 8006a4e:	4603      	mov	r3, r0
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d100      	bne.n	8006a56 <memset+0xa>
 8006a54:	4770      	bx	lr
 8006a56:	f803 1b01 	strb.w	r1, [r3], #1
 8006a5a:	e7f9      	b.n	8006a50 <memset+0x4>

08006a5c <__libc_init_array>:
 8006a5c:	b570      	push	{r4, r5, r6, lr}
 8006a5e:	4d0d      	ldr	r5, [pc, #52]	@ (8006a94 <__libc_init_array+0x38>)
 8006a60:	4c0d      	ldr	r4, [pc, #52]	@ (8006a98 <__libc_init_array+0x3c>)
 8006a62:	1b64      	subs	r4, r4, r5
 8006a64:	10a4      	asrs	r4, r4, #2
 8006a66:	2600      	movs	r6, #0
 8006a68:	42a6      	cmp	r6, r4
 8006a6a:	d109      	bne.n	8006a80 <__libc_init_array+0x24>
 8006a6c:	4d0b      	ldr	r5, [pc, #44]	@ (8006a9c <__libc_init_array+0x40>)
 8006a6e:	4c0c      	ldr	r4, [pc, #48]	@ (8006aa0 <__libc_init_array+0x44>)
 8006a70:	f000 f818 	bl	8006aa4 <_init>
 8006a74:	1b64      	subs	r4, r4, r5
 8006a76:	10a4      	asrs	r4, r4, #2
 8006a78:	2600      	movs	r6, #0
 8006a7a:	42a6      	cmp	r6, r4
 8006a7c:	d105      	bne.n	8006a8a <__libc_init_array+0x2e>
 8006a7e:	bd70      	pop	{r4, r5, r6, pc}
 8006a80:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a84:	4798      	blx	r3
 8006a86:	3601      	adds	r6, #1
 8006a88:	e7ee      	b.n	8006a68 <__libc_init_array+0xc>
 8006a8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a8e:	4798      	blx	r3
 8006a90:	3601      	adds	r6, #1
 8006a92:	e7f2      	b.n	8006a7a <__libc_init_array+0x1e>
 8006a94:	08006b1c 	.word	0x08006b1c
 8006a98:	08006b1c 	.word	0x08006b1c
 8006a9c:	08006b1c 	.word	0x08006b1c
 8006aa0:	08006b20 	.word	0x08006b20

08006aa4 <_init>:
 8006aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aa6:	bf00      	nop
 8006aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aaa:	bc08      	pop	{r3}
 8006aac:	469e      	mov	lr, r3
 8006aae:	4770      	bx	lr

08006ab0 <_fini>:
 8006ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ab2:	bf00      	nop
 8006ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ab6:	bc08      	pop	{r3}
 8006ab8:	469e      	mov	lr, r3
 8006aba:	4770      	bx	lr
